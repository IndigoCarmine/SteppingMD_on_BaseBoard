
SteppingMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000368  080022d4  080022d4  000122d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800263c  0800263c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800263c  0800263c  0001263c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002644  08002644  00012644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000070  080026b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  080026b8  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000288a9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce6  00000000  00000000  00048942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00010463  00000000  00000000  0004b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000928  00000000  00000000  0005ba90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024b8  00000000  00000000  0005c3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020ac  00000000  00000000  0005e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f96  00000000  00000000  0006091c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bde88  00000000  00000000  000718b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012f73a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021e0  00000000  00000000  0012f78c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080022bc 	.word	0x080022bc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080022bc 	.word	0x080022bc

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_>:
				const auto&& expr = (n + end - begin) % n;
				return expr ? expr : n;
			}
		}

		constexpr void push(const Elem& x) noexcept override
 8000160:	b530      	push	{r4, r5, lr}
		{
			if(end == n) end = begin;
 8000162:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74

			buffer[end] = x;
 8000166:	240b      	movs	r4, #11
			if(end == n) end = begin;
 8000168:	2b0a      	cmp	r3, #10
 800016a:	bf08      	it	eq
 800016c:	6782      	streq	r2, [r0, #120]	; 0x78
			buffer[end] = x;
 800016e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8000170:	680d      	ldr	r5, [r1, #0]
			
			if(end == n - 1) end = 0;
 8000172:	2b09      	cmp	r3, #9
			buffer[end] = x;
 8000174:	fb04 0403 	mla	r4, r4, r3, r0
			if(end == n - 1) end = 0;
 8000178:	bf08      	it	eq
 800017a:	2300      	moveq	r3, #0
			buffer[end] = x;
 800017c:	6065      	str	r5, [r4, #4]
 800017e:	684d      	ldr	r5, [r1, #4]
			else ++end;
 8000180:	bf18      	it	ne
 8000182:	3301      	addne	r3, #1
			buffer[end] = x;
 8000184:	60a5      	str	r5, [r4, #8]
 8000186:	890d      	ldrh	r5, [r1, #8]

			if(begin == end)
 8000188:	429a      	cmp	r2, r3
			buffer[end] = x;
 800018a:	81a5      	strh	r5, [r4, #12]
 800018c:	7a89      	ldrb	r1, [r1, #10]
 800018e:	73a1      	strb	r1, [r4, #14]
 8000190:	6783      	str	r3, [r0, #120]	; 0x78
			if(begin == end)
 8000192:	d105      	bne.n	80001a0 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_+0x40>
			{
				if(begin == n - 1) begin = 0;
 8000194:	2a09      	cmp	r2, #9
 8000196:	bf0b      	itete	eq
 8000198:	2300      	moveq	r3, #0
				else ++begin;
 800019a:	3201      	addne	r2, #1
				if(begin == n - 1) begin = 0;
 800019c:	6743      	streq	r3, [r0, #116]	; 0x74
				else ++begin;
 800019e:	6742      	strne	r2, [r0, #116]	; 0x74
			}
		}
 80001a0:	bd30      	pop	{r4, r5, pc}

080001a2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_>:
		constexpr void push(const Elem& x) noexcept override
 80001a2:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n) end = begin;
 80001a4:	e9d0 c379 	ldrd	ip, r3, [r0, #484]	; 0x1e4
			buffer[end] = x;
 80001a8:	2418      	movs	r4, #24
			if(end == n) end = begin;
 80001aa:	2b14      	cmp	r3, #20
 80001ac:	bf08      	it	eq
 80001ae:	f8c0 c1e8 	streq.w	ip, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 80001b2:	460d      	mov	r5, r1
			buffer[end] = x;
 80001b4:	f8d0 71e8 	ldr.w	r7, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 80001b8:	4606      	mov	r6, r0
			if(end == n - 1) end = 0;
 80001ba:	2f13      	cmp	r7, #19
			buffer[end] = x;
 80001bc:	fb04 0407 	mla	r4, r4, r7, r0
 80001c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			if(end == n - 1) end = 0;
 80001c2:	bf08      	it	eq
 80001c4:	2700      	moveq	r7, #0
			buffer[end] = x;
 80001c6:	f104 0404 	add.w	r4, r4, #4
 80001ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			else ++end;
 80001cc:	bf18      	it	ne
 80001ce:	3701      	addne	r7, #1
			if(begin == end)
 80001d0:	45bc      	cmp	ip, r7
			buffer[end] = x;
 80001d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80001d6:	e884 0003 	stmia.w	r4, {r0, r1}
 80001da:	f8c6 71e8 	str.w	r7, [r6, #488]	; 0x1e8
			if(begin == end)
 80001de:	d107      	bne.n	80001f0 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_+0x4e>
				if(begin == n - 1) begin = 0;
 80001e0:	f1bc 0f13 	cmp.w	ip, #19
 80001e4:	bf0c      	ite	eq
 80001e6:	2300      	moveq	r3, #0
				else ++begin;
 80001e8:	f10c 0301 	addne.w	r3, ip, #1
 80001ec:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
		}
 80001f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080001f2 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv>:
			if(end == n) return 0;
 80001f2:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
 80001f6:	2b14      	cmp	r3, #20
 80001f8:	d00c      	beq.n	8000214 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv+0x22>
				const auto&& expr = (n + end - begin) % n;
 80001fa:	f8d0 01e4 	ldr.w	r0, [r0, #484]	; 0x1e4
 80001fe:	3314      	adds	r3, #20
 8000200:	1a18      	subs	r0, r3, r0
 8000202:	2314      	movs	r3, #20
 8000204:	fbb0 f2f3 	udiv	r2, r0, r3
 8000208:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 800020c:	2800      	cmp	r0, #0
 800020e:	bf08      	it	eq
 8000210:	4618      	moveq	r0, r3
 8000212:	4770      	bx	lr
			if(end == n) return 0;
 8000214:	2000      	movs	r0, #0
		}
 8000216:	4770      	bx	lr

08000218 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE5clearEv>:
		}

		constexpr void clear() noexcept
		{
			begin = 0;
			end = n;
 8000218:	2200      	movs	r2, #0
 800021a:	2314      	movs	r3, #20
 800021c:	e9c0 2379 	strd	r2, r3, [r0, #484]	; 0x1e4
		}
 8000220:	4770      	bx	lr

08000222 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv>:
			if(end == n) return 0;
 8000222:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8000224:	2b0a      	cmp	r3, #10
 8000226:	d00b      	beq.n	8000240 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv+0x1e>
				const auto&& expr = (n + end - begin) % n;
 8000228:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800022a:	330a      	adds	r3, #10
 800022c:	1a18      	subs	r0, r3, r0
 800022e:	230a      	movs	r3, #10
 8000230:	fbb0 f2f3 	udiv	r2, r0, r3
 8000234:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8000238:	2800      	cmp	r0, #0
 800023a:	bf08      	it	eq
 800023c:	4618      	moveq	r0, r3
 800023e:	4770      	bx	lr
			if(end == n) return 0;
 8000240:	2000      	movs	r0, #0
		}
 8000242:	4770      	bx	lr

08000244 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE5clearEv>:
			end = n;
 8000244:	2200      	movs	r2, #0
 8000246:	230a      	movs	r3, #10
 8000248:	e9c0 231d 	strd	r2, r3, [r0, #116]	; 0x74
		}
 800024c:	4770      	bx	lr

0800024e <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 800024e:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 8000250:	f8d1 e1e8 	ldr.w	lr, [r1, #488]	; 0x1e8
		constexpr std::optional<Elem> pop() noexcept
 8000254:	4684      	mov	ip, r0
			if(end == n)
 8000256:	f1be 0f14 	cmp.w	lr, #20
		constexpr std::optional<Elem> pop() noexcept
 800025a:	460e      	mov	r6, r1
 800025c:	b087      	sub	sp, #28
			if(end == n)
 800025e:	d105      	bne.n	800026c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x1e>
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 8000260:	2300      	movs	r3, #0
		}
 8000262:	4660      	mov	r0, ip

      template<typename... _Args>
	constexpr
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
	  _M_engaged(true)
 8000264:	f88c 3018 	strb.w	r3, [ip, #24]
 8000268:	b007      	add	sp, #28
 800026a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 800026c:	2418      	movs	r4, #24
 800026e:	466d      	mov	r5, sp
 8000270:	f8d1 71e4 	ldr.w	r7, [r1, #484]	; 0x1e4
			if(begin == n - 1) begin = 0;
 8000274:	2f13      	cmp	r7, #19
			Elem ret = buffer[begin];
 8000276:	fb04 1407 	mla	r4, r4, r7, r1
			if(begin == n - 1) begin = 0;
 800027a:	bf08      	it	eq
 800027c:	2700      	moveq	r7, #0
			Elem ret = buffer[begin];
 800027e:	f104 0404 	add.w	r4, r4, #4
 8000282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000286:	e894 0003 	ldmia.w	r4, {r0, r1}
			else ++begin;
 800028a:	bf18      	it	ne
 800028c:	3701      	addne	r7, #1
			if(begin == end)
 800028e:	45be      	cmp	lr, r7
			Elem ret = buffer[begin];
 8000290:	e885 0003 	stmia.w	r5, {r0, r1}
				end = n;
 8000294:	bf08      	it	eq
 8000296:	2314      	moveq	r3, #20
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 8000298:	4664      	mov	r4, ip
 800029a:	466d      	mov	r5, sp
 800029c:	bf08      	it	eq
 800029e:	f8c6 31e8 	streq.w	r3, [r6, #488]	; 0x1e8
 80002a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80002a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80002a6:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_engaged(true)
 80002aa:	2301      	movs	r3, #1
	    : _M_value(std::forward<_Args>(__args)...)
 80002ac:	e884 0003 	stmia.w	r4, {r0, r1}
 80002b0:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 80002b4:	e7d5      	b.n	8000262 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x14>

080002b6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 80002b6:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 80002b8:	6f8f      	ldr	r7, [r1, #120]	; 0x78
		constexpr std::optional<Elem> pop() noexcept
 80002ba:	4603      	mov	r3, r0
			if(end == n)
 80002bc:	2f0a      	cmp	r7, #10
		constexpr std::optional<Elem> pop() noexcept
 80002be:	460a      	mov	r2, r1
 80002c0:	b085      	sub	sp, #20
			if(end == n)
 80002c2:	d104      	bne.n	80002ce <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x18>
      _Optional_payload_base() = default;
 80002c4:	2200      	movs	r2, #0
		}
 80002c6:	4618      	mov	r0, r3
	  _M_engaged(true)
 80002c8:	72da      	strb	r2, [r3, #11]
 80002ca:	b005      	add	sp, #20
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 80002ce:	260b      	movs	r6, #11
 80002d0:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 80002d2:	ad01      	add	r5, sp, #4
			if(begin == n - 1) begin = 0;
 80002d4:	2c09      	cmp	r4, #9
			Elem ret = buffer[begin];
 80002d6:	fb06 1604 	mla	r6, r6, r4, r1
			if(begin == n - 1) begin = 0;
 80002da:	bf08      	it	eq
 80002dc:	2400      	moveq	r4, #0
			Elem ret = buffer[begin];
 80002de:	6870      	ldr	r0, [r6, #4]
 80002e0:	68b1      	ldr	r1, [r6, #8]
			else ++begin;
 80002e2:	bf18      	it	ne
 80002e4:	3401      	addne	r4, #1
			Elem ret = buffer[begin];
 80002e6:	c503      	stmia	r5!, {r0, r1}
 80002e8:	7bb1      	ldrb	r1, [r6, #14]
			if(begin == end)
 80002ea:	42a7      	cmp	r7, r4
			Elem ret = buffer[begin];
 80002ec:	70a9      	strb	r1, [r5, #2]
				end = n;
 80002ee:	bf08      	it	eq
 80002f0:	210a      	moveq	r1, #10
			Elem ret = buffer[begin];
 80002f2:	89b0      	ldrh	r0, [r6, #12]
				end = n;
 80002f4:	bf08      	it	eq
 80002f6:	6791      	streq	r1, [r2, #120]	; 0x78
			Elem ret = buffer[begin];
 80002f8:	8028      	strh	r0, [r5, #0]
 80002fa:	6754      	str	r4, [r2, #116]	; 0x74
	    : _M_value(std::forward<_Args>(__args)...)
 80002fc:	aa01      	add	r2, sp, #4
 80002fe:	ca03      	ldmia	r2!, {r0, r1}
 8000300:	6059      	str	r1, [r3, #4]
 8000302:	8811      	ldrh	r1, [r2, #0]
 8000304:	7892      	ldrb	r2, [r2, #2]
 8000306:	6018      	str	r0, [r3, #0]
 8000308:	729a      	strb	r2, [r3, #10]
 800030a:	8119      	strh	r1, [r3, #8]
	  _M_engaged(true)
 800030c:	2201      	movs	r2, #1
 800030e:	e7da      	b.n	80002c6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x10>

08000310 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE>:
	public:
		TxUnit(const u32 base_id) noexcept:
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
		{}

		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8000310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			auto for_body_par_id = [this, &pillarbox]<std::underlying_type_t<OffsetIdsEnum> offset_id, std::underlying_type_t<OffsetIdsEnum> n>(CompileForIndex<offset_id, n>) noexcept
			{
				CompileForIndex<offset_id + 1, n> ret{};

				ret.is_breaked = std::get<offset_id>(tx_ids).transmit(pillarbox, this->base_id);
 8000314:	6885      	ldr	r5, [r0, #8]
		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8000316:	460e      	mov	r6, r1
	{
		using Impl = TxIdImplInjectorAdaptor<offset_id>;
		SafeCircularQueue<MpuSpecific::TxFrame, Impl::queue_size()> queue{};

		// Mailboxが満杯になった(あるいはエラーが発生した)らfalse, そうでなければtrueを返す.
		bool transmit(MpuSpecific::Pillarbox& pillarbox, const u32 base_id) noexcept
 8000318:	ea5f 28d5 	movs.w	r8, r5, lsr #11
 800031c:	bf14      	ite	ne
 800031e:	2704      	movne	r7, #4
 8000320:	2700      	moveq	r7, #0
 8000322:	b08a      	sub	sp, #40	; 0x28
		{
			while(true)
			{
				if(pillarbox.not_full())
				{
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8000324:	f100 040c 	add.w	r4, r0, #12

		void post(const u32 id, TxFrame& frame) noexcept
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 8000328:	f3c5 050a 	ubfx	r5, r5, #0, #11
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
		}

		bool not_full() const noexcept
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 800032c:	6830      	ldr	r0, [r6, #0]
 800032e:	f000 fda8 	bl	8000e82 <HAL_CAN_GetTxMailboxesFreeLevel>
				if(pillarbox.not_full())
 8000332:	b308      	cbz	r0, 8000378 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8000334:	4621      	mov	r1, r4
 8000336:	a801      	add	r0, sp, #4
 8000338:	f7ff ffbd 	bl	80002b6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>
 800033c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8000340:	b1d3      	cbz	r3, 8000378 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 8000342:	f89d 3005 	ldrb.w	r3, [sp, #5]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8000346:	6830      	ldr	r0, [r6, #0]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 8000348:	2b00      	cmp	r3, #0
 800034a:	bf14      	ite	ne
 800034c:	2302      	movne	r3, #2
 800034e:	2300      	moveq	r3, #0
			};
 8000350:	9307      	str	r3, [sp, #28]
				.DLC = frame.header.dlc,
 8000352:	f89d 3004 	ldrb.w	r3, [sp, #4]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8000356:	f10d 0207 	add.w	r2, sp, #7
				.DLC = frame.header.dlc,
 800035a:	9308      	str	r3, [sp, #32]
			};
 800035c:	f89d 3006 	ldrb.w	r3, [sp, #6]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8000360:	a904      	add	r1, sp, #16
			};
 8000362:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			u32 mailbox{};
 8000366:	2300      	movs	r3, #0
 8000368:	9300      	str	r3, [sp, #0]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 800036a:	466b      	mov	r3, sp
			};
 800036c:	e9cd 5804 	strd	r5, r8, [sp, #16]
 8000370:	9706      	str	r7, [sp, #24]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8000372:	f000 fd38 	bl	8000de6 <HAL_CAN_AddTxMessage>
 8000376:	e7d9      	b.n	800032c <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x1c>
				return ret;
			};

			compile_for(for_body_par_id, CompileForIndex<static_cast<std::underlying_type_t<OffsetIdsEnum>>(0), to_underlying(OffsetIdsEnum::n)>{});
		}
 8000378:	b00a      	add	sp, #40	; 0x28
 800037a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800037e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 800037e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000380:	460e      	mov	r6, r1
 8000382:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 8000384:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8000386:	4604      	mov	r4, r0
 8000388:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 800038c:	d01d      	beq.n	80003ca <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800038e:	1d05      	adds	r5, r0, #4
 8000390:	42b5      	cmp	r5, r6
 8000392:	d01a      	beq.n	80003ca <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8000394:	682f      	ldr	r7, [r5, #0]
			}
		}

		void sort_tx_unit() noexcept
		{
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 8000396:	6823      	ldr	r3, [r4, #0]
 8000398:	68b9      	ldr	r1, [r7, #8]
	{
	  if (__comp(__i, __first))
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	4299      	cmp	r1, r3
 800039e:	d209      	bcs.n	80003b4 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x36>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	d004      	beq.n	80003ae <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x30>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80003a4:	4621      	mov	r1, r4
 80003a6:	1b2a      	subs	r2, r5, r4
 80003a8:	1d20      	adds	r0, r4, #4
 80003aa:	f001 ff0f 	bl	80021cc <memmove>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
 80003ae:	6027      	str	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80003b0:	3504      	adds	r5, #4
 80003b2:	e7ed      	b.n	8000390 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x12>
	  if (__comp(__i, __first))
 80003b4:	462b      	mov	r3, r5
 80003b6:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
 80003ba:	6890      	ldr	r0, [r2, #8]
 80003bc:	4281      	cmp	r1, r0
 80003be:	d202      	bcs.n	80003c6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x48>
	  *__last = _GLIBCXX_MOVE(*__next);
 80003c0:	f843 2904 	str.w	r2, [r3], #-4
      while (__comp(__val, __next))
 80003c4:	e7f7      	b.n	80003b6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 80003c6:	601f      	str	r7, [r3, #0]
    }
 80003c8:	e7f2      	b.n	80003b0 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x32>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 80003ca:	b003      	add	sp, #12
 80003cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080003ce <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80003ce:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 80003d0:	1e54      	subs	r4, r2, #1
 80003d2:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80003d6:	1066      	asrs	r6, r4, #1
	{
	  __secondChild = 2 * (__secondChild + 1);
	  if (__comp(__first + __secondChild,
		     __first + (__secondChild - 1)))
 80003d8:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      while (__secondChild < (__len - 1) / 2)
 80003dc:	460c      	mov	r4, r1
 80003de:	42a6      	cmp	r6, r4
 80003e0:	dd14      	ble.n	800040c <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x3e>
	  __secondChild = 2 * (__secondChild + 1);
 80003e2:	1c65      	adds	r5, r4, #1
 80003e4:	006f      	lsls	r7, r5, #1
		     __first + (__secondChild - 1)))
 80003e6:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 80003ea:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	  if (__comp(__first + __secondChild,
 80003ee:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80003f2:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 80003f6:	68ad      	ldr	r5, [r5, #8]
 80003f8:	45ae      	cmp	lr, r5
	    __secondChild--;
 80003fa:	bf88      	it	hi
 80003fc:	f107 37ff 	addhi.w	r7, r7, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8000400:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8000404:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
 8000408:	463c      	mov	r4, r7
      while (__secondChild < (__len - 1) / 2)
 800040a:	e7e8      	b.n	80003de <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x10>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 800040c:	07d5      	lsls	r5, r2, #31
 800040e:	d40e      	bmi.n	800042e <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
 8000410:	3a02      	subs	r2, #2
 8000412:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000416:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800041a:	d108      	bne.n	800042e <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
	{
	  __secondChild = 2 * (__secondChild + 1);
 800041c:	1c62      	adds	r2, r4, #1
 800041e:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8000420:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000424:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8000428:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 800042c:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 800042e:	1e62      	subs	r2, r4, #1
 8000430:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8000434:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8000436:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8000438:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800043c:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8000440:	da0d      	bge.n	800045e <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
 8000442:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8000446:	689e      	ldr	r6, [r3, #8]
 8000448:	68a7      	ldr	r7, [r4, #8]
 800044a:	42b7      	cmp	r7, r6
 800044c:	d207      	bcs.n	800045e <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800044e:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
 8000452:	1e54      	subs	r4, r2, #1
 8000454:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8000458:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 800045a:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800045c:	e7eb      	b.n	8000436 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800045e:	602b      	str	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000462 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 8000462:	b082      	sub	sp, #8
 8000464:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000468:	4604      	mov	r4, r0
 800046a:	460d      	mov	r5, r1
 800046c:	4616      	mov	r6, r2
 800046e:	b087      	sub	sp, #28
 8000470:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8000472:	1d07      	adds	r7, r0, #4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 8000474:	1b2b      	subs	r3, r5, r4
 8000476:	2b40      	cmp	r3, #64	; 0x40
 8000478:	dd2c      	ble.n	80004d4 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x72>
	  _DistanceType;

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
 800047a:	ea4f 08a3 	mov.w	r8, r3, asr #2
	{
	  if (__depth_limit == 0)
 800047e:	bb76      	cbnz	r6, 80004de <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x7c>
 8000480:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8000484:	af02      	add	r7, sp, #8
 8000486:	f10d 0910 	add.w	r9, sp, #16
 800048a:	e887 0003 	stmia.w	r7, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 800048e:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8000492:	f1a8 0602 	sub.w	r6, r8, #2
 8000496:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8000498:	e899 0003 	ldmia.w	r9, {r0, r1}
 800049c:	4642      	mov	r2, r8
 800049e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80004a2:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80004a6:	4631      	mov	r1, r6
 80004a8:	4620      	mov	r0, r4
 80004aa:	f7ff ff90 	bl	80003ce <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
			     __comp);
	  if (__parent == 0)
 80004ae:	b10e      	cbz	r6, 80004b4 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	    return;
	  __parent--;
 80004b0:	3e01      	subs	r6, #1
      while (true)
 80004b2:	e7f1      	b.n	8000498 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x36>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80004b4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
 80004b8:	6822      	ldr	r2, [r4, #0]
			 _DistanceType(__last - __first),
 80004ba:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 80004bc:	e897 0003 	ldmia.w	r7, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80004c0:	602a      	str	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 80004c2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80004c6:	10b2      	asrs	r2, r6, #2
 80004c8:	2100      	movs	r1, #0
 80004ca:	4620      	mov	r0, r4
 80004cc:	f7ff ff7f 	bl	80003ce <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80004d0:	2e04      	cmp	r6, #4
 80004d2:	dcef      	bgt.n	80004b4 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 80004d4:	b007      	add	sp, #28
 80004d6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004da:	b002      	add	sp, #8
 80004dc:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80004de:	10db      	asrs	r3, r3, #3
 80004e0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80004e4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80004e8:	f8d8 9008 	ldr.w	r9, [r8, #8]
 80004ec:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80004f0:	f855 cc04 	ldr.w	ip, [r5, #-4]
      if (__comp(__a, __b))
 80004f4:	45f1      	cmp	r9, lr
 80004f6:	f8dc 1008 	ldr.w	r1, [ip, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80004fa:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 80004fc:	f106 36ff 	add.w	r6, r6, #4294967295
      if (__comp(__a, __b))
 8000500:	d22a      	bcs.n	8000558 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xf6>
	  if (__comp(__b, __c))
 8000502:	458e      	cmp	lr, r1
 8000504:	d221      	bcs.n	800054a <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xe8>
      __a = _GLIBCXX_MOVE(__b);
 8000506:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8000508:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 800050c:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 800050e:	462b      	mov	r3, r5
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	4690      	mov	r8, r2
 8000514:	f852 1b04 	ldr.w	r1, [r2], #4
 8000518:	f8d0 9008 	ldr.w	r9, [r0, #8]
	  while (__comp(__first, __pivot))
 800051c:	6888      	ldr	r0, [r1, #8]
 800051e:	4548      	cmp	r0, r9
 8000520:	d3f6      	bcc.n	8000510 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>
	  --__last;
 8000522:	1f18      	subs	r0, r3, #4
 8000524:	4603      	mov	r3, r0
 8000526:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
 800052a:	f8de c008 	ldr.w	ip, [lr, #8]
 800052e:	45e1      	cmp	r9, ip
 8000530:	d3f8      	bcc.n	8000524 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xc2>
	  if (!(__first < __last))
 8000532:	4598      	cmp	r8, r3
 8000534:	d318      	bcc.n	8000568 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x106>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8000536:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000538:	4629      	mov	r1, r5
 800053a:	9300      	str	r3, [sp, #0]
 800053c:	4632      	mov	r2, r6
 800053e:	4640      	mov	r0, r8
 8000540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000542:	f7ff ff8e 	bl	8000462 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      while (__last - __first > int(_S_threshold))
 8000546:	4645      	mov	r5, r8
 8000548:	e794      	b.n	8000474 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x12>
	  else if (__comp(__a, __c))
 800054a:	4589      	cmp	r9, r1
 800054c:	d206      	bcs.n	800055c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 800054e:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8000552:	f845 2c04 	str.w	r2, [r5, #-4]
    }
 8000556:	e7d9      	b.n	800050c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__a, __c))
 8000558:	4589      	cmp	r9, r1
 800055a:	d202      	bcs.n	8000562 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x100>
 800055c:	e9c4 8200 	strd	r8, r2, [r4]
 8000560:	e7d4      	b.n	800050c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__b, __c))
 8000562:	458e      	cmp	lr, r1
 8000564:	d2cf      	bcs.n	8000506 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xa4>
 8000566:	e7f2      	b.n	800054e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xec>
      __a = _GLIBCXX_MOVE(__b);
 8000568:	f842 ec04 	str.w	lr, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 800056c:	6019      	str	r1, [r3, #0]
	  while (__comp(__first, __pivot))
 800056e:	e7cf      	b.n	8000510 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>

08000570 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>:
		u32 base_id;

	public:
		UnitBase(const u32 id_num, const u32 base_id) noexcept:
			id_num{id_num},
			base_id{base_id}
 8000570:	2301      	movs	r3, #1
		Transmitter(const std::same_as<u32> auto ... args) noexcept:
 8000572:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000576:	4604      	mov	r4, r0
 8000578:	e9c0 3101 	strd	r3, r1, [r0, #4]
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
 800057c:	4b2e      	ldr	r3, [pc, #184]	; (8000638 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xc8>)
 800057e:	b089      	sub	sp, #36	; 0x24

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 8000580:	227c      	movs	r2, #124	; 0x7c
 8000582:	2100      	movs	r1, #0
 8000584:	f840 3b0c 	str.w	r3, [r0], #12
 8000588:	f001 fe3a 	bl	8002200 <memset>
	class SafeCircularQueue final : SafeCircularQueueEraseN<Elem>
 800058c:	4b2b      	ldr	r3, [pc, #172]	; (800063c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xcc>)
 800058e:	226e      	movs	r2, #110	; 0x6e
 8000590:	2100      	movs	r1, #0
 8000592:	60e3      	str	r3, [r4, #12]
 8000594:	f104 0010 	add.w	r0, r4, #16
 8000598:	f001 fe32 	bl	8002200 <memset>
 800059c:	230a      	movs	r3, #10
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 800059e:	f104 0688 	add.w	r6, r4, #136	; 0x88
      { return iterator(data() + _Nm); }
 80005a2:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80005a6:	eba7 0806 	sub.w	r8, r7, r6
 80005aa:	ea4f 02a8 	mov.w	r2, r8, asr #2

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80005ae:	fab2 f282 	clz	r2, r2
			tx_units{args ...}
 80005b2:	e9c4 3421 	strd	r3, r4, [r4, #132]	; 0x84
 80005b6:	2300      	movs	r3, #0
	  std::__introsort_loop(__first, __last,
 80005b8:	ad03      	add	r5, sp, #12
 80005ba:	f10d 0908 	add.w	r9, sp, #8
 80005be:	f1c2 021f 	rsb	r2, r2, #31
 80005c2:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      end() noexcept
 80005c6:	f88d 300c 	strb.w	r3, [sp, #12]
 80005ca:	f88d 3008 	strb.w	r3, [sp, #8]
 80005ce:	4639      	mov	r1, r7
 80005d0:	462b      	mov	r3, r5
 80005d2:	4630      	mov	r0, r6
 80005d4:	f8cd 9000 	str.w	r9, [sp]
 80005d8:	0052      	lsls	r2, r2, #1
 80005da:	9504      	str	r5, [sp, #16]
 80005dc:	f8cd 9014 	str.w	r9, [sp, #20]
 80005e0:	f7ff ff3f 	bl	8000462 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      if (__last - __first > int(_S_threshold))
 80005e4:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 80005e8:	e9cd 5906 	strd	r5, r9, [sp, #24]
    __final_insertion_sort(_RandomAccessIterator __first,
 80005ec:	ab06      	add	r3, sp, #24
      if (__last - __first > int(_S_threshold))
 80005ee:	dd16      	ble.n	800061e <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xae>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 80005f0:	cb0c      	ldmia	r3, {r2, r3}
 80005f2:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 80005f6:	4629      	mov	r1, r5
 80005f8:	4630      	mov	r0, r6
 80005fa:	f7ff fec0 	bl	800037e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 80005fe:	42bd      	cmp	r5, r7
 8000600:	d012      	beq.n	8000628 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xb8>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8000602:	462b      	mov	r3, r5
	__val = _GLIBCXX_MOVE(*__last);
 8000604:	682a      	ldr	r2, [r5, #0]
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 8000606:	6890      	ldr	r0, [r2, #8]
 8000608:	f853 1c04 	ldr.w	r1, [r3, #-4]
      while (__comp(__val, __next))
 800060c:	688e      	ldr	r6, [r1, #8]
 800060e:	42b0      	cmp	r0, r6
 8000610:	d202      	bcs.n	8000618 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xa8>
	  *__last = _GLIBCXX_MOVE(*__next);
 8000612:	f843 1904 	str.w	r1, [r3], #-4
      while (__comp(__val, __next))
 8000616:	e7f7      	b.n	8000608 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x98>
      *__last = _GLIBCXX_MOVE(__val);
 8000618:	601a      	str	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800061a:	3504      	adds	r5, #4
 800061c:	e7ef      	b.n	80005fe <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x8e>
	std::__insertion_sort(__first, __last, __comp);
 800061e:	4639      	mov	r1, r7
 8000620:	cb0c      	ldmia	r3, {r2, r3}
 8000622:	4630      	mov	r0, r6
 8000624:	f7ff feab 	bl	800037e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
			is_id_sorted = true;
 8000628:	2301      	movs	r3, #1
		}
 800062a:	4620      	mov	r0, r4
			is_id_sorted = true;
 800062c:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		}
 8000630:	b009      	add	sp, #36	; 0x24
 8000632:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000636:	bf00      	nop
 8000638:	080024c8 	.word	0x080024c8
 800063c:	080024b0 	.word	0x080024b0

08000640 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE>:

}

namespace Chibarobo2022
{
	inline CRSLib::Can::Transmitter<Chibarobo2022::SampleTx> transmitter{(u32)0x100};
 8000640:	4a15      	ldr	r2, [pc, #84]	; (8000698 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x58>)
			transmitter.transmit(can_manager.pillarbox);
			
			executor.run_once();
		}
	}
}
 8000642:	b510      	push	{r4, lr}
 8000644:	6813      	ldr	r3, [r2, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	2b01      	cmp	r3, #1
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	d104      	bne.n	8000658 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x18>
 800064e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000652:	4812      	ldr	r0, [pc, #72]	; (800069c <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x5c>)
 8000654:	f7ff ff8c 	bl	8000570 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>
	};
}

namespace Chibarobo2022
{
	inline CRSLib::Can::Receiver<Chibarobo2022::SampleRx> receiver{(u32)0x101};
 8000658:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x60>)
 800065a:	6813      	ldr	r3, [r2, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	2b01      	cmp	r3, #1
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	d117      	bne.n	8000694 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x54>
 8000664:	4c0f      	ldr	r4, [pc, #60]	; (80006a4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x64>)
 8000666:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 800066a:	6023      	str	r3, [r4, #0]
 800066c:	f240 1301 	movw	r3, #257	; 0x101
 8000670:	2100      	movs	r1, #0
 8000672:	f104 0008 	add.w	r0, r4, #8
 8000676:	6063      	str	r3, [r4, #4]
 8000678:	f001 fdc2 	bl	8002200 <memset>
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x68>)
 800067e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000682:	2100      	movs	r1, #0
 8000684:	f104 000c 	add.w	r0, r4, #12
 8000688:	60a3      	str	r3, [r4, #8]
 800068a:	f001 fdb9 	bl	8002200 <memset>
 800068e:	2314      	movs	r3, #20
 8000690:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 8000694:	bd10      	pop	{r4, pc}
 8000696:	bf00      	nop
 8000698:	20000090 	.word	0x20000090
 800069c:	20000288 	.word	0x20000288
 80006a0:	2000008c 	.word	0x2000008c
 80006a4:	20000094 	.word	0x20000094
 80006a8:	080024d4 	.word	0x080024d4

080006ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b0:	2214      	movs	r2, #20
 80006b2:	2100      	movs	r1, #0
 80006b4:	a808      	add	r0, sp, #32
 80006b6:	f001 fda3 	bl	8002200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ba:	2214      	movs	r2, #20
 80006bc:	2100      	movs	r1, #0
 80006be:	a801      	add	r0, sp, #4
 80006c0:	f001 fd9e 	bl	8002200 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006cc:	e9cd 3206 	strd	r3, r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d6:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006da:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e2:	f000 fd17 	bl	8001114 <HAL_RCC_OscConfig>
 80006e6:	b108      	cbz	r0, 80006ec <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ea:	e7fe      	b.n	80006ea <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006fc:	4621      	mov	r1, r4
 80006fe:	a801      	add	r0, sp, #4
 8000700:	f000 fede 	bl	80014c0 <HAL_RCC_ClockConfig>
 8000704:	b108      	cbz	r0, 800070a <SystemClock_Config+0x5e>
 8000706:	b672      	cpsid	i
  while (1)
 8000708:	e7fe      	b.n	8000708 <SystemClock_Config+0x5c>
}
 800070a:	b010      	add	sp, #64	; 0x40
 800070c:	bd10      	pop	{r4, pc}
	...

08000710 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000710:	2610      	movs	r6, #16
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8000716:	f000 fac7 	bl	8000ca8 <HAL_Init>
  SystemClock_Config();
 800071a:	f7ff ffc7 	bl	80006ac <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	4632      	mov	r2, r6
 8000720:	2100      	movs	r1, #0
 8000722:	a810      	add	r0, sp, #64	; 0x40
 8000724:	f001 fd6c 	bl	8002200 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000728:	4baa      	ldr	r3, [pc, #680]	; (80009d4 <main+0x2c4>)
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 800072a:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8000730:	48a9      	ldr	r0, [pc, #676]	; (80009d8 <main+0x2c8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	f042 0220 	orr.w	r2, r2, #32
 8000736:	619a      	str	r2, [r3, #24]
 8000738:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073c:	f002 0220 	and.w	r2, r2, #32
 8000740:	9200      	str	r2, [sp, #0]
 8000742:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	f042 0204 	orr.w	r2, r2, #4
 800074c:	619a      	str	r2, [r3, #24]
 800074e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000750:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	f002 0204 	and.w	r2, r2, #4
 8000756:	9201      	str	r2, [sp, #4]
 8000758:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	699a      	ldr	r2, [r3, #24]
 800075c:	f042 0208 	orr.w	r2, r2, #8
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	f003 0308 	and.w	r3, r3, #8
 800076a:	9302      	str	r3, [sp, #8]
 800076c:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 800076e:	f000 fccb 	bl	8001108 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENAA_Pin|DIRA_Pin|ENAE_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8000778:	4898      	ldr	r0, [pc, #608]	; (80009dc <main+0x2cc>)
 800077a:	f000 fcc5 	bl	8001108 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(DIRE_GPIO_Port, &GPIO_InitStruct);
 8000782:	4895      	ldr	r0, [pc, #596]	; (80009d8 <main+0x2c8>)
 8000784:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(DIRE_GPIO_Port, &GPIO_InitStruct);
 800078e:	f000 fbe5 	bl	8000f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAC_Pin|DIRC_Pin;
 8000792:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	4890      	ldr	r0, [pc, #576]	; (80009d8 <main+0x2c8>)
 8000798:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a2:	f000 fbdb 	bl	8000f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAA_Pin|DIRA_Pin;
 80007a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	488c      	ldr	r0, [pc, #560]	; (80009dc <main+0x2cc>)
 80007ac:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b6:	f000 fbd1 	bl	8000f5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAE_Pin;
 80007ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 80007be:	4887      	ldr	r0, [pc, #540]	; (80009dc <main+0x2cc>)
 80007c0:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f000 fbc7 	bl	8000f5c <HAL_GPIO_Init>
  hcan.Instance = CAN1;
 80007ce:	4884      	ldr	r0, [pc, #528]	; (80009e0 <main+0x2d0>)
 80007d0:	4b84      	ldr	r3, [pc, #528]	; (80009e4 <main+0x2d4>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 80007d2:	6184      	str	r4, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80007d4:	8384      	strh	r4, [r0, #28]
  hcan.Init.Prescaler = 16;
 80007d6:	e9c0 3600 	strd	r3, r6, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007da:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007de:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80007e2:	f000 fa85 	bl	8000cf0 <HAL_CAN_Init>
 80007e6:	4605      	mov	r5, r0
 80007e8:	b108      	cbz	r0, 80007ee <main+0xde>
 80007ea:	b672      	cpsid	i
  while (1)
 80007ec:	e7fe      	b.n	80007ec <main+0xdc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ee:	4601      	mov	r1, r0
 80007f0:	4632      	mov	r2, r6
 80007f2:	a805      	add	r0, sp, #20
 80007f4:	f001 fd04 	bl	8002200 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007f8:	221c      	movs	r2, #28
 80007fa:	4629      	mov	r1, r5
 80007fc:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000802:	f001 fcfd 	bl	8002200 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000806:	2220      	movs	r2, #32
 8000808:	4629      	mov	r1, r5
 800080a:	a810      	add	r0, sp, #64	; 0x40
 800080c:	f001 fcf8 	bl	8002200 <memset>
  htim1.Init.Prescaler = 71;
 8000810:	2347      	movs	r3, #71	; 0x47
  htim1.Init.Period = 65535;
 8000812:	f64f 77ff 	movw	r7, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000816:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim1.Instance = TIM1;
 800081a:	4c73      	ldr	r4, [pc, #460]	; (80009e8 <main+0x2d8>)
  htim1.Init.Prescaler = 71;
 800081c:	4873      	ldr	r0, [pc, #460]	; (80009ec <main+0x2dc>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081e:	e9c4 7503 	strd	r7, r5, [r4, #12]
  htim1.Init.Prescaler = 71;
 8000822:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000826:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000828:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 800082a:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800082c:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000830:	f000 ff8a 	bl	8001748 <HAL_TIM_Base_Init>
 8000834:	b108      	cbz	r0, 800083a <main+0x12a>
 8000836:	b672      	cpsid	i
  while (1)
 8000838:	e7fe      	b.n	8000838 <main+0x128>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800083e:	4620      	mov	r0, r4
 8000840:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000842:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000844:	f001 f869 	bl	800191a <HAL_TIM_ConfigClockSource>
 8000848:	b108      	cbz	r0, 800084e <main+0x13e>
 800084a:	b672      	cpsid	i
  while (1)
 800084c:	e7fe      	b.n	800084c <main+0x13c>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800084e:	4620      	mov	r0, r4
 8000850:	f000 ffa6 	bl	80017a0 <HAL_TIM_PWM_Init>
 8000854:	b108      	cbz	r0, 800085a <main+0x14a>
 8000856:	b672      	cpsid	i
  while (1)
 8000858:	e7fe      	b.n	8000858 <main+0x148>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800085e:	a903      	add	r1, sp, #12
 8000860:	4620      	mov	r0, r4
 8000862:	f001 f8ef 	bl	8001a44 <HAL_TIMEx_MasterConfigSynchronization>
 8000866:	4602      	mov	r2, r0
 8000868:	b108      	cbz	r0, 800086e <main+0x15e>
 800086a:	b672      	cpsid	i
  while (1)
 800086c:	e7fe      	b.n	800086c <main+0x15c>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086e:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000870:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8000874:	e9cd 3009 	strd	r3, r0, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000878:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800087c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087e:	a909      	add	r1, sp, #36	; 0x24
 8000880:	4620      	mov	r0, r4
 8000882:	f000 ffe5 	bl	8001850 <HAL_TIM_PWM_ConfigChannel>
 8000886:	b108      	cbz	r0, 800088c <main+0x17c>
 8000888:	b672      	cpsid	i
  while (1)
 800088a:	e7fe      	b.n	800088a <main+0x17a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800088c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000890:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 8000894:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000898:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089a:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089c:	a910      	add	r1, sp, #64	; 0x40
 800089e:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80008a0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a2:	f001 f8f9 	bl	8001a98 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a6:	4681      	mov	r9, r0
 80008a8:	b108      	cbz	r0, 80008ae <main+0x19e>
 80008aa:	b672      	cpsid	i
  while (1)
 80008ac:	e7fe      	b.n	80008ac <main+0x19c>
  HAL_TIM_MspPostInit(&htim1);
 80008ae:	4620      	mov	r0, r4
 80008b0:	f000 f93e 	bl	8000b30 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008b4:	4632      	mov	r2, r6
 80008b6:	4649      	mov	r1, r9
 80008b8:	a809      	add	r0, sp, #36	; 0x24
 80008ba:	f001 fca1 	bl	8002200 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	4649      	mov	r1, r9
 80008c0:	221c      	movs	r2, #28
 80008c2:	a810      	add	r0, sp, #64	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008c4:	e9cd 9905 	strd	r9, r9, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008c8:	f001 fc9a 	bl	8002200 <memset>
  htim2.Init.Prescaler = 31;
 80008cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80008d0:	231f      	movs	r3, #31
  htim2.Instance = TIM2;
 80008d2:	4c47      	ldr	r4, [pc, #284]	; (80009f0 <main+0x2e0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d4:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 31;
 80008d6:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 80008da:	e9c4 9702 	strd	r9, r7, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e2:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008e6:	f000 ff2f 	bl	8001748 <HAL_TIM_Base_Init>
 80008ea:	b108      	cbz	r0, 80008f0 <main+0x1e0>
 80008ec:	b672      	cpsid	i
  while (1)
 80008ee:	e7fe      	b.n	80008ee <main+0x1de>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f0:	4620      	mov	r0, r4
 80008f2:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008f6:	f001 f810 	bl	800191a <HAL_TIM_ConfigClockSource>
 80008fa:	b108      	cbz	r0, 8000900 <main+0x1f0>
 80008fc:	b672      	cpsid	i
  while (1)
 80008fe:	e7fe      	b.n	80008fe <main+0x1ee>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000900:	4620      	mov	r0, r4
 8000902:	f000 ff4d 	bl	80017a0 <HAL_TIM_PWM_Init>
 8000906:	b108      	cbz	r0, 800090c <main+0x1fc>
 8000908:	b672      	cpsid	i
  while (1)
 800090a:	e7fe      	b.n	800090a <main+0x1fa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800090c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800090e:	4838      	ldr	r0, [pc, #224]	; (80009f0 <main+0x2e0>)
 8000910:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000912:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000916:	f001 f895 	bl	8001a44 <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4602      	mov	r2, r0
 800091c:	b108      	cbz	r0, 8000922 <main+0x212>
 800091e:	b672      	cpsid	i
  while (1)
 8000920:	e7fe      	b.n	8000920 <main+0x210>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000922:	2660      	movs	r6, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000924:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8000926:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092a:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800092c:	a910      	add	r1, sp, #64	; 0x40
 800092e:	4830      	ldr	r0, [pc, #192]	; (80009f0 <main+0x2e0>)
 8000930:	f000 ff8e 	bl	8001850 <HAL_TIM_PWM_ConfigChannel>
 8000934:	4605      	mov	r5, r0
 8000936:	b108      	cbz	r0, 800093c <main+0x22c>
 8000938:	b672      	cpsid	i
  while (1)
 800093a:	e7fe      	b.n	800093a <main+0x22a>
  HAL_TIM_MspPostInit(&htim2);
 800093c:	482c      	ldr	r0, [pc, #176]	; (80009f0 <main+0x2e0>)
 800093e:	f000 f8f7 	bl	8000b30 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000942:	2210      	movs	r2, #16
 8000944:	4629      	mov	r1, r5
 8000946:	a809      	add	r0, sp, #36	; 0x24
 8000948:	f001 fc5a 	bl	8002200 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800094c:	221c      	movs	r2, #28
 800094e:	4629      	mov	r1, r5
 8000950:	a810      	add	r0, sp, #64	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000952:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	f001 fc53 	bl	8002200 <memset>
  htim3.Init.Prescaler = 31;
 800095a:	231f      	movs	r3, #31
  htim3.Instance = TIM3;
 800095c:	4c25      	ldr	r4, [pc, #148]	; (80009f4 <main+0x2e4>)
  htim3.Init.Prescaler = 31;
 800095e:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000960:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 31;
 8000962:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 65535;
 8000966:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800096a:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800096e:	2380      	movs	r3, #128	; 0x80
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000970:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000972:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000974:	f000 fee8 	bl	8001748 <HAL_TIM_Base_Init>
 8000978:	b108      	cbz	r0, 800097e <main+0x26e>
 800097a:	b672      	cpsid	i
  while (1)
 800097c:	e7fe      	b.n	800097c <main+0x26c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800097e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000982:	4620      	mov	r0, r4
 8000984:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000986:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000988:	f000 ffc7 	bl	800191a <HAL_TIM_ConfigClockSource>
 800098c:	b108      	cbz	r0, 8000992 <main+0x282>
 800098e:	b672      	cpsid	i
  while (1)
 8000990:	e7fe      	b.n	8000990 <main+0x280>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000992:	4620      	mov	r0, r4
 8000994:	f000 ff04 	bl	80017a0 <HAL_TIM_PWM_Init>
 8000998:	b108      	cbz	r0, 800099e <main+0x28e>
 800099a:	b672      	cpsid	i
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x28c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099e:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a2:	a905      	add	r1, sp, #20
 80009a4:	4620      	mov	r0, r4
 80009a6:	f001 f84d 	bl	8001a44 <HAL_TIMEx_MasterConfigSynchronization>
 80009aa:	4602      	mov	r2, r0
 80009ac:	b108      	cbz	r0, 80009b2 <main+0x2a2>
 80009ae:	b672      	cpsid	i
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <main+0x2a0>
  sConfigOC.Pulse = 0;
 80009b2:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b6:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009b8:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ba:	a910      	add	r1, sp, #64	; 0x40
 80009bc:	4620      	mov	r0, r4
 80009be:	f000 ff47 	bl	8001850 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	b108      	cbz	r0, 80009c8 <main+0x2b8>
 80009c4:	b672      	cpsid	i
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <main+0x2b6>
  HAL_TIM_MspPostInit(&htim3);
 80009c8:	4620      	mov	r0, r4
 80009ca:	f000 f8b1 	bl	8000b30 <HAL_TIM_MspPostInit>
  wrapper_cpp();
 80009ce:	f000 f920 	bl	8000c12 <wrapper_cpp>
  while (1)
 80009d2:	e7fe      	b.n	80009d2 <main+0x2c2>
 80009d4:	40021000 	.word	0x40021000
 80009d8:	40010c00 	.word	0x40010c00
 80009dc:	40010800 	.word	0x40010800
 80009e0:	20000318 	.word	0x20000318
 80009e4:	40006400 	.word	0x40006400
 80009e8:	20000340 	.word	0x20000340
 80009ec:	40012c00 	.word	0x40012c00
 80009f0:	20000388 	.word	0x20000388
 80009f4:	200003d0 	.word	0x200003d0
 80009f8:	40000400 	.word	0x40000400

080009fc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009fc:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <HAL_MspInit+0x3c>)
{
 80009fe:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a00:	699a      	ldr	r2, [r3, #24]
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	619a      	str	r2, [r3, #24]
 8000a08:	699a      	ldr	r2, [r3, #24]
 8000a0a:	f002 0201 	and.w	r2, r2, #1
 8000a0e:	9200      	str	r2, [sp, #0]
 8000a10:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a12:	69da      	ldr	r2, [r3, #28]
 8000a14:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a18:	61da      	str	r2, [r3, #28]
 8000a1a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a22:	9301      	str	r3, [sp, #4]
 8000a24:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a26:	6853      	ldr	r3, [r2, #4]
 8000a28:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a32:	b002      	add	sp, #8
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40021000 	.word	0x40021000
 8000a3c:	40010000 	.word	0x40010000

08000a40 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a40:	b510      	push	{r4, lr}
 8000a42:	4604      	mov	r4, r0
 8000a44:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	2210      	movs	r2, #16
 8000a48:	2100      	movs	r1, #0
 8000a4a:	a802      	add	r0, sp, #8
 8000a4c:	f001 fbd8 	bl	8002200 <memset>
  if(hcan->Instance==CAN1)
 8000a50:	6822      	ldr	r2, [r4, #0]
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <HAL_CAN_MspInit+0x7c>)
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d12e      	bne.n	8000ab6 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a58:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8000a5c:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	4818      	ldr	r0, [pc, #96]	; (8000ac0 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a60:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8000a64:	61da      	str	r2, [r3, #28]
 8000a66:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a6a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8000a6e:	9200      	str	r2, [sp, #0]
 8000a70:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	699a      	ldr	r2, [r3, #24]
 8000a74:	f042 0208 	orr.w	r2, r2, #8
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	699b      	ldr	r3, [r3, #24]
 8000a7c:	f003 0308 	and.w	r3, r3, #8
 8000a80:	9301      	str	r3, [sp, #4]
 8000a82:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a88:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f000 fa67 	bl	8000f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a92:	2302      	movs	r3, #2
 8000a94:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a98:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <HAL_CAN_MspInit+0x80>)
 8000a9c:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a9e:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f000 fa5c 	bl	8000f5c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000aa4:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HAL_CAN_MspInit+0x84>)
 8000aa6:	6853      	ldr	r3, [r2, #4]
 8000aa8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8000aac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ab6:	b006      	add	sp, #24
 8000ab8:	bd10      	pop	{r4, pc}
 8000aba:	bf00      	nop
 8000abc:	40006400 	.word	0x40006400
 8000ac0:	40010c00 	.word	0x40010c00
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8000ac8:	6803      	ldr	r3, [r0, #0]
 8000aca:	4a16      	ldr	r2, [pc, #88]	; (8000b24 <HAL_TIM_Base_MspInit+0x5c>)
{
 8000acc:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d10b      	bne.n	8000aea <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <HAL_TIM_Base_MspInit+0x60>)
 8000ad4:	699a      	ldr	r2, [r3, #24]
 8000ad6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ada:	619a      	str	r2, [r3, #24]
 8000adc:	699b      	ldr	r3, [r3, #24]
 8000ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ae6:	b004      	add	sp, #16
 8000ae8:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8000aea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000aee:	d10b      	bne.n	8000b08 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000af4:	69da      	ldr	r2, [r3, #28]
 8000af6:	f042 0201 	orr.w	r2, r2, #1
 8000afa:	61da      	str	r2, [r3, #28]
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	9302      	str	r3, [sp, #8]
 8000b04:	9b02      	ldr	r3, [sp, #8]
 8000b06:	e7ee      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8000b08:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <HAL_TIM_Base_MspInit+0x64>)
 8000b0a:	4293      	cmp	r3, r2
 8000b0c:	d1eb      	bne.n	8000ae6 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_TIM_Base_MspInit+0x60>)
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	f042 0202 	orr.w	r2, r2, #2
 8000b16:	61da      	str	r2, [r3, #28]
 8000b18:	69db      	ldr	r3, [r3, #28]
 8000b1a:	f003 0302 	and.w	r3, r3, #2
 8000b1e:	9303      	str	r3, [sp, #12]
 8000b20:	9b03      	ldr	r3, [sp, #12]
}
 8000b22:	e7e0      	b.n	8000ae6 <HAL_TIM_Base_MspInit+0x1e>
 8000b24:	40012c00 	.word	0x40012c00
 8000b28:	40021000 	.word	0x40021000
 8000b2c:	40000400 	.word	0x40000400

08000b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b30:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b32:	2510      	movs	r5, #16
{
 8000b34:	4604      	mov	r4, r0
 8000b36:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	462a      	mov	r2, r5
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	eb0d 0005 	add.w	r0, sp, r5
 8000b40:	f001 fb5e 	bl	8002200 <memset>
  if(htim->Instance==TIM1)
 8000b44:	6823      	ldr	r3, [r4, #0]
 8000b46:	4a27      	ldr	r2, [pc, #156]	; (8000be4 <HAL_TIM_MspPostInit+0xb4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d116      	bne.n	8000b7a <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b26      	ldr	r3, [pc, #152]	; (8000be8 <HAL_TIM_MspPostInit+0xb8>)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	699a      	ldr	r2, [r3, #24]
 8000b54:	f042 0204 	orr.w	r2, r2, #4
 8000b58:	619a      	str	r2, [r3, #24]
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	f003 0304 	and.w	r3, r3, #4
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b64:	2302      	movs	r3, #2
 8000b66:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6c:	eb0d 0105 	add.w	r1, sp, r5
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	481e      	ldr	r0, [pc, #120]	; (8000bec <HAL_TIM_MspPostInit+0xbc>)
 8000b72:	f000 f9f3 	bl	8000f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000b76:	b009      	add	sp, #36	; 0x24
 8000b78:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 8000b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7e:	d111      	bne.n	8000ba4 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000b84:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b86:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b88:	f042 0204 	orr.w	r2, r2, #4
 8000b8c:	619a      	str	r2, [r3, #24]
 8000b8e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b92:	f003 0304 	and.w	r3, r3, #4
 8000b96:	9302      	str	r3, [sp, #8]
 8000b98:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	e7e5      	b.n	8000b70 <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM3)
 8000ba4:	4a12      	ldr	r2, [pc, #72]	; (8000bf0 <HAL_TIM_MspPostInit+0xc0>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d1e5      	bne.n	8000b76 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000baa:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <HAL_TIM_MspPostInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <HAL_TIM_MspPostInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bae:	6999      	ldr	r1, [r3, #24]
 8000bb0:	f041 0108 	orr.w	r1, r1, #8
 8000bb4:	6199      	str	r1, [r3, #24]
 8000bb6:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb8:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	9303      	str	r3, [sp, #12]
 8000bc0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bc4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bca:	f000 f9c7 	bl	8000f5c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <HAL_TIM_MspPostInit+0xc8>)
 8000bd0:	6853      	ldr	r3, [r2, #4]
 8000bd2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000bd6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bda:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bde:	6053      	str	r3, [r2, #4]
}
 8000be0:	e7c9      	b.n	8000b76 <HAL_TIM_MspPostInit+0x46>
 8000be2:	bf00      	nop
 8000be4:	40012c00 	.word	0x40012c00
 8000be8:	40021000 	.word	0x40021000
 8000bec:	40010800 	.word	0x40010800
 8000bf0:	40000400 	.word	0x40000400
 8000bf4:	40010c00 	.word	0x40010c00
 8000bf8:	40010000 	.word	0x40010000

08000bfc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <NMI_Handler>

08000bfe <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler>

08000c00 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <MemManage_Handler>

08000c02 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c02:	e7fe      	b.n	8000c02 <BusFault_Handler>

08000c04 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler>

08000c06 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:
 8000c08:	4770      	bx	lr

08000c0a <PendSV_Handler>:
 8000c0a:	4770      	bx	lr

08000c0c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 b85e 	b.w	8000ccc <HAL_IncTick>

08000c10 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	4770      	bx	lr

08000c12 <wrapper_cpp>:
#include<main.h>

void wrapper_cpp(void){
	//メイン関数
}
 8000c12:	4770      	bx	lr

08000c14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c3a:	f7ff ffe9 	bl	8000c10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3e:	f001 fa99 	bl	8002174 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c42:	f7ff fd65 	bl	8000710 <main>
  bx lr
 8000c46:	4770      	bx	lr
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000c50:	08002648 	.word	0x08002648
  ldr r2, =_sbss
 8000c54:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000c58:	20000424 	.word	0x20000424

08000c5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC1_2_IRQHandler>
	...

08000c60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c60:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c62:	4b0e      	ldr	r3, [pc, #56]	; (8000c9c <HAL_InitTick+0x3c>)
{
 8000c64:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c66:	7818      	ldrb	r0, [r3, #0]
 8000c68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c70:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <HAL_InitTick+0x40>)
 8000c72:	6810      	ldr	r0, [r2, #0]
 8000c74:	fbb0 f0f3 	udiv	r0, r0, r3
 8000c78:	f000 f95c 	bl	8000f34 <HAL_SYSTICK_Config>
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	b958      	cbnz	r0, 8000c98 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c80:	2d0f      	cmp	r5, #15
 8000c82:	d809      	bhi.n	8000c98 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c84:	4602      	mov	r2, r0
 8000c86:	4629      	mov	r1, r5
 8000c88:	f04f 30ff 	mov.w	r0, #4294967295
 8000c8c:	f000 f920 	bl	8000ed0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c90:	4620      	mov	r0, r4
 8000c92:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <HAL_InitTick+0x44>)
 8000c94:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000c96:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000c98:	2001      	movs	r0, #1
 8000c9a:	e7fc      	b.n	8000c96 <HAL_InitTick+0x36>
 8000c9c:	20000004 	.word	0x20000004
 8000ca0:	20000000 	.word	0x20000000
 8000ca4:	20000008 	.word	0x20000008

08000ca8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4a07      	ldr	r2, [pc, #28]	; (8000cc8 <HAL_Init+0x20>)
{
 8000caa:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cac:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cae:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb0:	f043 0310 	orr.w	r3, r3, #16
 8000cb4:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb6:	f000 f8f9 	bl	8000eac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	200f      	movs	r0, #15
 8000cbc:	f7ff ffd0 	bl	8000c60 <HAL_InitTick>
  HAL_MspInit();
 8000cc0:	f7ff fe9c 	bl	80009fc <HAL_MspInit>
}
 8000cc4:	2000      	movs	r0, #0
 8000cc6:	bd08      	pop	{r3, pc}
 8000cc8:	40022000 	.word	0x40022000

08000ccc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000ccc:	4a03      	ldr	r2, [pc, #12]	; (8000cdc <HAL_IncTick+0x10>)
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <HAL_IncTick+0x14>)
 8000cd0:	6811      	ldr	r1, [r2, #0]
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	440b      	add	r3, r1
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000418 	.word	0x20000418
 8000ce0:	20000004 	.word	0x20000004

08000ce4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000ce4:	4b01      	ldr	r3, [pc, #4]	; (8000cec <HAL_GetTick+0x8>)
 8000ce6:	6818      	ldr	r0, [r3, #0]
}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000418 	.word	0x20000418

08000cf0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cf0:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cf2:	4604      	mov	r4, r0
 8000cf4:	2800      	cmp	r0, #0
 8000cf6:	d06e      	beq.n	8000dd6 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cf8:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000cfc:	b90b      	cbnz	r3, 8000d02 <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cfe:	f7ff fe9f 	bl	8000a40 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d02:	6822      	ldr	r2, [r4, #0]
 8000d04:	6813      	ldr	r3, [r2, #0]
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d0c:	f7ff ffea 	bl	8000ce4 <HAL_GetTick>
 8000d10:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	07d1      	lsls	r1, r2, #31
 8000d18:	d551      	bpl.n	8000dbe <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	f022 0202 	bic.w	r2, r2, #2
 8000d20:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d22:	f7ff ffdf 	bl	8000ce4 <HAL_GetTick>
 8000d26:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d28:	6823      	ldr	r3, [r4, #0]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	0792      	lsls	r2, r2, #30
 8000d2e:	d454      	bmi.n	8000dda <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d30:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000d32:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d34:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	bf0c      	ite	eq
 8000d3a:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d3e:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8000d42:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d44:	7e62      	ldrb	r2, [r4, #25]
 8000d46:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	bf0c      	ite	eq
 8000d4c:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d50:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8000d54:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d56:	7ea2      	ldrb	r2, [r4, #26]
 8000d58:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	bf0c      	ite	eq
 8000d5e:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d62:	f022 0220 	bicne.w	r2, r2, #32
 8000d66:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d68:	7ee2      	ldrb	r2, [r4, #27]
 8000d6a:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	bf0c      	ite	eq
 8000d70:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d74:	f042 0210 	orrne.w	r2, r2, #16
 8000d78:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d7a:	7f22      	ldrb	r2, [r4, #28]
 8000d7c:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	bf0c      	ite	eq
 8000d82:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d86:	f022 0208 	bicne.w	r2, r2, #8
 8000d8a:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d8c:	7f62      	ldrb	r2, [r4, #29]
 8000d8e:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	bf0c      	ite	eq
 8000d94:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d98:	f022 0204 	bicne.w	r2, r2, #4
 8000d9c:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000d9e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8000da2:	430a      	orrs	r2, r1
 8000da4:	6921      	ldr	r1, [r4, #16]
 8000da6:	430a      	orrs	r2, r1
 8000da8:	6961      	ldr	r1, [r4, #20]
 8000daa:	430a      	orrs	r2, r1
 8000dac:	6861      	ldr	r1, [r4, #4]
 8000dae:	3901      	subs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000db4:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000db6:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8000db8:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8000dbc:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dbe:	f7ff ff91 	bl	8000ce4 <HAL_GetTick>
 8000dc2:	1b40      	subs	r0, r0, r5
 8000dc4:	280a      	cmp	r0, #10
 8000dc6:	d9a4      	bls.n	8000d12 <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000dc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dce:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	e7f0      	b.n	8000dbc <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000dda:	f7ff ff83 	bl	8000ce4 <HAL_GetTick>
 8000dde:	1b40      	subs	r0, r0, r5
 8000de0:	280a      	cmp	r0, #10
 8000de2:	d9a1      	bls.n	8000d28 <HAL_CAN_Init+0x38>
 8000de4:	e7f0      	b.n	8000dc8 <HAL_CAN_Init+0xd8>

08000de6 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000de6:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000de8:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000dec:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8000dee:	3d01      	subs	r5, #1
 8000df0:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8000df2:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8000df4:	d841      	bhi.n	8000e7a <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000df6:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8000dfa:	d03a      	beq.n	8000e72 <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8000dfc:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8000e00:	2c03      	cmp	r4, #3
 8000e02:	f04f 0501 	mov.w	r5, #1
 8000e06:	d105      	bne.n	8000e14 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8000e08:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e0e:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8000e10:	2001      	movs	r0, #1
 8000e12:	e028      	b.n	8000e66 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8000e14:	40a5      	lsls	r5, r4
 8000e16:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8000e18:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8000e1c:	f104 0318 	add.w	r3, r4, #24
 8000e20:	bb10      	cbnz	r0, 8000e68 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8000e22:	6808      	ldr	r0, [r1, #0]
 8000e24:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e28:	011b      	lsls	r3, r3, #4
 8000e2a:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e2c:	0120      	lsls	r0, r4, #4
 8000e2e:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e32:	4406      	add	r6, r0
      return HAL_OK;
 8000e34:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8000e36:	690d      	ldr	r5, [r1, #16]
 8000e38:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8000e3c:	7d09      	ldrb	r1, [r1, #20]
 8000e3e:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8000e40:	bf02      	ittt	eq
 8000e42:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8000e46:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8000e4a:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8000e4e:	6851      	ldr	r1, [r2, #4]
 8000e50:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8000e54:	6812      	ldr	r2, [r2, #0]
 8000e56:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000e5a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8000e5e:	f042 0201 	orr.w	r2, r2, #1
 8000e62:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8000e68:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8000e6a:	4338      	orrs	r0, r7
 8000e6c:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8000e70:	e7da      	b.n	8000e28 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8000e72:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e78:	e7c9      	b.n	8000e0e <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000e7a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e80:	e7c5      	b.n	8000e0e <HAL_CAN_AddTxMessage+0x28>

08000e82 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e82:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e86:	3b01      	subs	r3, #1
 8000e88:	2b01      	cmp	r3, #1
 8000e8a:	d80c      	bhi.n	8000ea6 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e8c:	6803      	ldr	r3, [r0, #0]
 8000e8e:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e90:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e92:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8000e94:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8000e96:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8000e9a:	bf48      	it	mi
 8000e9c:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8000e9e:	00db      	lsls	r3, r3, #3
 8000ea0:	d502      	bpl.n	8000ea8 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 8000ea2:	3001      	adds	r0, #1
 8000ea4:	4770      	bx	lr
  uint32_t freelevel = 0U;
 8000ea6:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eae:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eb2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000eba:	0412      	lsls	r2, r2, #16
 8000ebc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ebe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000ec8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed0:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b530      	push	{r4, r5, lr}
 8000ed4:	68dc      	ldr	r4, [r3, #12]
 8000ed6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eda:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	bf28      	it	cs
 8000ee4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eec:	bf98      	it	ls
 8000eee:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ef4:	bf88      	it	hi
 8000ef6:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	ea21 0303 	bic.w	r3, r1, r3
 8000efc:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000efe:	fa05 f404 	lsl.w	r4, r5, r4
 8000f02:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000f06:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f08:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0c:	bfac      	ite	ge
 8000f0e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	4a07      	ldrlt	r2, [pc, #28]	; (8000f30 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f14:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	bfab      	itete	ge
 8000f1c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f28:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f2a:	bd30      	pop	{r4, r5, pc}
 8000f2c:	e000ed00 	.word	0xe000ed00
 8000f30:	e000ed14 	.word	0xe000ed14

08000f34 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	3801      	subs	r0, #1
 8000f36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000f3a:	d20b      	bcs.n	8000f54 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	21f0      	movs	r1, #240	; 0xf0
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f44:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f4c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f50:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f52:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f54:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f60:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000f62:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f64:	4f61      	ldr	r7, [pc, #388]	; (80010ec <HAL_GPIO_Init+0x190>)
 8000f66:	4b62      	ldr	r3, [pc, #392]	; (80010f0 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8000f68:	f8df c188 	ldr.w	ip, [pc, #392]	; 80010f4 <HAL_GPIO_Init+0x198>
 8000f6c:	f8df e188 	ldr.w	lr, [pc, #392]	; 80010f8 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f70:	680d      	ldr	r5, [r1, #0]
 8000f72:	fa35 f406 	lsrs.w	r4, r5, r6
 8000f76:	d102      	bne.n	8000f7e <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8000f78:	b003      	add	sp, #12
 8000f7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000f7e:	f04f 0801 	mov.w	r8, #1
 8000f82:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000f8a:	ea38 0505 	bics.w	r5, r8, r5
 8000f8e:	d177      	bne.n	8001080 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8000f90:	684d      	ldr	r5, [r1, #4]
 8000f92:	2d03      	cmp	r5, #3
 8000f94:	d807      	bhi.n	8000fa6 <HAL_GPIO_Init+0x4a>
 8000f96:	3d01      	subs	r5, #1
 8000f98:	2d02      	cmp	r5, #2
 8000f9a:	f200 8082 	bhi.w	80010a2 <HAL_GPIO_Init+0x146>
 8000f9e:	e8df f005 	tbb	[pc, r5]
 8000fa2:	9792      	.short	0x9792
 8000fa4:	9d          	.byte	0x9d
 8000fa5:	00          	.byte	0x00
 8000fa6:	2d12      	cmp	r5, #18
 8000fa8:	f000 8095 	beq.w	80010d6 <HAL_GPIO_Init+0x17a>
 8000fac:	d86a      	bhi.n	8001084 <HAL_GPIO_Init+0x128>
 8000fae:	2d11      	cmp	r5, #17
 8000fb0:	f000 808b 	beq.w	80010ca <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb4:	2cff      	cmp	r4, #255	; 0xff
 8000fb6:	bf98      	it	ls
 8000fb8:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fba:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fbe:	bf88      	it	hi
 8000fc0:	f100 0a04 	addhi.w	sl, r0, #4
 8000fc4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc8:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fcc:	bf88      	it	hi
 8000fce:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd0:	fa09 fb05 	lsl.w	fp, r9, r5
 8000fd4:	ea28 080b 	bic.w	r8, r8, fp
 8000fd8:	fa02 f505 	lsl.w	r5, r2, r5
 8000fdc:	ea48 0505 	orr.w	r5, r8, r5
 8000fe0:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000fe8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000fec:	d048      	beq.n	8001080 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	69bd      	ldr	r5, [r7, #24]
 8000ff0:	f026 0803 	bic.w	r8, r6, #3
 8000ff4:	f045 0501 	orr.w	r5, r5, #1
 8000ff8:	61bd      	str	r5, [r7, #24]
 8000ffa:	69bd      	ldr	r5, [r7, #24]
 8000ffc:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001000:	f005 0501 	and.w	r5, r5, #1
 8001004:	9501      	str	r5, [sp, #4]
 8001006:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800100a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800100e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001010:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001014:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001018:	fa09 f90b 	lsl.w	r9, r9, fp
 800101c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001020:	4d36      	ldr	r5, [pc, #216]	; (80010fc <HAL_GPIO_Init+0x1a0>)
 8001022:	42a8      	cmp	r0, r5
 8001024:	d05e      	beq.n	80010e4 <HAL_GPIO_Init+0x188>
 8001026:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800102a:	42a8      	cmp	r0, r5
 800102c:	d05c      	beq.n	80010e8 <HAL_GPIO_Init+0x18c>
 800102e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001032:	42a8      	cmp	r0, r5
 8001034:	bf0c      	ite	eq
 8001036:	2502      	moveq	r5, #2
 8001038:	2503      	movne	r5, #3
 800103a:	fa05 f50b 	lsl.w	r5, r5, fp
 800103e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001042:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001046:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001048:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800104c:	bf14      	ite	ne
 800104e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001050:	43a5      	biceq	r5, r4
 8001052:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001054:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001056:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800105a:	bf14      	ite	ne
 800105c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800105e:	43a5      	biceq	r5, r4
 8001060:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001062:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001064:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001068:	bf14      	ite	ne
 800106a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800106c:	43a5      	biceq	r5, r4
 800106e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001070:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001072:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001076:	bf14      	ite	ne
 8001078:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800107a:	ea25 0404 	biceq.w	r4, r5, r4
 800107e:	60dc      	str	r4, [r3, #12]
	position++;
 8001080:	3601      	adds	r6, #1
 8001082:	e775      	b.n	8000f70 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8001084:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8001100 <HAL_GPIO_Init+0x1a4>
 8001088:	454d      	cmp	r5, r9
 800108a:	d00a      	beq.n	80010a2 <HAL_GPIO_Init+0x146>
 800108c:	d815      	bhi.n	80010ba <HAL_GPIO_Init+0x15e>
 800108e:	4575      	cmp	r5, lr
 8001090:	d007      	beq.n	80010a2 <HAL_GPIO_Init+0x146>
 8001092:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8001096:	454d      	cmp	r5, r9
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x146>
 800109a:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800109e:	454d      	cmp	r5, r9
 80010a0:	d188      	bne.n	8000fb4 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010a2:	688a      	ldr	r2, [r1, #8]
 80010a4:	b1e2      	cbz	r2, 80010e0 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010a8:	bf08      	it	eq
 80010aa:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010ae:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80010b2:	bf18      	it	ne
 80010b4:	f8c0 8014 	strne.w	r8, [r0, #20]
 80010b8:	e77c      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80010ba:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8001104 <HAL_GPIO_Init+0x1a8>
 80010be:	454d      	cmp	r5, r9
 80010c0:	d0ef      	beq.n	80010a2 <HAL_GPIO_Init+0x146>
 80010c2:	4565      	cmp	r5, ip
 80010c4:	e7ec      	b.n	80010a0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010c6:	68ca      	ldr	r2, [r1, #12]
          break;
 80010c8:	e774      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010ca:	68ca      	ldr	r2, [r1, #12]
 80010cc:	3204      	adds	r2, #4
          break;
 80010ce:	e771      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010d0:	68ca      	ldr	r2, [r1, #12]
 80010d2:	3208      	adds	r2, #8
          break;
 80010d4:	e76e      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010d6:	68ca      	ldr	r2, [r1, #12]
 80010d8:	320c      	adds	r2, #12
          break;
 80010da:	e76b      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 80010dc:	2200      	movs	r2, #0
 80010de:	e769      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010e0:	2204      	movs	r2, #4
 80010e2:	e767      	b.n	8000fb4 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010e4:	2500      	movs	r5, #0
 80010e6:	e7a8      	b.n	800103a <HAL_GPIO_Init+0xde>
 80010e8:	2501      	movs	r5, #1
 80010ea:	e7a6      	b.n	800103a <HAL_GPIO_Init+0xde>
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40010400 	.word	0x40010400
 80010f4:	10320000 	.word	0x10320000
 80010f8:	10120000 	.word	0x10120000
 80010fc:	40010800 	.word	0x40010800
 8001100:	10220000 	.word	0x10220000
 8001104:	10310000 	.word	0x10310000

08001108 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001108:	b10a      	cbz	r2, 800110e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110a:	6101      	str	r1, [r0, #16]
  }
}
 800110c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800110e:	0409      	lsls	r1, r1, #16
 8001110:	e7fb      	b.n	800110a <HAL_GPIO_WritePin+0x2>
	...

08001114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001118:	4605      	mov	r5, r0
 800111a:	b338      	cbz	r0, 800116c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800111c:	6803      	ldr	r3, [r0, #0]
 800111e:	07db      	lsls	r3, r3, #31
 8001120:	d410      	bmi.n	8001144 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	682b      	ldr	r3, [r5, #0]
 8001124:	079f      	lsls	r7, r3, #30
 8001126:	d45e      	bmi.n	80011e6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	0719      	lsls	r1, r3, #28
 800112c:	f100 8095 	bmi.w	800125a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001130:	682b      	ldr	r3, [r5, #0]
 8001132:	075a      	lsls	r2, r3, #29
 8001134:	f100 80c1 	bmi.w	80012ba <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001138:	69e8      	ldr	r0, [r5, #28]
 800113a:	2800      	cmp	r0, #0
 800113c:	f040 812c 	bne.w	8001398 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001140:	2000      	movs	r0, #0
 8001142:	e029      	b.n	8001198 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001144:	4c90      	ldr	r4, [pc, #576]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 8001146:	6863      	ldr	r3, [r4, #4]
 8001148:	f003 030c 	and.w	r3, r3, #12
 800114c:	2b04      	cmp	r3, #4
 800114e:	d007      	beq.n	8001160 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001150:	6863      	ldr	r3, [r4, #4]
 8001152:	f003 030c 	and.w	r3, r3, #12
 8001156:	2b08      	cmp	r3, #8
 8001158:	d10a      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
 800115a:	6863      	ldr	r3, [r4, #4]
 800115c:	03de      	lsls	r6, r3, #15
 800115e:	d507      	bpl.n	8001170 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	039c      	lsls	r4, r3, #14
 8001164:	d5dd      	bpl.n	8001122 <HAL_RCC_OscConfig+0xe>
 8001166:	686b      	ldr	r3, [r5, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1da      	bne.n	8001122 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800116c:	2001      	movs	r0, #1
 800116e:	e013      	b.n	8001198 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	686b      	ldr	r3, [r5, #4]
 8001172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001176:	d112      	bne.n	800119e <HAL_RCC_OscConfig+0x8a>
 8001178:	6823      	ldr	r3, [r4, #0]
 800117a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001180:	f7ff fdb0 	bl	8000ce4 <HAL_GetTick>
 8001184:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001186:	6823      	ldr	r3, [r4, #0]
 8001188:	0398      	lsls	r0, r3, #14
 800118a:	d4ca      	bmi.n	8001122 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800118c:	f7ff fdaa 	bl	8000ce4 <HAL_GetTick>
 8001190:	1b80      	subs	r0, r0, r6
 8001192:	2864      	cmp	r0, #100	; 0x64
 8001194:	d9f7      	bls.n	8001186 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001196:	2003      	movs	r0, #3
}
 8001198:	b002      	add	sp, #8
 800119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800119e:	b99b      	cbnz	r3, 80011c8 <HAL_RCC_OscConfig+0xb4>
 80011a0:	6823      	ldr	r3, [r4, #0]
 80011a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011a6:	6023      	str	r3, [r4, #0]
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011ae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80011b0:	f7ff fd98 	bl	8000ce4 <HAL_GetTick>
 80011b4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011b6:	6823      	ldr	r3, [r4, #0]
 80011b8:	0399      	lsls	r1, r3, #14
 80011ba:	d5b2      	bpl.n	8001122 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fd92 	bl	8000ce4 <HAL_GetTick>
 80011c0:	1b80      	subs	r0, r0, r6
 80011c2:	2864      	cmp	r0, #100	; 0x64
 80011c4:	d9f7      	bls.n	80011b6 <HAL_RCC_OscConfig+0xa2>
 80011c6:	e7e6      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	d103      	bne.n	80011d8 <HAL_RCC_OscConfig+0xc4>
 80011d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d4:	6023      	str	r3, [r4, #0]
 80011d6:	e7cf      	b.n	8001178 <HAL_RCC_OscConfig+0x64>
 80011d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011dc:	6023      	str	r3, [r4, #0]
 80011de:	6823      	ldr	r3, [r4, #0]
 80011e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e4:	e7cb      	b.n	800117e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011e6:	4c68      	ldr	r4, [pc, #416]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	f013 0f0c 	tst.w	r3, #12
 80011ee:	d007      	beq.n	8001200 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d110      	bne.n	800121c <HAL_RCC_OscConfig+0x108>
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	03da      	lsls	r2, r3, #15
 80011fe:	d40d      	bmi.n	800121c <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001200:	6823      	ldr	r3, [r4, #0]
 8001202:	079b      	lsls	r3, r3, #30
 8001204:	d502      	bpl.n	800120c <HAL_RCC_OscConfig+0xf8>
 8001206:	692b      	ldr	r3, [r5, #16]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d1af      	bne.n	800116c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	6823      	ldr	r3, [r4, #0]
 800120e:	696a      	ldr	r2, [r5, #20]
 8001210:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001214:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001218:	6023      	str	r3, [r4, #0]
 800121a:	e785      	b.n	8001128 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800121c:	692a      	ldr	r2, [r5, #16]
 800121e:	4b5b      	ldr	r3, [pc, #364]	; (800138c <HAL_RCC_OscConfig+0x278>)
 8001220:	b16a      	cbz	r2, 800123e <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001226:	f7ff fd5d 	bl	8000ce4 <HAL_GetTick>
 800122a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	6823      	ldr	r3, [r4, #0]
 800122e:	079f      	lsls	r7, r3, #30
 8001230:	d4ec      	bmi.n	800120c <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fd57 	bl	8000ce4 <HAL_GetTick>
 8001236:	1b80      	subs	r0, r0, r6
 8001238:	2802      	cmp	r0, #2
 800123a:	d9f7      	bls.n	800122c <HAL_RCC_OscConfig+0x118>
 800123c:	e7ab      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800123e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001240:	f7ff fd50 	bl	8000ce4 <HAL_GetTick>
 8001244:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001246:	6823      	ldr	r3, [r4, #0]
 8001248:	0798      	lsls	r0, r3, #30
 800124a:	f57f af6d 	bpl.w	8001128 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800124e:	f7ff fd49 	bl	8000ce4 <HAL_GetTick>
 8001252:	1b80      	subs	r0, r0, r6
 8001254:	2802      	cmp	r0, #2
 8001256:	d9f6      	bls.n	8001246 <HAL_RCC_OscConfig+0x132>
 8001258:	e79d      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	69aa      	ldr	r2, [r5, #24]
 800125c:	4e4a      	ldr	r6, [pc, #296]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 800125e:	4b4b      	ldr	r3, [pc, #300]	; (800138c <HAL_RCC_OscConfig+0x278>)
 8001260:	b1e2      	cbz	r2, 800129c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001262:	2201      	movs	r2, #1
 8001264:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8001268:	f7ff fd3c 	bl	8000ce4 <HAL_GetTick>
 800126c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001270:	079b      	lsls	r3, r3, #30
 8001272:	d50d      	bpl.n	8001290 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001274:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001278:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_RCC_OscConfig+0x27c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001280:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001282:	bf00      	nop
  }
  while (Delay --);
 8001284:	9b01      	ldr	r3, [sp, #4]
 8001286:	1e5a      	subs	r2, r3, #1
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1f9      	bne.n	8001282 <HAL_RCC_OscConfig+0x16e>
 800128e:	e74f      	b.n	8001130 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001290:	f7ff fd28 	bl	8000ce4 <HAL_GetTick>
 8001294:	1b00      	subs	r0, r0, r4
 8001296:	2802      	cmp	r0, #2
 8001298:	d9e9      	bls.n	800126e <HAL_RCC_OscConfig+0x15a>
 800129a:	e77c      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800129c:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80012a0:	f7ff fd20 	bl	8000ce4 <HAL_GetTick>
 80012a4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80012a8:	079f      	lsls	r7, r3, #30
 80012aa:	f57f af41 	bpl.w	8001130 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012ae:	f7ff fd19 	bl	8000ce4 <HAL_GetTick>
 80012b2:	1b00      	subs	r0, r0, r4
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d9f6      	bls.n	80012a6 <HAL_RCC_OscConfig+0x192>
 80012b8:	e76d      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4c33      	ldr	r4, [pc, #204]	; (8001388 <HAL_RCC_OscConfig+0x274>)
 80012bc:	69e3      	ldr	r3, [r4, #28]
 80012be:	00d8      	lsls	r0, r3, #3
 80012c0:	d424      	bmi.n	800130c <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80012c2:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c4:	69e3      	ldr	r3, [r4, #28]
 80012c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ca:	61e3      	str	r3, [r4, #28]
 80012cc:	69e3      	ldr	r3, [r4, #28]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d6:	4e2f      	ldr	r6, [pc, #188]	; (8001394 <HAL_RCC_OscConfig+0x280>)
 80012d8:	6833      	ldr	r3, [r6, #0]
 80012da:	05d9      	lsls	r1, r3, #23
 80012dc:	d518      	bpl.n	8001310 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012de:	68eb      	ldr	r3, [r5, #12]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d126      	bne.n	8001332 <HAL_RCC_OscConfig+0x21e>
 80012e4:	6a23      	ldr	r3, [r4, #32]
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012ec:	f7ff fcfa 	bl	8000ce4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012f0:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012f4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012f6:	6a23      	ldr	r3, [r4, #32]
 80012f8:	079b      	lsls	r3, r3, #30
 80012fa:	d53f      	bpl.n	800137c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80012fc:	2f00      	cmp	r7, #0
 80012fe:	f43f af1b 	beq.w	8001138 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001302:	69e3      	ldr	r3, [r4, #28]
 8001304:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001308:	61e3      	str	r3, [r4, #28]
 800130a:	e715      	b.n	8001138 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 800130c:	2700      	movs	r7, #0
 800130e:	e7e2      	b.n	80012d6 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001310:	6833      	ldr	r3, [r6, #0]
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001318:	f7ff fce4 	bl	8000ce4 <HAL_GetTick>
 800131c:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	6833      	ldr	r3, [r6, #0]
 8001320:	05da      	lsls	r2, r3, #23
 8001322:	d4dc      	bmi.n	80012de <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001324:	f7ff fcde 	bl	8000ce4 <HAL_GetTick>
 8001328:	eba0 0008 	sub.w	r0, r0, r8
 800132c:	2864      	cmp	r0, #100	; 0x64
 800132e:	d9f6      	bls.n	800131e <HAL_RCC_OscConfig+0x20a>
 8001330:	e731      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001332:	b9ab      	cbnz	r3, 8001360 <HAL_RCC_OscConfig+0x24c>
 8001334:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001336:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133a:	f023 0301 	bic.w	r3, r3, #1
 800133e:	6223      	str	r3, [r4, #32]
 8001340:	6a23      	ldr	r3, [r4, #32]
 8001342:	f023 0304 	bic.w	r3, r3, #4
 8001346:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001348:	f7ff fccc 	bl	8000ce4 <HAL_GetTick>
 800134c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134e:	6a23      	ldr	r3, [r4, #32]
 8001350:	0798      	lsls	r0, r3, #30
 8001352:	d5d3      	bpl.n	80012fc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001354:	f7ff fcc6 	bl	8000ce4 <HAL_GetTick>
 8001358:	1b80      	subs	r0, r0, r6
 800135a:	4540      	cmp	r0, r8
 800135c:	d9f7      	bls.n	800134e <HAL_RCC_OscConfig+0x23a>
 800135e:	e71a      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001360:	2b05      	cmp	r3, #5
 8001362:	6a23      	ldr	r3, [r4, #32]
 8001364:	d103      	bne.n	800136e <HAL_RCC_OscConfig+0x25a>
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	6223      	str	r3, [r4, #32]
 800136c:	e7ba      	b.n	80012e4 <HAL_RCC_OscConfig+0x1d0>
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	6223      	str	r3, [r4, #32]
 8001374:	6a23      	ldr	r3, [r4, #32]
 8001376:	f023 0304 	bic.w	r3, r3, #4
 800137a:	e7b6      	b.n	80012ea <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800137c:	f7ff fcb2 	bl	8000ce4 <HAL_GetTick>
 8001380:	1b80      	subs	r0, r0, r6
 8001382:	4540      	cmp	r0, r8
 8001384:	d9b7      	bls.n	80012f6 <HAL_RCC_OscConfig+0x1e2>
 8001386:	e706      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
 8001388:	40021000 	.word	0x40021000
 800138c:	42420000 	.word	0x42420000
 8001390:	20000000 	.word	0x20000000
 8001394:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001398:	4c2a      	ldr	r4, [pc, #168]	; (8001444 <HAL_RCC_OscConfig+0x330>)
 800139a:	6863      	ldr	r3, [r4, #4]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	2b08      	cmp	r3, #8
 80013a2:	d03e      	beq.n	8001422 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013a4:	2200      	movs	r2, #0
 80013a6:	4b28      	ldr	r3, [pc, #160]	; (8001448 <HAL_RCC_OscConfig+0x334>)
 80013a8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80013aa:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013ac:	d12c      	bne.n	8001408 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80013ae:	f7ff fc99 	bl	8000ce4 <HAL_GetTick>
 80013b2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013b4:	6823      	ldr	r3, [r4, #0]
 80013b6:	0199      	lsls	r1, r3, #6
 80013b8:	d420      	bmi.n	80013fc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80013ba:	6a2b      	ldr	r3, [r5, #32]
 80013bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013c0:	d105      	bne.n	80013ce <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013c2:	6862      	ldr	r2, [r4, #4]
 80013c4:	68a9      	ldr	r1, [r5, #8]
 80013c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013ca:	430a      	orrs	r2, r1
 80013cc:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80013d0:	6862      	ldr	r2, [r4, #4]
 80013d2:	430b      	orrs	r3, r1
 80013d4:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80013d8:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80013da:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013dc:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80013de:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_RCC_OscConfig+0x334>)
 80013e0:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80013e2:	f7ff fc7f 	bl	8000ce4 <HAL_GetTick>
 80013e6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	019a      	lsls	r2, r3, #6
 80013ec:	f53f aea8 	bmi.w	8001140 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013f0:	f7ff fc78 	bl	8000ce4 <HAL_GetTick>
 80013f4:	1b40      	subs	r0, r0, r5
 80013f6:	2802      	cmp	r0, #2
 80013f8:	d9f6      	bls.n	80013e8 <HAL_RCC_OscConfig+0x2d4>
 80013fa:	e6cc      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fc:	f7ff fc72 	bl	8000ce4 <HAL_GetTick>
 8001400:	1b80      	subs	r0, r0, r6
 8001402:	2802      	cmp	r0, #2
 8001404:	d9d6      	bls.n	80013b4 <HAL_RCC_OscConfig+0x2a0>
 8001406:	e6c6      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001408:	f7ff fc6c 	bl	8000ce4 <HAL_GetTick>
 800140c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800140e:	6823      	ldr	r3, [r4, #0]
 8001410:	019b      	lsls	r3, r3, #6
 8001412:	f57f ae95 	bpl.w	8001140 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001416:	f7ff fc65 	bl	8000ce4 <HAL_GetTick>
 800141a:	1b40      	subs	r0, r0, r5
 800141c:	2802      	cmp	r0, #2
 800141e:	d9f6      	bls.n	800140e <HAL_RCC_OscConfig+0x2fa>
 8001420:	e6b9      	b.n	8001196 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001422:	2801      	cmp	r0, #1
 8001424:	f43f aeb8 	beq.w	8001198 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8001428:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142a:	6a2a      	ldr	r2, [r5, #32]
 800142c:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001430:	4291      	cmp	r1, r2
 8001432:	f47f ae9b 	bne.w	800116c <HAL_RCC_OscConfig+0x58>
 8001436:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001438:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800143c:	4293      	cmp	r3, r2
 800143e:	f43f ae7f 	beq.w	8001140 <HAL_RCC_OscConfig+0x2c>
 8001442:	e693      	b.n	800116c <HAL_RCC_OscConfig+0x58>
 8001444:	40021000 	.word	0x40021000
 8001448:	42420000 	.word	0x42420000

0800144c <HAL_RCC_GetSysClockFreq>:
{
 800144c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001450:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001452:	ac02      	add	r4, sp, #8
 8001454:	f103 0510 	add.w	r5, r3, #16
 8001458:	4622      	mov	r2, r4
 800145a:	6818      	ldr	r0, [r3, #0]
 800145c:	6859      	ldr	r1, [r3, #4]
 800145e:	3308      	adds	r3, #8
 8001460:	c203      	stmia	r2!, {r0, r1}
 8001462:	42ab      	cmp	r3, r5
 8001464:	4614      	mov	r4, r2
 8001466:	d1f7      	bne.n	8001458 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001468:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800146c:	4911      	ldr	r1, [pc, #68]	; (80014b4 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800146e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001472:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001474:	f003 020c 	and.w	r2, r3, #12
 8001478:	2a08      	cmp	r2, #8
 800147a:	d117      	bne.n	80014ac <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800147c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001480:	3218      	adds	r2, #24
 8001482:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001484:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001486:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800148a:	d50c      	bpl.n	80014a6 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800148c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800148e:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001490:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001494:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001496:	3318      	adds	r3, #24
 8001498:	446b      	add	r3, sp
 800149a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800149e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 80014a2:	b007      	add	sp, #28
 80014a4:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <HAL_RCC_GetSysClockFreq+0x70>)
 80014a8:	4358      	muls	r0, r3
 80014aa:	e7fa      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 80014ac:	4802      	ldr	r0, [pc, #8]	; (80014b8 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 80014ae:	e7f8      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x56>
 80014b0:	080024f4 	.word	0x080024f4
 80014b4:	40021000 	.word	0x40021000
 80014b8:	007a1200 	.word	0x007a1200
 80014bc:	003d0900 	.word	0x003d0900

080014c0 <HAL_RCC_ClockConfig>:
{
 80014c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80014c6:	4604      	mov	r4, r0
 80014c8:	b910      	cbnz	r0, 80014d0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014ca:	2001      	movs	r0, #1
}
 80014cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80014d0:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <HAL_RCC_ClockConfig+0x124>)
 80014d2:	6813      	ldr	r3, [r2, #0]
 80014d4:	f003 0307 	and.w	r3, r3, #7
 80014d8:	428b      	cmp	r3, r1
 80014da:	d328      	bcc.n	800152e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014dc:	6821      	ldr	r1, [r4, #0]
 80014de:	078e      	lsls	r6, r1, #30
 80014e0:	d430      	bmi.n	8001544 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014e2:	07ca      	lsls	r2, r1, #31
 80014e4:	d443      	bmi.n	800156e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014e6:	4a3f      	ldr	r2, [pc, #252]	; (80015e4 <HAL_RCC_ClockConfig+0x124>)
 80014e8:	6813      	ldr	r3, [r2, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	42ab      	cmp	r3, r5
 80014f0:	d865      	bhi.n	80015be <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f2:	6822      	ldr	r2, [r4, #0]
 80014f4:	4d3c      	ldr	r5, [pc, #240]	; (80015e8 <HAL_RCC_ClockConfig+0x128>)
 80014f6:	f012 0f04 	tst.w	r2, #4
 80014fa:	d16c      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014fc:	0713      	lsls	r3, r2, #28
 80014fe:	d506      	bpl.n	800150e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001500:	686b      	ldr	r3, [r5, #4]
 8001502:	6922      	ldr	r2, [r4, #16]
 8001504:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001508:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800150c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f7ff ff9d 	bl	800144c <HAL_RCC_GetSysClockFreq>
 8001512:	686b      	ldr	r3, [r5, #4]
 8001514:	4a35      	ldr	r2, [pc, #212]	; (80015ec <HAL_RCC_ClockConfig+0x12c>)
 8001516:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	40d8      	lsrs	r0, r3
 800151e:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_ClockConfig+0x130>)
 8001520:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001522:	4b34      	ldr	r3, [pc, #208]	; (80015f4 <HAL_RCC_ClockConfig+0x134>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f7ff fb9b 	bl	8000c60 <HAL_InitTick>
  return HAL_OK;
 800152a:	2000      	movs	r0, #0
 800152c:	e7ce      	b.n	80014cc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800152e:	6813      	ldr	r3, [r2, #0]
 8001530:	f023 0307 	bic.w	r3, r3, #7
 8001534:	430b      	orrs	r3, r1
 8001536:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001538:	6813      	ldr	r3, [r2, #0]
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	428b      	cmp	r3, r1
 8001540:	d1c3      	bne.n	80014ca <HAL_RCC_ClockConfig+0xa>
 8001542:	e7cb      	b.n	80014dc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001544:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_RCC_ClockConfig+0x128>)
 8001546:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800154a:	bf1e      	ittt	ne
 800154c:	685a      	ldrne	r2, [r3, #4]
 800154e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001552:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001554:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001556:	bf42      	ittt	mi
 8001558:	685a      	ldrmi	r2, [r3, #4]
 800155a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800155e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	68a0      	ldr	r0, [r4, #8]
 8001564:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001568:	4302      	orrs	r2, r0
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e7b9      	b.n	80014e2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156e:	6862      	ldr	r2, [r4, #4]
 8001570:	4e1d      	ldr	r6, [pc, #116]	; (80015e8 <HAL_RCC_ClockConfig+0x128>)
 8001572:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001574:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	d11a      	bne.n	80015ae <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001578:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	d0a5      	beq.n	80014ca <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800157e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001580:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	4313      	orrs	r3, r2
 800158a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800158c:	f7ff fbaa 	bl	8000ce4 <HAL_GetTick>
 8001590:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001592:	6873      	ldr	r3, [r6, #4]
 8001594:	6862      	ldr	r2, [r4, #4]
 8001596:	f003 030c 	and.w	r3, r3, #12
 800159a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800159e:	d0a2      	beq.n	80014e6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015a0:	f7ff fba0 	bl	8000ce4 <HAL_GetTick>
 80015a4:	1bc0      	subs	r0, r0, r7
 80015a6:	4540      	cmp	r0, r8
 80015a8:	d9f3      	bls.n	8001592 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80015aa:	2003      	movs	r0, #3
 80015ac:	e78e      	b.n	80014cc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ae:	2a02      	cmp	r2, #2
 80015b0:	d102      	bne.n	80015b8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80015b6:	e7e1      	b.n	800157c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	f013 0f02 	tst.w	r3, #2
 80015bc:	e7de      	b.n	800157c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015be:	6813      	ldr	r3, [r2, #0]
 80015c0:	f023 0307 	bic.w	r3, r3, #7
 80015c4:	432b      	orrs	r3, r5
 80015c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015c8:	6813      	ldr	r3, [r2, #0]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	42ab      	cmp	r3, r5
 80015d0:	f47f af7b 	bne.w	80014ca <HAL_RCC_ClockConfig+0xa>
 80015d4:	e78d      	b.n	80014f2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d6:	686b      	ldr	r3, [r5, #4]
 80015d8:	68e1      	ldr	r1, [r4, #12]
 80015da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80015de:	430b      	orrs	r3, r1
 80015e0:	606b      	str	r3, [r5, #4]
 80015e2:	e78b      	b.n	80014fc <HAL_RCC_ClockConfig+0x3c>
 80015e4:	40022000 	.word	0x40022000
 80015e8:	40021000 	.word	0x40021000
 80015ec:	080024e4 	.word	0x080024e4
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000008 	.word	0x20000008

080015f8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015f8:	6a03      	ldr	r3, [r0, #32]
{
 80015fa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001602:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001604:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001606:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001608:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800160a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800160e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001610:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001612:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8001616:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001618:	4d0a      	ldr	r5, [pc, #40]	; (8001644 <TIM_OC1_SetConfig+0x4c>)
 800161a:	42a8      	cmp	r0, r5
 800161c:	d10b      	bne.n	8001636 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800161e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001620:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001624:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001626:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800162a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800162e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8001630:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001634:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001636:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001638:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800163a:	684a      	ldr	r2, [r1, #4]
 800163c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800163e:	6203      	str	r3, [r0, #32]
}
 8001640:	bd70      	pop	{r4, r5, r6, pc}
 8001642:	bf00      	nop
 8001644:	40012c00 	.word	0x40012c00

08001648 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001648:	6a03      	ldr	r3, [r0, #32]
{
 800164a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800164c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001650:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001652:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001654:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001656:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001658:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800165a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800165e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001660:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8001662:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001666:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800166a:	4d0b      	ldr	r5, [pc, #44]	; (8001698 <TIM_OC3_SetConfig+0x50>)
 800166c:	42a8      	cmp	r0, r5
 800166e:	d10d      	bne.n	800168c <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001670:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8001672:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001676:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800167a:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800167e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001682:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8001684:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001688:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800168c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800168e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001690:	684a      	ldr	r2, [r1, #4]
 8001692:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001694:	6203      	str	r3, [r0, #32]
}
 8001696:	bd70      	pop	{r4, r5, r6, pc}
 8001698:	40012c00 	.word	0x40012c00

0800169c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800169c:	6a03      	ldr	r3, [r0, #32]
{
 800169e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80016a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016a4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016a6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80016aa:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80016ae:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80016b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80016bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016c0:	4d06      	ldr	r5, [pc, #24]	; (80016dc <TIM_OC4_SetConfig+0x40>)
 80016c2:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016c4:	bf02      	ittt	eq
 80016c6:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80016c8:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80016cc:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80016d0:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80016d2:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80016d4:	684a      	ldr	r2, [r1, #4]
 80016d6:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80016d8:	6203      	str	r3, [r0, #32]
}
 80016da:	bd30      	pop	{r4, r5, pc}
 80016dc:	40012c00 	.word	0x40012c00

080016e0 <HAL_TIM_PWM_MspInit>:
 80016e0:	4770      	bx	lr
	...

080016e4 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016e4:	4a16      	ldr	r2, [pc, #88]	; (8001740 <TIM_Base_SetConfig+0x5c>)
{
 80016e6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016e8:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 80016ea:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016ec:	d005      	beq.n	80016fa <TIM_Base_SetConfig+0x16>
 80016ee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80016f2:	d002      	beq.n	80016fa <TIM_Base_SetConfig+0x16>
 80016f4:	4c13      	ldr	r4, [pc, #76]	; (8001744 <TIM_Base_SetConfig+0x60>)
 80016f6:	42a0      	cmp	r0, r4
 80016f8:	d110      	bne.n	800171c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 80016fa:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001700:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8001702:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001706:	d005      	beq.n	8001714 <TIM_Base_SetConfig+0x30>
 8001708:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800170c:	d002      	beq.n	8001714 <TIM_Base_SetConfig+0x30>
 800170e:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <TIM_Base_SetConfig+0x60>)
 8001710:	4290      	cmp	r0, r2
 8001712:	d103      	bne.n	800171c <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001714:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800171a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800171c:	694a      	ldr	r2, [r1, #20]
 800171e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001722:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001724:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001726:	688b      	ldr	r3, [r1, #8]
 8001728:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800172a:	680b      	ldr	r3, [r1, #0]
 800172c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <TIM_Base_SetConfig+0x5c>)
 8001730:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001732:	bf04      	itt	eq
 8001734:	690b      	ldreq	r3, [r1, #16]
 8001736:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001738:	2301      	movs	r3, #1
 800173a:	6143      	str	r3, [r0, #20]
}
 800173c:	bd10      	pop	{r4, pc}
 800173e:	bf00      	nop
 8001740:	40012c00 	.word	0x40012c00
 8001744:	40000400 	.word	0x40000400

08001748 <HAL_TIM_Base_Init>:
{
 8001748:	b510      	push	{r4, lr}
  if (htim == NULL)
 800174a:	4604      	mov	r4, r0
 800174c:	b330      	cbz	r0, 800179c <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800174e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001752:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001756:	b91b      	cbnz	r3, 8001760 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001758:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800175c:	f7ff f9b4 	bl	8000ac8 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8001760:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001762:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001764:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001768:	1d21      	adds	r1, r4, #4
 800176a:	f7ff ffbb 	bl	80016e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800176e:	2301      	movs	r3, #1
  return HAL_OK;
 8001770:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001772:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001776:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800177a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800177e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001782:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001786:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800178a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800178e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8001792:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8001796:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800179a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800179c:	2001      	movs	r0, #1
 800179e:	e7fc      	b.n	800179a <HAL_TIM_Base_Init+0x52>

080017a0 <HAL_TIM_PWM_Init>:
{
 80017a0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80017a2:	4604      	mov	r4, r0
 80017a4:	b330      	cbz	r0, 80017f4 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80017a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80017aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80017ae:	b91b      	cbnz	r3, 80017b8 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80017b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80017b4:	f7ff ff94 	bl	80016e0 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80017b8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017ba:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80017bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80017c0:	1d21      	adds	r1, r4, #4
 80017c2:	f7ff ff8f 	bl	80016e4 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017c6:	2301      	movs	r3, #1
  return HAL_OK;
 80017c8:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017ca:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017ce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80017d2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80017d6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80017da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80017e6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80017ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80017ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80017f2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80017f4:	2001      	movs	r0, #1
 80017f6:	e7fc      	b.n	80017f2 <HAL_TIM_PWM_Init+0x52>

080017f8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017f8:	6a03      	ldr	r3, [r0, #32]
{
 80017fa:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017fc:	f023 0310 	bic.w	r3, r3, #16
 8001800:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8001802:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8001804:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001806:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001808:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800180a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800180e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001812:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8001814:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001818:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800181c:	4d0b      	ldr	r5, [pc, #44]	; (800184c <TIM_OC2_SetConfig+0x54>)
 800181e:	42a8      	cmp	r0, r5
 8001820:	d10d      	bne.n	800183e <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001822:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8001824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001828:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800182c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001830:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8001834:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 8001836:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800183a:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800183e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001840:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001842:	684a      	ldr	r2, [r1, #4]
 8001844:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001846:	6203      	str	r3, [r0, #32]
}
 8001848:	bd70      	pop	{r4, r5, r6, pc}
 800184a:	bf00      	nop
 800184c:	40012c00 	.word	0x40012c00

08001850 <HAL_TIM_PWM_ConfigChannel>:
{
 8001850:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001852:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001856:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001858:	2b01      	cmp	r3, #1
 800185a:	d052      	beq.n	8001902 <HAL_TIM_PWM_ConfigChannel+0xb2>
 800185c:	2301      	movs	r3, #1
  switch (Channel)
 800185e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8001860:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8001864:	d03c      	beq.n	80018e0 <HAL_TIM_PWM_ConfigChannel+0x90>
 8001866:	d806      	bhi.n	8001876 <HAL_TIM_PWM_ConfigChannel+0x26>
 8001868:	b1c2      	cbz	r2, 800189c <HAL_TIM_PWM_ConfigChannel+0x4c>
 800186a:	2a04      	cmp	r2, #4
 800186c:	d027      	beq.n	80018be <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 800186e:	2000      	movs	r0, #0
 8001870:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8001874:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8001876:	2a0c      	cmp	r2, #12
 8001878:	d1f9      	bne.n	800186e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800187a:	6800      	ldr	r0, [r0, #0]
 800187c:	f7ff ff0e 	bl	800169c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001880:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001882:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001884:	69da      	ldr	r2, [r3, #28]
 8001886:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800188a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800188c:	69da      	ldr	r2, [r3, #28]
 800188e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001892:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001894:	69da      	ldr	r2, [r3, #28]
 8001896:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800189a:	e030      	b.n	80018fe <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800189c:	6800      	ldr	r0, [r0, #0]
 800189e:	f7ff feab 	bl	80015f8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80018a6:	699a      	ldr	r2, [r3, #24]
 80018a8:	f042 0208 	orr.w	r2, r2, #8
 80018ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80018ae:	699a      	ldr	r2, [r3, #24]
 80018b0:	f022 0204 	bic.w	r2, r2, #4
 80018b4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018ba:	619a      	str	r2, [r3, #24]
      break;
 80018bc:	e7d7      	b.n	800186e <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80018be:	6800      	ldr	r0, [r0, #0]
 80018c0:	f7ff ff9a 	bl	80017f8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018c6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80018c8:	699a      	ldr	r2, [r3, #24]
 80018ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80018d0:	699a      	ldr	r2, [r3, #24]
 80018d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80018d8:	699a      	ldr	r2, [r3, #24]
 80018da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80018de:	e7ec      	b.n	80018ba <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80018e0:	6800      	ldr	r0, [r0, #0]
 80018e2:	f7ff feb1 	bl	8001648 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018e8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80018ea:	69da      	ldr	r2, [r3, #28]
 80018ec:	f042 0208 	orr.w	r2, r2, #8
 80018f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80018f2:	69da      	ldr	r2, [r3, #28]
 80018f4:	f022 0204 	bic.w	r2, r2, #4
 80018f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80018fe:	61da      	str	r2, [r3, #28]
      break;
 8001900:	e7b5      	b.n	800186e <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8001902:	2002      	movs	r0, #2
 8001904:	e7b6      	b.n	8001874 <HAL_TIM_PWM_ConfigChannel+0x24>

08001906 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001906:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001908:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800190a:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800190c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001910:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8001914:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001916:	6082      	str	r2, [r0, #8]
}
 8001918:	bd10      	pop	{r4, pc}

0800191a <HAL_TIM_ConfigClockSource>:
{
 800191a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800191c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8001920:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001922:	2b01      	cmp	r3, #1
 8001924:	f04f 0002 	mov.w	r0, #2
 8001928:	d027      	beq.n	800197a <HAL_TIM_ConfigClockSource+0x60>
 800192a:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001930:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8001932:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001936:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001938:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800193c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001940:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8001942:	680b      	ldr	r3, [r1, #0]
 8001944:	2b60      	cmp	r3, #96	; 0x60
 8001946:	d04d      	beq.n	80019e4 <HAL_TIM_ConfigClockSource+0xca>
 8001948:	d832      	bhi.n	80019b0 <HAL_TIM_ConfigClockSource+0x96>
 800194a:	2b40      	cmp	r3, #64	; 0x40
 800194c:	d062      	beq.n	8001a14 <HAL_TIM_ConfigClockSource+0xfa>
 800194e:	d815      	bhi.n	800197c <HAL_TIM_ConfigClockSource+0x62>
 8001950:	2b20      	cmp	r3, #32
 8001952:	d003      	beq.n	800195c <HAL_TIM_ConfigClockSource+0x42>
 8001954:	d809      	bhi.n	800196a <HAL_TIM_ConfigClockSource+0x50>
 8001956:	f033 0210 	bics.w	r2, r3, #16
 800195a:	d108      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800195c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800195e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001962:	4313      	orrs	r3, r2
 8001964:	f043 0307 	orr.w	r3, r3, #7
 8001968:	e020      	b.n	80019ac <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800196a:	2b30      	cmp	r3, #48	; 0x30
 800196c:	d0f6      	beq.n	800195c <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 800196e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001970:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001972:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001976:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800197a:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800197c:	2b50      	cmp	r3, #80	; 0x50
 800197e:	d1f6      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001980:	684a      	ldr	r2, [r1, #4]
 8001982:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001984:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001986:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001988:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800198c:	f025 0501 	bic.w	r5, r5, #1
 8001990:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001992:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001994:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800199a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800199e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80019a0:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80019a2:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019a8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80019ac:	6083      	str	r3, [r0, #8]
}
 80019ae:	e7de      	b.n	800196e <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80019b0:	2b70      	cmp	r3, #112	; 0x70
 80019b2:	d00c      	beq.n	80019ce <HAL_TIM_ConfigClockSource+0xb4>
 80019b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019b8:	d1d9      	bne.n	800196e <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80019ba:	68cb      	ldr	r3, [r1, #12]
 80019bc:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80019c0:	f7ff ffa1 	bl	8001906 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6893      	ldr	r3, [r2, #8]
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	e008      	b.n	80019e0 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80019ce:	68cb      	ldr	r3, [r1, #12]
 80019d0:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80019d4:	f7ff ff97 	bl	8001906 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80019d8:	6822      	ldr	r2, [r4, #0]
 80019da:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019e0:	6093      	str	r3, [r2, #8]
      break;
 80019e2:	e7c4      	b.n	800196e <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80019e4:	684d      	ldr	r5, [r1, #4]
 80019e6:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019e8:	6a01      	ldr	r1, [r0, #32]
 80019ea:	f021 0110 	bic.w	r1, r1, #16
 80019ee:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019f0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80019f2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80019fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a00:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001a04:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a06:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a08:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a0e:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8001a12:	e7cb      	b.n	80019ac <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a14:	684a      	ldr	r2, [r1, #4]
 8001a16:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a18:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a1a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a1c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a20:	f025 0501 	bic.w	r5, r5, #1
 8001a24:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a26:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8001a28:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a2e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001a32:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a34:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8001a36:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001a38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001a3c:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8001a40:	e7b4      	b.n	80019ac <HAL_TIM_ConfigClockSource+0x92>
	...

08001a44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001a44:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a46:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8001a4a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8001a4c:	2a01      	cmp	r2, #1
 8001a4e:	f04f 0002 	mov.w	r0, #2
 8001a52:	d01e      	beq.n	8001a92 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a54:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001a56:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001a5a:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a5c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a5e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a62:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8001a64:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001a66:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a68:	4c0a      	ldr	r4, [pc, #40]	; (8001a94 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8001a6a:	42a2      	cmp	r2, r4
 8001a6c:	d006      	beq.n	8001a7c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8001a6e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8001a72:	d003      	beq.n	8001a7c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8001a74:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8001a78:	42a2      	cmp	r2, r4
 8001a7a:	d104      	bne.n	8001a86 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a7c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a7e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a82:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a84:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001a86:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8001a88:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8001a8e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8001a92:	bd30      	pop	{r4, r5, pc}
 8001a94:	40012c00 	.word	0x40012c00

08001a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8001a98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d01f      	beq.n	8001ae0 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001aa0:	68cb      	ldr	r3, [r1, #12]
 8001aa2:	688a      	ldr	r2, [r1, #8]
 8001aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001aa8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001aaa:	684a      	ldr	r2, [r1, #4]
 8001aac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ab0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001ab2:	680a      	ldr	r2, [r1, #0]
 8001ab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001ab8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001aba:	690a      	ldr	r2, [r1, #16]
 8001abc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ac0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001ac2:	694a      	ldr	r2, [r1, #20]
 8001ac4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001ac8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001aca:	69ca      	ldr	r2, [r1, #28]
 8001acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001ad0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8001ad2:	6802      	ldr	r2, [r0, #0]
 8001ad4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8001adc:	4618      	mov	r0, r3
 8001ade:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001ae0:	2002      	movs	r0, #2
}
 8001ae2:	4770      	bx	lr

08001ae4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8001ae4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2310      	movs	r3, #16
 8001aea:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8001aee:	6803      	ldr	r3, [r0, #0]
 8001af0:	4615      	mov	r5, r2
 8001af2:	699e      	ldr	r6, [r3, #24]
 8001af4:	e9cd 4400 	strd	r4, r4, [sp]
 8001af8:	466b      	mov	r3, sp
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	47b0      	blx	r6
 8001afe:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001b02:	f003 0306 	and.w	r3, r3, #6
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	bf09      	itett	eq
 8001b0a:	2001      	moveq	r0, #1
 8001b0c:	4620      	movne	r0, r4
 8001b0e:	9b00      	ldreq	r3, [sp, #0]
 8001b10:	602b      	streq	r3, [r5, #0]
 8001b12:	b004      	add	sp, #16
 8001b14:	bd70      	pop	{r4, r5, r6, pc}

08001b16 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8001b16:	9800      	ldr	r0, [sp, #0]
 8001b18:	4290      	cmp	r0, r2
 8001b1a:	bf14      	ite	ne
 8001b1c:	2001      	movne	r0, #1
 8001b1e:	2006      	moveq	r0, #6
 8001b20:	4770      	bx	lr
	...

08001b24 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8001b24:	b510      	push	{r4, lr}
 8001b26:	4604      	mov	r4, r0
 8001b28:	4b02      	ldr	r3, [pc, #8]	; (8001b34 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8001b2a:	6003      	str	r3, [r0, #0]
 8001b2c:	f000 f8d1 	bl	8001cd2 <_ZNSt9type_infoD1Ev>
 8001b30:	4620      	mov	r0, r4
 8001b32:	bd10      	pop	{r4, pc}
 8001b34:	08002540 	.word	0x08002540

08001b38 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	f7ff fff2 	bl	8001b24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8001b40:	4620      	mov	r0, r4
 8001b42:	2108      	movs	r1, #8
 8001b44:	f000 f842 	bl	8001bcc <_ZdlPvj>
 8001b48:	4620      	mov	r0, r4
 8001b4a:	bd10      	pop	{r4, pc}

08001b4c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8001b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b50:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001b54:	461f      	mov	r7, r3
 8001b56:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8001b5a:	4598      	cmp	r8, r3
 8001b5c:	4606      	mov	r6, r0
 8001b5e:	4615      	mov	r5, r2
 8001b60:	d107      	bne.n	8001b72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8001b62:	9907      	ldr	r1, [sp, #28]
 8001b64:	f000 f8b8 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001b68:	b118      	cbz	r0, 8001b72 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8001b6a:	7165      	strb	r5, [r4, #5]
 8001b6c:	2000      	movs	r0, #0
 8001b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b72:	4639      	mov	r1, r7
 8001b74:	4630      	mov	r0, r6
 8001b76:	f000 f8af 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001b7a:	2800      	cmp	r0, #0
 8001b7c:	d0f6      	beq.n	8001b6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f8c4 8000 	str.w	r8, [r4]
 8001b84:	7125      	strb	r5, [r4, #4]
 8001b86:	71a3      	strb	r3, [r4, #6]
 8001b88:	e7f0      	b.n	8001b6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08001b8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8001b8a:	b538      	push	{r3, r4, r5, lr}
 8001b8c:	4615      	mov	r5, r2
 8001b8e:	461c      	mov	r4, r3
 8001b90:	f000 f8a2 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001b94:	b120      	cbz	r0, 8001ba0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8001b96:	2308      	movs	r3, #8
 8001b98:	60e3      	str	r3, [r4, #12]
 8001b9a:	2306      	movs	r3, #6
 8001b9c:	6025      	str	r5, [r4, #0]
 8001b9e:	7123      	strb	r3, [r4, #4]
 8001ba0:	bd38      	pop	{r3, r4, r5, pc}

08001ba2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8001ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ba6:	4605      	mov	r5, r0
 8001ba8:	460c      	mov	r4, r1
 8001baa:	4616      	mov	r6, r2
 8001bac:	461f      	mov	r7, r3
 8001bae:	f000 f893 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001bb2:	b948      	cbnz	r0, 8001bc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8001bb4:	2f03      	cmp	r7, #3
 8001bb6:	d807      	bhi.n	8001bc8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	4632      	mov	r2, r6
 8001bbc:	4629      	mov	r1, r5
 8001bbe:	4620      	mov	r0, r4
 8001bc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	4718      	bx	r3
 8001bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001bcc <_ZdlPvj>:
 8001bcc:	f000 bad0 	b.w	8002170 <_ZdlPv>

08001bd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8001bd0:	b510      	push	{r4, lr}
 8001bd2:	4604      	mov	r4, r0
 8001bd4:	4b02      	ldr	r3, [pc, #8]	; (8001be0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8001bd6:	6003      	str	r3, [r0, #0]
 8001bd8:	f7ff ffa4 	bl	8001b24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8001bdc:	4620      	mov	r0, r4
 8001bde:	bd10      	pop	{r4, pc}
 8001be0:	080025a0 	.word	0x080025a0

08001be4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8001be4:	b510      	push	{r4, lr}
 8001be6:	4604      	mov	r4, r0
 8001be8:	f7ff fff2 	bl	8001bd0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8001bec:	4620      	mov	r0, r4
 8001bee:	210c      	movs	r1, #12
 8001bf0:	f7ff ffec 	bl	8001bcc <_ZdlPvj>
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	bd10      	pop	{r4, pc}

08001bf8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8001bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bfc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001c00:	4606      	mov	r6, r0
 8001c02:	4590      	cmp	r8, r2
 8001c04:	460f      	mov	r7, r1
 8001c06:	4615      	mov	r5, r2
 8001c08:	461c      	mov	r4, r3
 8001c0a:	d00b      	beq.n	8001c24 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8001c0c:	68b0      	ldr	r0, [r6, #8]
 8001c0e:	462a      	mov	r2, r5
 8001c10:	6803      	ldr	r3, [r0, #0]
 8001c12:	f8cd 8018 	str.w	r8, [sp, #24]
 8001c16:	6a1e      	ldr	r6, [r3, #32]
 8001c18:	4639      	mov	r1, r7
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	46b4      	mov	ip, r6
 8001c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001c22:	4760      	bx	ip
 8001c24:	4619      	mov	r1, r3
 8001c26:	f000 f857 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001c2a:	2800      	cmp	r0, #0
 8001c2c:	d0ee      	beq.n	8001c0c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8001c2e:	2006      	movs	r0, #6
 8001c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c34 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8001c34:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c38:	460d      	mov	r5, r1
 8001c3a:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8001c3e:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8001c42:	4619      	mov	r1, r3
 8001c44:	4681      	mov	r9, r0
 8001c46:	4617      	mov	r7, r2
 8001c48:	4698      	mov	r8, r3
 8001c4a:	f000 f845 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001c4e:	b190      	cbz	r0, 8001c76 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8001c50:	2d00      	cmp	r5, #0
 8001c52:	6034      	str	r4, [r6, #0]
 8001c54:	7137      	strb	r7, [r6, #4]
 8001c56:	db09      	blt.n	8001c6c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8001c58:	442c      	add	r4, r5
 8001c5a:	45a2      	cmp	sl, r4
 8001c5c:	bf0c      	ite	eq
 8001c5e:	2406      	moveq	r4, #6
 8001c60:	2401      	movne	r4, #1
 8001c62:	71b4      	strb	r4, [r6, #6]
 8001c64:	2000      	movs	r0, #0
 8001c66:	b001      	add	sp, #4
 8001c68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001c6c:	3502      	adds	r5, #2
 8001c6e:	d1f9      	bne.n	8001c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001c70:	2301      	movs	r3, #1
 8001c72:	71b3      	strb	r3, [r6, #6]
 8001c74:	e7f6      	b.n	8001c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001c76:	4554      	cmp	r4, sl
 8001c78:	d106      	bne.n	8001c88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8001c7a:	4659      	mov	r1, fp
 8001c7c:	4648      	mov	r0, r9
 8001c7e:	f000 f82b 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001c82:	b108      	cbz	r0, 8001c88 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8001c84:	7177      	strb	r7, [r6, #5]
 8001c86:	e7ed      	b.n	8001c64 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001c88:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001c8c:	463a      	mov	r2, r7
 8001c8e:	6803      	ldr	r3, [r0, #0]
 8001c90:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8001c94:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8001c98:	69dc      	ldr	r4, [r3, #28]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	4643      	mov	r3, r8
 8001c9e:	46a4      	mov	ip, r4
 8001ca0:	b001      	add	sp, #4
 8001ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca6:	4760      	bx	ip

08001ca8 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8001ca8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cac:	4607      	mov	r7, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	4615      	mov	r5, r2
 8001cb2:	461e      	mov	r6, r3
 8001cb4:	f7ff ff69 	bl	8001b8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8001cb8:	b948      	cbnz	r0, 8001cce <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8001cba:	68b8      	ldr	r0, [r7, #8]
 8001cbc:	462a      	mov	r2, r5
 8001cbe:	6803      	ldr	r3, [r0, #0]
 8001cc0:	4621      	mov	r1, r4
 8001cc2:	699f      	ldr	r7, [r3, #24]
 8001cc4:	4633      	mov	r3, r6
 8001cc6:	46bc      	mov	ip, r7
 8001cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001ccc:	4760      	bx	ip
 8001cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cd2 <_ZNSt9type_infoD1Ev>:
 8001cd2:	4770      	bx	lr

08001cd4 <_ZNKSt9type_info14__is_pointer_pEv>:
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	4770      	bx	lr

08001cd8 <_ZNKSt9type_infoeqERKS_>:
 8001cd8:	4281      	cmp	r1, r0
 8001cda:	b508      	push	{r3, lr}
 8001cdc:	d00e      	beq.n	8001cfc <_ZNKSt9type_infoeqERKS_+0x24>
 8001cde:	6840      	ldr	r0, [r0, #4]
 8001ce0:	7803      	ldrb	r3, [r0, #0]
 8001ce2:	2b2a      	cmp	r3, #42	; 0x2a
 8001ce4:	d00c      	beq.n	8001d00 <_ZNKSt9type_infoeqERKS_+0x28>
 8001ce6:	6849      	ldr	r1, [r1, #4]
 8001ce8:	780b      	ldrb	r3, [r1, #0]
 8001cea:	2b2a      	cmp	r3, #42	; 0x2a
 8001cec:	bf08      	it	eq
 8001cee:	3101      	addeq	r1, #1
 8001cf0:	f7fe fa2c 	bl	800014c <strcmp>
 8001cf4:	fab0 f080 	clz	r0, r0
 8001cf8:	0940      	lsrs	r0, r0, #5
 8001cfa:	bd08      	pop	{r3, pc}
 8001cfc:	2001      	movs	r0, #1
 8001cfe:	e7fc      	b.n	8001cfa <_ZNKSt9type_infoeqERKS_+0x22>
 8001d00:	2000      	movs	r0, #0
 8001d02:	e7fa      	b.n	8001cfa <_ZNKSt9type_infoeqERKS_+0x22>

08001d04 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4604      	mov	r4, r0
 8001d08:	4b02      	ldr	r3, [pc, #8]	; (8001d14 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8001d0a:	6003      	str	r3, [r0, #0]
 8001d0c:	f7ff ff0a 	bl	8001b24 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8001d10:	4620      	mov	r0, r4
 8001d12:	bd10      	pop	{r4, pc}
 8001d14:	08002618 	.word	0x08002618

08001d18 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	f7ff fff2 	bl	8001d04 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8001d20:	4620      	mov	r0, r4
 8001d22:	2118      	movs	r1, #24
 8001d24:	f7ff ff52 	bl	8001bcc <_ZdlPvj>
 8001d28:	4620      	mov	r0, r4
 8001d2a:	bd10      	pop	{r4, pc}

08001d2c <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8001d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d30:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8001d34:	4604      	mov	r4, r0
 8001d36:	454a      	cmp	r2, r9
 8001d38:	460f      	mov	r7, r1
 8001d3a:	4616      	mov	r6, r2
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	d024      	beq.n	8001d8a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8001d40:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8001d44:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8001d48:	f1b8 0f00 	cmp.w	r8, #0
 8001d4c:	d028      	beq.n	8001da0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8001d4e:	68e5      	ldr	r5, [r4, #12]
 8001d50:	07aa      	lsls	r2, r5, #30
 8001d52:	d521      	bpl.n	8001d98 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8001d54:	122a      	asrs	r2, r5, #8
 8001d56:	f015 0501 	ands.w	r5, r5, #1
 8001d5a:	d003      	beq.n	8001d64 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8001d5c:	1cfb      	adds	r3, r7, #3
 8001d5e:	d01b      	beq.n	8001d98 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8001d60:	6833      	ldr	r3, [r6, #0]
 8001d62:	589a      	ldr	r2, [r3, r2]
 8001d64:	68a0      	ldr	r0, [r4, #8]
 8001d66:	4639      	mov	r1, r7
 8001d68:	6803      	ldr	r3, [r0, #0]
 8001d6a:	f8cd 9000 	str.w	r9, [sp]
 8001d6e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8001d72:	4432      	add	r2, r6
 8001d74:	4653      	mov	r3, sl
 8001d76:	47d8      	blx	fp
 8001d78:	2803      	cmp	r0, #3
 8001d7a:	d90d      	bls.n	8001d98 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8001d7c:	b115      	cbz	r5, 8001d84 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8001d7e:	f040 0001 	orr.w	r0, r0, #1
 8001d82:	b2c0      	uxtb	r0, r0
 8001d84:	b003      	add	sp, #12
 8001d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	f7ff ffa4 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d0d5      	beq.n	8001d40 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8001d94:	2006      	movs	r0, #6
 8001d96:	e7f5      	b.n	8001d84 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8001d98:	f108 38ff 	add.w	r8, r8, #4294967295
 8001d9c:	3c08      	subs	r4, #8
 8001d9e:	e7d3      	b.n	8001d48 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8001da0:	2001      	movs	r0, #1
 8001da2:	e7ef      	b.n	8001d84 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08001da4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8001da4:	b4f0      	push	{r4, r5, r6, r7}
 8001da6:	1e0d      	subs	r5, r1, #0
 8001da8:	9c04      	ldr	r4, [sp, #16]
 8001daa:	db06      	blt.n	8001dba <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 8001dac:	1950      	adds	r0, r2, r5
 8001dae:	4284      	cmp	r4, r0
 8001db0:	bf14      	ite	ne
 8001db2:	2001      	movne	r0, #1
 8001db4:	2006      	moveq	r0, #6
 8001db6:	bcf0      	pop	{r4, r5, r6, r7}
 8001db8:	4770      	bx	lr
 8001dba:	3502      	adds	r5, #2
 8001dbc:	d005      	beq.n	8001dca <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 8001dbe:	6805      	ldr	r5, [r0, #0]
 8001dc0:	9404      	str	r4, [sp, #16]
 8001dc2:	6a2c      	ldr	r4, [r5, #32]
 8001dc4:	46a4      	mov	ip, r4
 8001dc6:	bcf0      	pop	{r4, r5, r6, r7}
 8001dc8:	4760      	bx	ip
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e7f3      	b.n	8001db6 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

08001dce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8001dce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dd2:	b091      	sub	sp, #68	; 0x44
 8001dd4:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8001dd6:	469a      	mov	sl, r3
 8001dd8:	68a3      	ldr	r3, [r4, #8]
 8001dda:	4688      	mov	r8, r1
 8001ddc:	06d9      	lsls	r1, r3, #27
 8001dde:	bf48      	it	mi
 8001de0:	6883      	ldrmi	r3, [r0, #8]
 8001de2:	9206      	str	r2, [sp, #24]
 8001de4:	bf48      	it	mi
 8001de6:	60a3      	strmi	r3, [r4, #8]
 8001de8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001dea:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001dec:	4681      	mov	r9, r0
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d107      	bne.n	8001e02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8001df2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001df4:	f7ff ff70 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001df8:	b118      	cbz	r0, 8001e02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8001dfa:	9b06      	ldr	r3, [sp, #24]
 8001dfc:	7163      	strb	r3, [r4, #5]
 8001dfe:	2700      	movs	r7, #0
 8001e00:	e085      	b.n	8001f0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8001e02:	4651      	mov	r1, sl
 8001e04:	4648      	mov	r0, r9
 8001e06:	f7ff ff67 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8001e0a:	b1c0      	cbz	r0, 8001e3e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 8001e0c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001e0e:	f1b8 0f00 	cmp.w	r8, #0
 8001e12:	6023      	str	r3, [r4, #0]
 8001e14:	9b06      	ldr	r3, [sp, #24]
 8001e16:	7123      	strb	r3, [r4, #4]
 8001e18:	db0b      	blt.n	8001e32 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 8001e1a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001e1c:	4498      	add	r8, r3
 8001e1e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001e20:	4543      	cmp	r3, r8
 8001e22:	bf0c      	ite	eq
 8001e24:	f04f 0806 	moveq.w	r8, #6
 8001e28:	f04f 0801 	movne.w	r8, #1
 8001e2c:	f884 8006 	strb.w	r8, [r4, #6]
 8001e30:	e7e5      	b.n	8001dfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001e32:	f118 0f02 	cmn.w	r8, #2
 8001e36:	d1e2      	bne.n	8001dfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001e38:	2301      	movs	r3, #1
 8001e3a:	71a3      	strb	r3, [r4, #6]
 8001e3c:	e7df      	b.n	8001dfe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8001e3e:	f1b8 0f00 	cmp.w	r8, #0
 8001e42:	bfa8      	it	ge
 8001e44:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8001e46:	f04f 0700 	mov.w	r7, #0
 8001e4a:	bfa4      	itt	ge
 8001e4c:	eba3 0308 	subge.w	r3, r3, r8
 8001e50:	9307      	strge	r3, [sp, #28]
 8001e52:	f04f 0302 	mov.w	r3, #2
 8001e56:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 8001e5a:	f04f 0301 	mov.w	r3, #1
 8001e5e:	9308      	str	r3, [sp, #32]
 8001e60:	9b06      	ldr	r3, [sp, #24]
 8001e62:	bfb8      	it	lt
 8001e64:	9007      	strlt	r0, [sp, #28]
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8001e6c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8001e70:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8001e74:	9305      	str	r3, [sp, #20]
 8001e76:	f1bb 0f00 	cmp.w	fp, #0
 8001e7a:	f000 80d5 	beq.w	8002028 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25a>
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8001e84:	9b05      	ldr	r3, [sp, #20]
 8001e86:	68a5      	ldr	r5, [r4, #8]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	950f      	str	r5, [sp, #60]	; 0x3c
 8001e8c:	07da      	lsls	r2, r3, #31
 8001e8e:	bf48      	it	mi
 8001e90:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8001e92:	ea4f 2123 	mov.w	r1, r3, asr #8
 8001e96:	bf42      	ittt	mi
 8001e98:	6800      	ldrmi	r0, [r0, #0]
 8001e9a:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 8001e9c:	5841      	ldrmi	r1, [r0, r1]
 8001e9e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001ea0:	bf58      	it	pl
 8001ea2:	9a06      	ldrpl	r2, [sp, #24]
 8001ea4:	4401      	add	r1, r0
 8001ea6:	9807      	ldr	r0, [sp, #28]
 8001ea8:	b138      	cbz	r0, 8001eba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 8001eaa:	4288      	cmp	r0, r1
 8001eac:	bf2c      	ite	cs
 8001eae:	2000      	movcs	r0, #0
 8001eb0:	2001      	movcc	r0, #1
 8001eb2:	9e08      	ldr	r6, [sp, #32]
 8001eb4:	42b0      	cmp	r0, r6
 8001eb6:	f000 80b3 	beq.w	8002020 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 8001eba:	079b      	lsls	r3, r3, #30
 8001ebc:	d407      	bmi.n	8001ece <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
 8001ebe:	f118 0f02 	cmn.w	r8, #2
 8001ec2:	d102      	bne.n	8001eca <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfc>
 8001ec4:	07ae      	lsls	r6, r5, #30
 8001ec6:	f000 80ad 	beq.w	8002024 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 8001eca:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 8001ece:	9b05      	ldr	r3, [sp, #20]
 8001ed0:	ad0d      	add	r5, sp, #52	; 0x34
 8001ed2:	6898      	ldr	r0, [r3, #8]
 8001ed4:	6803      	ldr	r3, [r0, #0]
 8001ed6:	9503      	str	r5, [sp, #12]
 8001ed8:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001eda:	9502      	str	r5, [sp, #8]
 8001edc:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001ede:	e9cd 1500 	strd	r1, r5, [sp]
 8001ee2:	4641      	mov	r1, r8
 8001ee4:	69dd      	ldr	r5, [r3, #28]
 8001ee6:	4653      	mov	r3, sl
 8001ee8:	47a8      	blx	r5
 8001eea:	7963      	ldrb	r3, [r4, #5]
 8001eec:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8001ef0:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	2d06      	cmp	r5, #6
 8001ef8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001efa:	7163      	strb	r3, [r4, #5]
 8001efc:	d001      	beq.n	8001f02 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 8001efe:	2d02      	cmp	r5, #2
 8001f00:	d109      	bne.n	8001f16 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 8001f02:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001f06:	6021      	str	r1, [r4, #0]
 8001f08:	7123      	strb	r3, [r4, #4]
 8001f0a:	71a5      	strb	r5, [r4, #6]
 8001f0c:	4607      	mov	r7, r0
 8001f0e:	4638      	mov	r0, r7
 8001f10:	b011      	add	sp, #68	; 0x44
 8001f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f16:	6822      	ldr	r2, [r4, #0]
 8001f18:	b9a7      	cbnz	r7, 8001f44 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 8001f1a:	b9aa      	cbnz	r2, 8001f48 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 8001f1c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8001f20:	6021      	str	r1, [r4, #0]
 8001f22:	7122      	strb	r2, [r4, #4]
 8001f24:	b121      	cbz	r1, 8001f30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8001f26:	b11b      	cbz	r3, 8001f30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8001f28:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001f2c:	07dd      	lsls	r5, r3, #31
 8001f2e:	d5ed      	bpl.n	8001f0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8001f30:	7963      	ldrb	r3, [r4, #5]
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d0ea      	beq.n	8001f0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8001f36:	9b05      	ldr	r3, [sp, #20]
 8001f38:	4607      	mov	r7, r0
 8001f3a:	3b08      	subs	r3, #8
 8001f3c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8001f40:	9305      	str	r3, [sp, #20]
 8001f42:	e798      	b.n	8001e76 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 8001f44:	2a00      	cmp	r2, #0
 8001f46:	d037      	beq.n	8001fb8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 8001f48:	4291      	cmp	r1, r2
 8001f4a:	d106      	bne.n	8001f5a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 8001f4c:	7923      	ldrb	r3, [r4, #4]
 8001f4e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8001f52:	4313      	orrs	r3, r2
 8001f54:	7123      	strb	r3, [r4, #4]
 8001f56:	4638      	mov	r0, r7
 8001f58:	e7ea      	b.n	8001f30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8001f5a:	b909      	cbnz	r1, 8001f60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d0fa      	beq.n	8001f56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	79a6      	ldrb	r6, [r4, #6]
 8001f64:	d904      	bls.n	8001f70 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8001f66:	07d9      	lsls	r1, r3, #31
 8001f68:	d529      	bpl.n	8001fbe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8001f6a:	68a3      	ldr	r3, [r4, #8]
 8001f6c:	079b      	lsls	r3, r3, #30
 8001f6e:	d526      	bpl.n	8001fbe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8001f70:	b97e      	cbnz	r6, 8001f92 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 8001f72:	2d03      	cmp	r5, #3
 8001f74:	d905      	bls.n	8001f82 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8001f76:	07ee      	lsls	r6, r5, #31
 8001f78:	d541      	bpl.n	8001ffe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8001f7a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001f7e:	0798      	lsls	r0, r3, #30
 8001f80:	d53d      	bpl.n	8001ffe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8001f82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001f84:	4641      	mov	r1, r8
 8001f86:	9300      	str	r3, [sp, #0]
 8001f88:	4650      	mov	r0, sl
 8001f8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001f8c:	f7ff ff0a 	bl	8001da4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8001f90:	4606      	mov	r6, r0
 8001f92:	b9e5      	cbnz	r5, 8001fce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8001f94:	2e03      	cmp	r6, #3
 8001f96:	d905      	bls.n	8001fa4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8001f98:	07f1      	lsls	r1, r6, #31
 8001f9a:	d532      	bpl.n	8002002 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8001f9c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8001fa0:	079a      	lsls	r2, r3, #30
 8001fa2:	d52e      	bpl.n	8002002 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8001fa4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001fa6:	4641      	mov	r1, r8
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4650      	mov	r0, sl
 8001fac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001fae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001fb0:	f7ff fef8 	bl	8001da4 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	e00a      	b.n	8001fce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8001fb8:	2900      	cmp	r1, #0
 8001fba:	d1d1      	bne.n	8001f60 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 8001fbc:	e7cb      	b.n	8001f56 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8001fbe:	2e01      	cmp	r6, #1
 8001fc0:	bf38      	it	cc
 8001fc2:	2601      	movcc	r6, #1
 8001fc4:	2d01      	cmp	r5, #1
 8001fc6:	bf38      	it	cc
 8001fc8:	2501      	movcc	r5, #1
 8001fca:	b2f6      	uxtb	r6, r6
 8001fcc:	b2ed      	uxtb	r5, r5
 8001fce:	ea85 0306 	eor.w	r3, r5, r6
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	d916      	bls.n	8002006 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8001fd8:	2d03      	cmp	r5, #3
 8001fda:	bf81      	itttt	hi
 8001fdc:	462e      	movhi	r6, r5
 8001fde:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8001fe0:	2000      	movhi	r0, #0
 8001fe2:	6023      	strhi	r3, [r4, #0]
 8001fe4:	bf8a      	itet	hi
 8001fe6:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 8001fea:	4638      	movls	r0, r7
 8001fec:	7123      	strbhi	r3, [r4, #4]
 8001fee:	07b3      	lsls	r3, r6, #30
 8001ff0:	71a6      	strb	r6, [r4, #6]
 8001ff2:	d402      	bmi.n	8001ffa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8001ff4:	f016 0601 	ands.w	r6, r6, #1
 8001ff8:	d19a      	bne.n	8001f30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8001ffa:	2000      	movs	r0, #0
 8001ffc:	e786      	b.n	8001f0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 8001ffe:	2601      	movs	r6, #1
 8002000:	e7e5      	b.n	8001fce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8002002:	2501      	movs	r5, #1
 8002004:	e7e3      	b.n	8001fce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8002006:	2300      	movs	r3, #0
 8002008:	4035      	ands	r5, r6
 800200a:	b2ed      	uxtb	r5, r5
 800200c:	2d03      	cmp	r5, #3
 800200e:	6023      	str	r3, [r4, #0]
 8002010:	d903      	bls.n	800201a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 8002012:	2302      	movs	r3, #2
 8002014:	2001      	movs	r0, #1
 8002016:	71a3      	strb	r3, [r4, #6]
 8002018:	e778      	b.n	8001f0c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 800201a:	2001      	movs	r0, #1
 800201c:	71a0      	strb	r0, [r4, #6]
 800201e:	e787      	b.n	8001f30 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 8002020:	2301      	movs	r3, #1
 8002022:	9309      	str	r3, [sp, #36]	; 0x24
 8002024:	4638      	mov	r0, r7
 8002026:	e786      	b.n	8001f36 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 8002028:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800202a:	2b00      	cmp	r3, #0
 800202c:	f43f af6f 	beq.w	8001f0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8002030:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002032:	2b01      	cmp	r3, #1
 8002034:	f43f af6b 	beq.w	8001f0e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 8002038:	2301      	movs	r3, #1
 800203a:	f8cd b020 	str.w	fp, [sp, #32]
 800203e:	930a      	str	r3, [sp, #40]	; 0x28
 8002040:	e714      	b.n	8001e6c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9e>

08002042 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8002042:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002046:	b089      	sub	sp, #36	; 0x24
 8002048:	4606      	mov	r6, r0
 800204a:	4617      	mov	r7, r2
 800204c:	461c      	mov	r4, r3
 800204e:	9102      	str	r1, [sp, #8]
 8002050:	f7ff fd9b 	bl	8001b8a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8002054:	4605      	mov	r5, r0
 8002056:	2800      	cmp	r0, #0
 8002058:	d15f      	bne.n	800211a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 800205a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800205e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8002062:	f019 0f10 	tst.w	r9, #16
 8002066:	bf18      	it	ne
 8002068:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 800206c:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8002070:	f009 0301 	and.w	r3, r9, #1
 8002074:	9303      	str	r3, [sp, #12]
 8002076:	f10d 0b10 	add.w	fp, sp, #16
 800207a:	f1ba 0f00 	cmp.w	sl, #0
 800207e:	d072      	beq.n	8002166 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 8002080:	2300      	movs	r3, #0
 8002082:	9304      	str	r3, [sp, #16]
 8002084:	f88d 3014 	strb.w	r3, [sp, #20]
 8002088:	2300      	movs	r3, #0
 800208a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800208e:	9307      	str	r3, [sp, #28]
 8002090:	f002 0301 	and.w	r3, r2, #1
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	f002 0302 	and.w	r3, r2, #2
 800209a:	9301      	str	r3, [sp, #4]
 800209c:	9b03      	ldr	r3, [sp, #12]
 800209e:	f002 0102 	and.w	r1, r2, #2
 80020a2:	430b      	orrs	r3, r1
 80020a4:	f8cd 9018 	str.w	r9, [sp, #24]
 80020a8:	d104      	bne.n	80020b4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x72>
 80020aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80020ae:	f1a8 0808 	sub.w	r8, r8, #8
 80020b2:	e7e2      	b.n	800207a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 80020b4:	2f00      	cmp	r7, #0
 80020b6:	d034      	beq.n	8002122 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 80020b8:	9b00      	ldr	r3, [sp, #0]
 80020ba:	1212      	asrs	r2, r2, #8
 80020bc:	b10b      	cbz	r3, 80020c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x80>
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	589a      	ldr	r2, [r3, r2]
 80020c2:	443a      	add	r2, r7
 80020c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80020c8:	9902      	ldr	r1, [sp, #8]
 80020ca:	6803      	ldr	r3, [r0, #0]
 80020cc:	699d      	ldr	r5, [r3, #24]
 80020ce:	465b      	mov	r3, fp
 80020d0:	47a8      	blx	r5
 80020d2:	4605      	mov	r5, r0
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d0e8      	beq.n	80020aa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 80020d8:	9b07      	ldr	r3, [sp, #28]
 80020da:	2b08      	cmp	r3, #8
 80020dc:	d104      	bne.n	80020e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 80020de:	9b00      	ldr	r3, [sp, #0]
 80020e0:	b113      	cbz	r3, 80020e8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 80020e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80020e6:	9307      	str	r3, [sp, #28]
 80020e8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80020ec:	2b03      	cmp	r3, #3
 80020ee:	d905      	bls.n	80020fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80020f0:	9a01      	ldr	r2, [sp, #4]
 80020f2:	b91a      	cbnz	r2, 80020fc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80020f4:	f023 0302 	bic.w	r3, r3, #2
 80020f8:	f88d 3014 	strb.w	r3, [sp, #20]
 80020fc:	68e1      	ldr	r1, [r4, #12]
 80020fe:	b9c1      	cbnz	r1, 8002132 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 8002100:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 8002104:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002108:	7923      	ldrb	r3, [r4, #4]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d905      	bls.n	800211a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 800210e:	079a      	lsls	r2, r3, #30
 8002110:	d509      	bpl.n	8002126 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 8002112:	68b3      	ldr	r3, [r6, #8]
 8002114:	f013 0f01 	tst.w	r3, #1
 8002118:	d1c7      	bne.n	80020aa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 800211a:	4628      	mov	r0, r5
 800211c:	b009      	add	sp, #36	; 0x24
 800211e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002122:	463a      	mov	r2, r7
 8002124:	e7ce      	b.n	80020c4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x82>
 8002126:	07db      	lsls	r3, r3, #31
 8002128:	d5f7      	bpl.n	800211a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 800212a:	68b3      	ldr	r3, [r6, #8]
 800212c:	f013 0f02 	tst.w	r3, #2
 8002130:	e7f2      	b.n	8002118 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	9a04      	ldr	r2, [sp, #16]
 8002136:	4293      	cmp	r3, r2
 8002138:	d004      	beq.n	8002144 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 800213a:	2300      	movs	r3, #0
 800213c:	6023      	str	r3, [r4, #0]
 800213e:	2302      	movs	r3, #2
 8002140:	7123      	strb	r3, [r4, #4]
 8002142:	e7ea      	b.n	800211a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8002144:	b12b      	cbz	r3, 8002152 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 8002146:	7923      	ldrb	r3, [r4, #4]
 8002148:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	7123      	strb	r3, [r4, #4]
 8002150:	e7ab      	b.n	80020aa <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8002152:	9807      	ldr	r0, [sp, #28]
 8002154:	2808      	cmp	r0, #8
 8002156:	d0f2      	beq.n	800213e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8002158:	2908      	cmp	r1, #8
 800215a:	d0f0      	beq.n	800213e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 800215c:	f7ff fdbc 	bl	8001cd8 <_ZNKSt9type_infoeqERKS_>
 8002160:	2800      	cmp	r0, #0
 8002162:	d1f0      	bne.n	8002146 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8002164:	e7eb      	b.n	800213e <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8002166:	7925      	ldrb	r5, [r4, #4]
 8002168:	3d00      	subs	r5, #0
 800216a:	bf18      	it	ne
 800216c:	2501      	movne	r5, #1
 800216e:	e7d4      	b.n	800211a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>

08002170 <_ZdlPv>:
 8002170:	f000 b824 	b.w	80021bc <free>

08002174 <__libc_init_array>:
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	2600      	movs	r6, #0
 8002178:	4d0c      	ldr	r5, [pc, #48]	; (80021ac <__libc_init_array+0x38>)
 800217a:	4c0d      	ldr	r4, [pc, #52]	; (80021b0 <__libc_init_array+0x3c>)
 800217c:	1b64      	subs	r4, r4, r5
 800217e:	10a4      	asrs	r4, r4, #2
 8002180:	42a6      	cmp	r6, r4
 8002182:	d109      	bne.n	8002198 <__libc_init_array+0x24>
 8002184:	f000 f89a 	bl	80022bc <_init>
 8002188:	2600      	movs	r6, #0
 800218a:	4d0a      	ldr	r5, [pc, #40]	; (80021b4 <__libc_init_array+0x40>)
 800218c:	4c0a      	ldr	r4, [pc, #40]	; (80021b8 <__libc_init_array+0x44>)
 800218e:	1b64      	subs	r4, r4, r5
 8002190:	10a4      	asrs	r4, r4, #2
 8002192:	42a6      	cmp	r6, r4
 8002194:	d105      	bne.n	80021a2 <__libc_init_array+0x2e>
 8002196:	bd70      	pop	{r4, r5, r6, pc}
 8002198:	f855 3b04 	ldr.w	r3, [r5], #4
 800219c:	4798      	blx	r3
 800219e:	3601      	adds	r6, #1
 80021a0:	e7ee      	b.n	8002180 <__libc_init_array+0xc>
 80021a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80021a6:	4798      	blx	r3
 80021a8:	3601      	adds	r6, #1
 80021aa:	e7f2      	b.n	8002192 <__libc_init_array+0x1e>
 80021ac:	0800263c 	.word	0x0800263c
 80021b0:	0800263c 	.word	0x0800263c
 80021b4:	0800263c 	.word	0x0800263c
 80021b8:	08002644 	.word	0x08002644

080021bc <free>:
 80021bc:	4b02      	ldr	r3, [pc, #8]	; (80021c8 <free+0xc>)
 80021be:	4601      	mov	r1, r0
 80021c0:	6818      	ldr	r0, [r3, #0]
 80021c2:	f000 b825 	b.w	8002210 <_free_r>
 80021c6:	bf00      	nop
 80021c8:	2000000c 	.word	0x2000000c

080021cc <memmove>:
 80021cc:	4288      	cmp	r0, r1
 80021ce:	b510      	push	{r4, lr}
 80021d0:	eb01 0402 	add.w	r4, r1, r2
 80021d4:	d902      	bls.n	80021dc <memmove+0x10>
 80021d6:	4284      	cmp	r4, r0
 80021d8:	4623      	mov	r3, r4
 80021da:	d807      	bhi.n	80021ec <memmove+0x20>
 80021dc:	1e43      	subs	r3, r0, #1
 80021de:	42a1      	cmp	r1, r4
 80021e0:	d008      	beq.n	80021f4 <memmove+0x28>
 80021e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80021e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80021ea:	e7f8      	b.n	80021de <memmove+0x12>
 80021ec:	4601      	mov	r1, r0
 80021ee:	4402      	add	r2, r0
 80021f0:	428a      	cmp	r2, r1
 80021f2:	d100      	bne.n	80021f6 <memmove+0x2a>
 80021f4:	bd10      	pop	{r4, pc}
 80021f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80021fe:	e7f7      	b.n	80021f0 <memmove+0x24>

08002200 <memset>:
 8002200:	4603      	mov	r3, r0
 8002202:	4402      	add	r2, r0
 8002204:	4293      	cmp	r3, r2
 8002206:	d100      	bne.n	800220a <memset+0xa>
 8002208:	4770      	bx	lr
 800220a:	f803 1b01 	strb.w	r1, [r3], #1
 800220e:	e7f9      	b.n	8002204 <memset+0x4>

08002210 <_free_r>:
 8002210:	b538      	push	{r3, r4, r5, lr}
 8002212:	4605      	mov	r5, r0
 8002214:	2900      	cmp	r1, #0
 8002216:	d040      	beq.n	800229a <_free_r+0x8a>
 8002218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800221c:	1f0c      	subs	r4, r1, #4
 800221e:	2b00      	cmp	r3, #0
 8002220:	bfb8      	it	lt
 8002222:	18e4      	addlt	r4, r4, r3
 8002224:	f000 f83c 	bl	80022a0 <__malloc_lock>
 8002228:	4a1c      	ldr	r2, [pc, #112]	; (800229c <_free_r+0x8c>)
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	b933      	cbnz	r3, 800223c <_free_r+0x2c>
 800222e:	6063      	str	r3, [r4, #4]
 8002230:	6014      	str	r4, [r2, #0]
 8002232:	4628      	mov	r0, r5
 8002234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002238:	f000 b838 	b.w	80022ac <__malloc_unlock>
 800223c:	42a3      	cmp	r3, r4
 800223e:	d908      	bls.n	8002252 <_free_r+0x42>
 8002240:	6820      	ldr	r0, [r4, #0]
 8002242:	1821      	adds	r1, r4, r0
 8002244:	428b      	cmp	r3, r1
 8002246:	bf01      	itttt	eq
 8002248:	6819      	ldreq	r1, [r3, #0]
 800224a:	685b      	ldreq	r3, [r3, #4]
 800224c:	1809      	addeq	r1, r1, r0
 800224e:	6021      	streq	r1, [r4, #0]
 8002250:	e7ed      	b.n	800222e <_free_r+0x1e>
 8002252:	461a      	mov	r2, r3
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	b10b      	cbz	r3, 800225c <_free_r+0x4c>
 8002258:	42a3      	cmp	r3, r4
 800225a:	d9fa      	bls.n	8002252 <_free_r+0x42>
 800225c:	6811      	ldr	r1, [r2, #0]
 800225e:	1850      	adds	r0, r2, r1
 8002260:	42a0      	cmp	r0, r4
 8002262:	d10b      	bne.n	800227c <_free_r+0x6c>
 8002264:	6820      	ldr	r0, [r4, #0]
 8002266:	4401      	add	r1, r0
 8002268:	1850      	adds	r0, r2, r1
 800226a:	4283      	cmp	r3, r0
 800226c:	6011      	str	r1, [r2, #0]
 800226e:	d1e0      	bne.n	8002232 <_free_r+0x22>
 8002270:	6818      	ldr	r0, [r3, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	4401      	add	r1, r0
 8002276:	6011      	str	r1, [r2, #0]
 8002278:	6053      	str	r3, [r2, #4]
 800227a:	e7da      	b.n	8002232 <_free_r+0x22>
 800227c:	d902      	bls.n	8002284 <_free_r+0x74>
 800227e:	230c      	movs	r3, #12
 8002280:	602b      	str	r3, [r5, #0]
 8002282:	e7d6      	b.n	8002232 <_free_r+0x22>
 8002284:	6820      	ldr	r0, [r4, #0]
 8002286:	1821      	adds	r1, r4, r0
 8002288:	428b      	cmp	r3, r1
 800228a:	bf01      	itttt	eq
 800228c:	6819      	ldreq	r1, [r3, #0]
 800228e:	685b      	ldreq	r3, [r3, #4]
 8002290:	1809      	addeq	r1, r1, r0
 8002292:	6021      	streq	r1, [r4, #0]
 8002294:	6063      	str	r3, [r4, #4]
 8002296:	6054      	str	r4, [r2, #4]
 8002298:	e7cb      	b.n	8002232 <_free_r+0x22>
 800229a:	bd38      	pop	{r3, r4, r5, pc}
 800229c:	2000041c 	.word	0x2000041c

080022a0 <__malloc_lock>:
 80022a0:	4801      	ldr	r0, [pc, #4]	; (80022a8 <__malloc_lock+0x8>)
 80022a2:	f000 b809 	b.w	80022b8 <__retarget_lock_acquire_recursive>
 80022a6:	bf00      	nop
 80022a8:	20000420 	.word	0x20000420

080022ac <__malloc_unlock>:
 80022ac:	4801      	ldr	r0, [pc, #4]	; (80022b4 <__malloc_unlock+0x8>)
 80022ae:	f000 b804 	b.w	80022ba <__retarget_lock_release_recursive>
 80022b2:	bf00      	nop
 80022b4:	20000420 	.word	0x20000420

080022b8 <__retarget_lock_acquire_recursive>:
 80022b8:	4770      	bx	lr

080022ba <__retarget_lock_release_recursive>:
 80022ba:	4770      	bx	lr

080022bc <_init>:
 80022bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022be:	bf00      	nop
 80022c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022c2:	bc08      	pop	{r3}
 80022c4:	469e      	mov	lr, r3
 80022c6:	4770      	bx	lr

080022c8 <_fini>:
 80022c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ca:	bf00      	nop
 80022cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022ce:	bc08      	pop	{r3}
 80022d0:	469e      	mov	lr, r3
 80022d2:	4770      	bx	lr
