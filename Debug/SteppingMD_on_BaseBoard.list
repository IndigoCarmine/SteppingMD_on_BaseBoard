
SteppingMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003bc  08003cc4  08003cc4  00013cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  08004080  08004080  00014080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000c8  080040a4  080040a4  000140a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800416c  0800416c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  0800416c  0800416c  0001416c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800417c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003dc  20000078  080041f4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000454  080041f4  00020454  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029257  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fcd  00000000  00000000  000492f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000108d7  00000000  00000000  0004c2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0005cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002548  00000000  00000000  0005d590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002f8e  00000000  00000000  0005fad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e1c  00000000  00000000  00062a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf1e6  00000000  00000000  00074882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00133a68  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002e80  00000000  00000000  00133ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003cac 	.word	0x08003cac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003cac 	.word	0x08003cac

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <selfrel_offset31>:
 8000160:	6803      	ldr	r3, [r0, #0]
 8000162:	005a      	lsls	r2, r3, #1
 8000164:	bf4c      	ite	mi
 8000166:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800016a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800016e:	4418      	add	r0, r3
 8000170:	4770      	bx	lr
 8000172:	bf00      	nop

08000174 <search_EIT_table>:
 8000174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000178:	b339      	cbz	r1, 80001ca <search_EIT_table+0x56>
 800017a:	1e4f      	subs	r7, r1, #1
 800017c:	4604      	mov	r4, r0
 800017e:	4615      	mov	r5, r2
 8000180:	463e      	mov	r6, r7
 8000182:	f04f 0800 	mov.w	r8, #0
 8000186:	eb08 0106 	add.w	r1, r8, r6
 800018a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 800018e:	1049      	asrs	r1, r1, #1
 8000190:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 8000194:	4648      	mov	r0, r9
 8000196:	f7ff ffe3 	bl	8000160 <selfrel_offset31>
 800019a:	4603      	mov	r3, r0
 800019c:	00c8      	lsls	r0, r1, #3
 800019e:	3008      	adds	r0, #8
 80001a0:	428f      	cmp	r7, r1
 80001a2:	4420      	add	r0, r4
 80001a4:	d00b      	beq.n	80001be <search_EIT_table+0x4a>
 80001a6:	42ab      	cmp	r3, r5
 80001a8:	d80b      	bhi.n	80001c2 <search_EIT_table+0x4e>
 80001aa:	f7ff ffd9 	bl	8000160 <selfrel_offset31>
 80001ae:	3801      	subs	r0, #1
 80001b0:	42a8      	cmp	r0, r5
 80001b2:	f101 0801 	add.w	r8, r1, #1
 80001b6:	d3e6      	bcc.n	8000186 <search_EIT_table+0x12>
 80001b8:	4648      	mov	r0, r9
 80001ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80001be:	42ab      	cmp	r3, r5
 80001c0:	d9fa      	bls.n	80001b8 <search_EIT_table+0x44>
 80001c2:	4588      	cmp	r8, r1
 80001c4:	d001      	beq.n	80001ca <search_EIT_table+0x56>
 80001c6:	1e4e      	subs	r6, r1, #1
 80001c8:	e7dd      	b.n	8000186 <search_EIT_table+0x12>
 80001ca:	f04f 0900 	mov.w	r9, #0
 80001ce:	4648      	mov	r0, r9
 80001d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080001d4 <__gnu_unwind_get_pr_addr>:
 80001d4:	2801      	cmp	r0, #1
 80001d6:	d007      	beq.n	80001e8 <__gnu_unwind_get_pr_addr+0x14>
 80001d8:	2802      	cmp	r0, #2
 80001da:	d007      	beq.n	80001ec <__gnu_unwind_get_pr_addr+0x18>
 80001dc:	4b04      	ldr	r3, [pc, #16]	; (80001f0 <__gnu_unwind_get_pr_addr+0x1c>)
 80001de:	2800      	cmp	r0, #0
 80001e0:	bf0c      	ite	eq
 80001e2:	4618      	moveq	r0, r3
 80001e4:	2000      	movne	r0, #0
 80001e6:	4770      	bx	lr
 80001e8:	4802      	ldr	r0, [pc, #8]	; (80001f4 <__gnu_unwind_get_pr_addr+0x20>)
 80001ea:	4770      	bx	lr
 80001ec:	4802      	ldr	r0, [pc, #8]	; (80001f8 <__gnu_unwind_get_pr_addr+0x24>)
 80001ee:	4770      	bx	lr
 80001f0:	080008c5 	.word	0x080008c5
 80001f4:	080008c9 	.word	0x080008c9
 80001f8:	080008cd 	.word	0x080008cd

080001fc <get_eit_entry>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	4b24      	ldr	r3, [pc, #144]	; (8000290 <get_eit_entry+0x94>)
 8000200:	4604      	mov	r4, r0
 8000202:	b083      	sub	sp, #12
 8000204:	1e8d      	subs	r5, r1, #2
 8000206:	b33b      	cbz	r3, 8000258 <get_eit_entry+0x5c>
 8000208:	4628      	mov	r0, r5
 800020a:	a901      	add	r1, sp, #4
 800020c:	f3af 8000 	nop.w
 8000210:	b1e8      	cbz	r0, 800024e <get_eit_entry+0x52>
 8000212:	9901      	ldr	r1, [sp, #4]
 8000214:	462a      	mov	r2, r5
 8000216:	f7ff ffad 	bl	8000174 <search_EIT_table>
 800021a:	4601      	mov	r1, r0
 800021c:	b1b8      	cbz	r0, 800024e <get_eit_entry+0x52>
 800021e:	f7ff ff9f 	bl	8000160 <selfrel_offset31>
 8000222:	684b      	ldr	r3, [r1, #4]
 8000224:	64a0      	str	r0, [r4, #72]	; 0x48
 8000226:	2b01      	cmp	r3, #1
 8000228:	d02e      	beq.n	8000288 <get_eit_entry+0x8c>
 800022a:	2b00      	cmp	r3, #0
 800022c:	db27      	blt.n	800027e <get_eit_entry+0x82>
 800022e:	1d08      	adds	r0, r1, #4
 8000230:	f7ff ff96 	bl	8000160 <selfrel_offset31>
 8000234:	2300      	movs	r3, #0
 8000236:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800023a:	6803      	ldr	r3, [r0, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db12      	blt.n	8000266 <get_eit_entry+0x6a>
 8000240:	f7ff ff8e 	bl	8000160 <selfrel_offset31>
 8000244:	4603      	mov	r3, r0
 8000246:	2000      	movs	r0, #0
 8000248:	6123      	str	r3, [r4, #16]
 800024a:	b003      	add	sp, #12
 800024c:	bd30      	pop	{r4, r5, pc}
 800024e:	2300      	movs	r3, #0
 8000250:	2009      	movs	r0, #9
 8000252:	6123      	str	r3, [r4, #16]
 8000254:	b003      	add	sp, #12
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <get_eit_entry+0x98>)
 800025a:	490f      	ldr	r1, [pc, #60]	; (8000298 <get_eit_entry+0x9c>)
 800025c:	4618      	mov	r0, r3
 800025e:	1ac9      	subs	r1, r1, r3
 8000260:	10c9      	asrs	r1, r1, #3
 8000262:	9101      	str	r1, [sp, #4]
 8000264:	e7d6      	b.n	8000214 <get_eit_entry+0x18>
 8000266:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800026a:	f7ff ffb3 	bl	80001d4 <__gnu_unwind_get_pr_addr>
 800026e:	2800      	cmp	r0, #0
 8000270:	4603      	mov	r3, r0
 8000272:	bf14      	ite	ne
 8000274:	2000      	movne	r0, #0
 8000276:	2009      	moveq	r0, #9
 8000278:	6123      	str	r3, [r4, #16]
 800027a:	b003      	add	sp, #12
 800027c:	bd30      	pop	{r4, r5, pc}
 800027e:	2301      	movs	r3, #1
 8000280:	1d08      	adds	r0, r1, #4
 8000282:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 8000286:	e7d8      	b.n	800023a <get_eit_entry+0x3e>
 8000288:	2300      	movs	r3, #0
 800028a:	2005      	movs	r0, #5
 800028c:	6123      	str	r3, [r4, #16]
 800028e:	e7dc      	b.n	800024a <get_eit_entry+0x4e>
 8000290:	00000000 	.word	0x00000000
 8000294:	080040a4 	.word	0x080040a4
 8000298:	0800416c 	.word	0x0800416c

0800029c <restore_non_core_regs>:
 800029c:	6803      	ldr	r3, [r0, #0]
 800029e:	b510      	push	{r4, lr}
 80002a0:	07da      	lsls	r2, r3, #31
 80002a2:	4604      	mov	r4, r0
 80002a4:	d406      	bmi.n	80002b4 <restore_non_core_regs+0x18>
 80002a6:	079b      	lsls	r3, r3, #30
 80002a8:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80002ac:	d509      	bpl.n	80002c2 <restore_non_core_regs+0x26>
 80002ae:	f000 fc5d 	bl	8000b6c <__gnu_Unwind_Restore_VFP_D>
 80002b2:	6823      	ldr	r3, [r4, #0]
 80002b4:	0759      	lsls	r1, r3, #29
 80002b6:	d509      	bpl.n	80002cc <restore_non_core_regs+0x30>
 80002b8:	071a      	lsls	r2, r3, #28
 80002ba:	d50e      	bpl.n	80002da <restore_non_core_regs+0x3e>
 80002bc:	06db      	lsls	r3, r3, #27
 80002be:	d513      	bpl.n	80002e8 <restore_non_core_regs+0x4c>
 80002c0:	bd10      	pop	{r4, pc}
 80002c2:	f000 fc4b 	bl	8000b5c <__gnu_Unwind_Restore_VFP>
 80002c6:	6823      	ldr	r3, [r4, #0]
 80002c8:	0759      	lsls	r1, r3, #29
 80002ca:	d4f5      	bmi.n	80002b8 <restore_non_core_regs+0x1c>
 80002cc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80002d0:	f000 fc54 	bl	8000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80002d4:	6823      	ldr	r3, [r4, #0]
 80002d6:	071a      	lsls	r2, r3, #28
 80002d8:	d4f0      	bmi.n	80002bc <restore_non_core_regs+0x20>
 80002da:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80002de:	f000 fc55 	bl	8000b8c <__gnu_Unwind_Restore_WMMXD>
 80002e2:	6823      	ldr	r3, [r4, #0]
 80002e4:	06db      	lsls	r3, r3, #27
 80002e6:	d4eb      	bmi.n	80002c0 <restore_non_core_regs+0x24>
 80002e8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80002ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80002f0:	f000 bc90 	b.w	8000c14 <__gnu_Unwind_Restore_WMMXC>

080002f4 <__gnu_unwind_24bit.constprop.0>:
 80002f4:	2009      	movs	r0, #9
 80002f6:	4770      	bx	lr

080002f8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80002f8:	4603      	mov	r3, r0
 80002fa:	6800      	ldr	r0, [r0, #0]
 80002fc:	b100      	cbz	r0, 8000300 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80002fe:	4418      	add	r0, r3
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop

08000304 <_Unwind_DebugHook>:
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop

08000308 <unwind_phase2>:
 8000308:	b570      	push	{r4, r5, r6, lr}
 800030a:	4604      	mov	r4, r0
 800030c:	460e      	mov	r6, r1
 800030e:	4620      	mov	r0, r4
 8000310:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000312:	f7ff ff73 	bl	80001fc <get_eit_entry>
 8000316:	4605      	mov	r5, r0
 8000318:	b998      	cbnz	r0, 8000342 <unwind_phase2+0x3a>
 800031a:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 800031e:	4632      	mov	r2, r6
 8000320:	4621      	mov	r1, r4
 8000322:	2001      	movs	r0, #1
 8000324:	6923      	ldr	r3, [r4, #16]
 8000326:	f8c4 c014 	str.w	ip, [r4, #20]
 800032a:	4798      	blx	r3
 800032c:	2808      	cmp	r0, #8
 800032e:	d0ee      	beq.n	800030e <unwind_phase2+0x6>
 8000330:	2807      	cmp	r0, #7
 8000332:	d106      	bne.n	8000342 <unwind_phase2+0x3a>
 8000334:	4628      	mov	r0, r5
 8000336:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000338:	f7ff ffe4 	bl	8000304 <_Unwind_DebugHook>
 800033c:	1d30      	adds	r0, r6, #4
 800033e:	f000 fc01 	bl	8000b44 <__restore_core_regs>
 8000342:	f003 fafd 	bl	8003940 <abort>
 8000346:	bf00      	nop

08000348 <unwind_phase2_forced>:
 8000348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800034c:	f04f 0a00 	mov.w	sl, #0
 8000350:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000354:	f10d 0e0c 	add.w	lr, sp, #12
 8000358:	f101 0c04 	add.w	ip, r1, #4
 800035c:	68c7      	ldr	r7, [r0, #12]
 800035e:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000362:	4606      	mov	r6, r0
 8000364:	4614      	mov	r4, r2
 8000366:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800036a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800036e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000372:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000376:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800037a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800037e:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000382:	ad02      	add	r5, sp, #8
 8000384:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000388:	f8c5 a000 	str.w	sl, [r5]
 800038c:	e021      	b.n	80003d2 <unwind_phase2_forced+0x8a>
 800038e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000390:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000394:	4629      	mov	r1, r5
 8000396:	6173      	str	r3, [r6, #20]
 8000398:	a87a      	add	r0, sp, #488	; 0x1e8
 800039a:	f003 fb13 	bl	80039c4 <memcpy>
 800039e:	4631      	mov	r1, r6
 80003a0:	4650      	mov	r0, sl
 80003a2:	6933      	ldr	r3, [r6, #16]
 80003a4:	aa7a      	add	r2, sp, #488	; 0x1e8
 80003a6:	4798      	blx	r3
 80003a8:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80003aa:	4682      	mov	sl, r0
 80003ac:	646c      	str	r4, [r5, #68]	; 0x44
 80003ae:	4633      	mov	r3, r6
 80003b0:	4632      	mov	r2, r6
 80003b2:	4649      	mov	r1, r9
 80003b4:	2001      	movs	r0, #1
 80003b6:	e9cd 5800 	strd	r5, r8, [sp]
 80003ba:	47b8      	blx	r7
 80003bc:	4604      	mov	r4, r0
 80003be:	b9f0      	cbnz	r0, 80003fe <unwind_phase2_forced+0xb6>
 80003c0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80003c4:	4628      	mov	r0, r5
 80003c6:	a97a      	add	r1, sp, #488	; 0x1e8
 80003c8:	f003 fafc 	bl	80039c4 <memcpy>
 80003cc:	f1ba 0f08 	cmp.w	sl, #8
 80003d0:	d11b      	bne.n	800040a <unwind_phase2_forced+0xc2>
 80003d2:	4630      	mov	r0, r6
 80003d4:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80003d6:	f7ff ff11 	bl	80001fc <get_eit_entry>
 80003da:	f104 0909 	add.w	r9, r4, #9
 80003de:	fa5f fa89 	uxtb.w	sl, r9
 80003e2:	4604      	mov	r4, r0
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d0d2      	beq.n	800038e <unwind_phase2_forced+0x46>
 80003e8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 80003ea:	4633      	mov	r3, r6
 80003ec:	6469      	str	r1, [r5, #68]	; 0x44
 80003ee:	4632      	mov	r2, r6
 80003f0:	2001      	movs	r0, #1
 80003f2:	e9cd 5800 	strd	r5, r8, [sp]
 80003f6:	f04a 0110 	orr.w	r1, sl, #16
 80003fa:	47b8      	blx	r7
 80003fc:	b100      	cbz	r0, 8000400 <unwind_phase2_forced+0xb8>
 80003fe:	2409      	movs	r4, #9
 8000400:	4620      	mov	r0, r4
 8000402:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040a:	f1ba 0f07 	cmp.w	sl, #7
 800040e:	d1f6      	bne.n	80003fe <unwind_phase2_forced+0xb6>
 8000410:	4620      	mov	r0, r4
 8000412:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000414:	f7ff ff76 	bl	8000304 <_Unwind_DebugHook>
 8000418:	a803      	add	r0, sp, #12
 800041a:	f000 fb93 	bl	8000b44 <__restore_core_regs>
 800041e:	bf00      	nop

08000420 <_Unwind_GetCFA>:
 8000420:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000422:	4770      	bx	lr

08000424 <__gnu_Unwind_RaiseException>:
 8000424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000426:	f04f 37ff 	mov.w	r7, #4294967295
 800042a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800042c:	b0f9      	sub	sp, #484	; 0x1e4
 800042e:	640b      	str	r3, [r1, #64]	; 0x40
 8000430:	ac01      	add	r4, sp, #4
 8000432:	f101 0c04 	add.w	ip, r1, #4
 8000436:	460e      	mov	r6, r1
 8000438:	4605      	mov	r5, r0
 800043a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800043e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000440:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000446:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800044a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800044c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000450:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000454:	9700      	str	r7, [sp, #0]
 8000456:	e006      	b.n	8000466 <__gnu_Unwind_RaiseException+0x42>
 8000458:	466a      	mov	r2, sp
 800045a:	4629      	mov	r1, r5
 800045c:	692b      	ldr	r3, [r5, #16]
 800045e:	4798      	blx	r3
 8000460:	2808      	cmp	r0, #8
 8000462:	4604      	mov	r4, r0
 8000464:	d108      	bne.n	8000478 <__gnu_Unwind_RaiseException+0x54>
 8000466:	4628      	mov	r0, r5
 8000468:	9910      	ldr	r1, [sp, #64]	; 0x40
 800046a:	f7ff fec7 	bl	80001fc <get_eit_entry>
 800046e:	2800      	cmp	r0, #0
 8000470:	d0f2      	beq.n	8000458 <__gnu_Unwind_RaiseException+0x34>
 8000472:	2009      	movs	r0, #9
 8000474:	b079      	add	sp, #484	; 0x1e4
 8000476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000478:	4668      	mov	r0, sp
 800047a:	f7ff ff0f 	bl	800029c <restore_non_core_regs>
 800047e:	2c06      	cmp	r4, #6
 8000480:	d1f7      	bne.n	8000472 <__gnu_Unwind_RaiseException+0x4e>
 8000482:	4631      	mov	r1, r6
 8000484:	4628      	mov	r0, r5
 8000486:	f7ff ff3f 	bl	8000308 <unwind_phase2>
 800048a:	bf00      	nop

0800048c <__gnu_Unwind_ForcedUnwind>:
 800048c:	b410      	push	{r4}
 800048e:	4614      	mov	r4, r2
 8000490:	6184      	str	r4, [r0, #24]
 8000492:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000494:	60c1      	str	r1, [r0, #12]
 8000496:	2200      	movs	r2, #0
 8000498:	641c      	str	r4, [r3, #64]	; 0x40
 800049a:	4619      	mov	r1, r3
 800049c:	bc10      	pop	{r4}
 800049e:	e753      	b.n	8000348 <unwind_phase2_forced>

080004a0 <__gnu_Unwind_Resume>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	6943      	ldr	r3, [r0, #20]
 80004a4:	68c6      	ldr	r6, [r0, #12]
 80004a6:	640b      	str	r3, [r1, #64]	; 0x40
 80004a8:	b9ae      	cbnz	r6, 80004d6 <__gnu_Unwind_Resume+0x36>
 80004aa:	460a      	mov	r2, r1
 80004ac:	6903      	ldr	r3, [r0, #16]
 80004ae:	4604      	mov	r4, r0
 80004b0:	460d      	mov	r5, r1
 80004b2:	4601      	mov	r1, r0
 80004b4:	2002      	movs	r0, #2
 80004b6:	4798      	blx	r3
 80004b8:	2807      	cmp	r0, #7
 80004ba:	d005      	beq.n	80004c8 <__gnu_Unwind_Resume+0x28>
 80004bc:	2808      	cmp	r0, #8
 80004be:	d10f      	bne.n	80004e0 <__gnu_Unwind_Resume+0x40>
 80004c0:	4629      	mov	r1, r5
 80004c2:	4620      	mov	r0, r4
 80004c4:	f7ff ff20 	bl	8000308 <unwind_phase2>
 80004c8:	4630      	mov	r0, r6
 80004ca:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80004cc:	f7ff ff1a 	bl	8000304 <_Unwind_DebugHook>
 80004d0:	1d28      	adds	r0, r5, #4
 80004d2:	f000 fb37 	bl	8000b44 <__restore_core_regs>
 80004d6:	2201      	movs	r2, #1
 80004d8:	f7ff ff36 	bl	8000348 <unwind_phase2_forced>
 80004dc:	f003 fa30 	bl	8003940 <abort>
 80004e0:	f003 fa2e 	bl	8003940 <abort>

080004e4 <__gnu_Unwind_Resume_or_Rethrow>:
 80004e4:	68c2      	ldr	r2, [r0, #12]
 80004e6:	b12a      	cbz	r2, 80004f4 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 80004e8:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 80004ec:	2200      	movs	r2, #0
 80004ee:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 80004f2:	e729      	b.n	8000348 <unwind_phase2_forced>
 80004f4:	e796      	b.n	8000424 <__gnu_Unwind_RaiseException>
 80004f6:	bf00      	nop

080004f8 <_Unwind_Complete>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <_Unwind_DeleteException>:
 80004fc:	6883      	ldr	r3, [r0, #8]
 80004fe:	4601      	mov	r1, r0
 8000500:	b10b      	cbz	r3, 8000506 <_Unwind_DeleteException+0xa>
 8000502:	2001      	movs	r0, #1
 8000504:	4718      	bx	r3
 8000506:	4770      	bx	lr

08000508 <_Unwind_VRS_Get>:
 8000508:	2901      	cmp	r1, #1
 800050a:	d012      	beq.n	8000532 <_Unwind_VRS_Get+0x2a>
 800050c:	d809      	bhi.n	8000522 <_Unwind_VRS_Get+0x1a>
 800050e:	b973      	cbnz	r3, 800052e <_Unwind_VRS_Get+0x26>
 8000510:	2a0f      	cmp	r2, #15
 8000512:	d80c      	bhi.n	800052e <_Unwind_VRS_Get+0x26>
 8000514:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000518:	6842      	ldr	r2, [r0, #4]
 800051a:	4618      	mov	r0, r3
 800051c:	9b00      	ldr	r3, [sp, #0]
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	4770      	bx	lr
 8000522:	3903      	subs	r1, #3
 8000524:	2901      	cmp	r1, #1
 8000526:	bf94      	ite	ls
 8000528:	2001      	movls	r0, #1
 800052a:	2002      	movhi	r0, #2
 800052c:	4770      	bx	lr
 800052e:	2002      	movs	r0, #2
 8000530:	4770      	bx	lr
 8000532:	4608      	mov	r0, r1
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <_Unwind_GetGR>:
 8000538:	2300      	movs	r3, #0
 800053a:	b500      	push	{lr}
 800053c:	b085      	sub	sp, #20
 800053e:	460a      	mov	r2, r1
 8000540:	a903      	add	r1, sp, #12
 8000542:	9100      	str	r1, [sp, #0]
 8000544:	4619      	mov	r1, r3
 8000546:	f7ff ffdf 	bl	8000508 <_Unwind_VRS_Get>
 800054a:	9803      	ldr	r0, [sp, #12]
 800054c:	b005      	add	sp, #20
 800054e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000552:	bf00      	nop

08000554 <_Unwind_VRS_Set>:
 8000554:	2901      	cmp	r1, #1
 8000556:	d012      	beq.n	800057e <_Unwind_VRS_Set+0x2a>
 8000558:	d809      	bhi.n	800056e <_Unwind_VRS_Set+0x1a>
 800055a:	b973      	cbnz	r3, 800057a <_Unwind_VRS_Set+0x26>
 800055c:	2a0f      	cmp	r2, #15
 800055e:	d80c      	bhi.n	800057a <_Unwind_VRS_Set+0x26>
 8000560:	9900      	ldr	r1, [sp, #0]
 8000562:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000566:	6809      	ldr	r1, [r1, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	6051      	str	r1, [r2, #4]
 800056c:	4770      	bx	lr
 800056e:	3903      	subs	r1, #3
 8000570:	2901      	cmp	r1, #1
 8000572:	bf94      	ite	ls
 8000574:	2001      	movls	r0, #1
 8000576:	2002      	movhi	r0, #2
 8000578:	4770      	bx	lr
 800057a:	2002      	movs	r0, #2
 800057c:	4770      	bx	lr
 800057e:	4608      	mov	r0, r1
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <_Unwind_SetGR>:
 8000584:	2300      	movs	r3, #0
 8000586:	b510      	push	{r4, lr}
 8000588:	b084      	sub	sp, #16
 800058a:	ac03      	add	r4, sp, #12
 800058c:	9203      	str	r2, [sp, #12]
 800058e:	9400      	str	r4, [sp, #0]
 8000590:	460a      	mov	r2, r1
 8000592:	4619      	mov	r1, r3
 8000594:	f7ff ffde 	bl	8000554 <_Unwind_VRS_Set>
 8000598:	b004      	add	sp, #16
 800059a:	bd10      	pop	{r4, pc}

0800059c <__gnu_Unwind_Backtrace>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	f04f 36ff 	mov.w	r6, #4294967295
 80005a2:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80005a4:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 80005a8:	6413      	str	r3, [r2, #64]	; 0x40
 80005aa:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 80005ae:	f102 0c04 	add.w	ip, r2, #4
 80005b2:	4605      	mov	r5, r0
 80005b4:	460c      	mov	r4, r1
 80005b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005ba:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005be:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005c2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80005ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80005ce:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80005d2:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80005d6:	9616      	str	r6, [sp, #88]	; 0x58
 80005d8:	e012      	b.n	8000600 <__gnu_Unwind_Backtrace+0x64>
 80005da:	210c      	movs	r1, #12
 80005dc:	a816      	add	r0, sp, #88	; 0x58
 80005de:	466a      	mov	r2, sp
 80005e0:	f7ff ffd0 	bl	8000584 <_Unwind_SetGR>
 80005e4:	4621      	mov	r1, r4
 80005e6:	a816      	add	r0, sp, #88	; 0x58
 80005e8:	47a8      	blx	r5
 80005ea:	b978      	cbnz	r0, 800060c <__gnu_Unwind_Backtrace+0x70>
 80005ec:	4669      	mov	r1, sp
 80005ee:	2008      	movs	r0, #8
 80005f0:	9b04      	ldr	r3, [sp, #16]
 80005f2:	aa16      	add	r2, sp, #88	; 0x58
 80005f4:	4798      	blx	r3
 80005f6:	2805      	cmp	r0, #5
 80005f8:	4606      	mov	r6, r0
 80005fa:	d008      	beq.n	800060e <__gnu_Unwind_Backtrace+0x72>
 80005fc:	2809      	cmp	r0, #9
 80005fe:	d005      	beq.n	800060c <__gnu_Unwind_Backtrace+0x70>
 8000600:	4668      	mov	r0, sp
 8000602:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000604:	f7ff fdfa 	bl	80001fc <get_eit_entry>
 8000608:	2800      	cmp	r0, #0
 800060a:	d0e6      	beq.n	80005da <__gnu_Unwind_Backtrace+0x3e>
 800060c:	2609      	movs	r6, #9
 800060e:	a816      	add	r0, sp, #88	; 0x58
 8000610:	f7ff fe44 	bl	800029c <restore_non_core_regs>
 8000614:	4630      	mov	r0, r6
 8000616:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 800061a:	bd70      	pop	{r4, r5, r6, pc}

0800061c <__gnu_unwind_pr_common>:
 800061c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000620:	461e      	mov	r6, r3
 8000622:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000624:	b089      	sub	sp, #36	; 0x24
 8000626:	f854 3b04 	ldr.w	r3, [r4], #4
 800062a:	460d      	mov	r5, r1
 800062c:	4617      	mov	r7, r2
 800062e:	f000 0803 	and.w	r8, r0, #3
 8000632:	9406      	str	r4, [sp, #24]
 8000634:	2e00      	cmp	r6, #0
 8000636:	d079      	beq.n	800072c <__gnu_unwind_pr_common+0x110>
 8000638:	2202      	movs	r2, #2
 800063a:	f88d 201c 	strb.w	r2, [sp, #28]
 800063e:	0c1a      	lsrs	r2, r3, #16
 8000640:	f88d 201d 	strb.w	r2, [sp, #29]
 8000644:	041b      	lsls	r3, r3, #16
 8000646:	b2d2      	uxtb	r2, r2
 8000648:	9305      	str	r3, [sp, #20]
 800064a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 800064e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000650:	f1b8 0f02 	cmp.w	r8, #2
 8000654:	bf08      	it	eq
 8000656:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000658:	f013 0301 	ands.w	r3, r3, #1
 800065c:	d00c      	beq.n	8000678 <__gnu_unwind_pr_common+0x5c>
 800065e:	4638      	mov	r0, r7
 8000660:	a905      	add	r1, sp, #20
 8000662:	f000 fb71 	bl	8000d48 <__gnu_unwind_execute>
 8000666:	b918      	cbnz	r0, 8000670 <__gnu_unwind_pr_common+0x54>
 8000668:	2008      	movs	r0, #8
 800066a:	b009      	add	sp, #36	; 0x24
 800066c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000670:	2009      	movs	r0, #9
 8000672:	b009      	add	sp, #36	; 0x24
 8000674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000678:	f8d4 a000 	ldr.w	sl, [r4]
 800067c:	f1ba 0f00 	cmp.w	sl, #0
 8000680:	d0ed      	beq.n	800065e <__gnu_unwind_pr_common+0x42>
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	f000 0308 	and.w	r3, r0, #8
 8000688:	9302      	str	r3, [sp, #8]
 800068a:	2e02      	cmp	r6, #2
 800068c:	d04a      	beq.n	8000724 <__gnu_unwind_pr_common+0x108>
 800068e:	f8b4 a000 	ldrh.w	sl, [r4]
 8000692:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000696:	3404      	adds	r4, #4
 8000698:	6caa      	ldr	r2, [r5, #72]	; 0x48
 800069a:	210f      	movs	r1, #15
 800069c:	4638      	mov	r0, r7
 800069e:	f029 0b01 	bic.w	fp, r9, #1
 80006a2:	4493      	add	fp, r2
 80006a4:	f7ff ff48 	bl	8000538 <_Unwind_GetGR>
 80006a8:	4583      	cmp	fp, r0
 80006aa:	d839      	bhi.n	8000720 <__gnu_unwind_pr_common+0x104>
 80006ac:	f02a 0201 	bic.w	r2, sl, #1
 80006b0:	445a      	add	r2, fp
 80006b2:	4282      	cmp	r2, r0
 80006b4:	bf94      	ite	ls
 80006b6:	2000      	movls	r0, #0
 80006b8:	2001      	movhi	r0, #1
 80006ba:	ea4f 0349 	mov.w	r3, r9, lsl #1
 80006be:	f003 0302 	and.w	r3, r3, #2
 80006c2:	f00a 0a01 	and.w	sl, sl, #1
 80006c6:	ea43 030a 	orr.w	r3, r3, sl
 80006ca:	2b01      	cmp	r3, #1
 80006cc:	d049      	beq.n	8000762 <__gnu_unwind_pr_common+0x146>
 80006ce:	2b02      	cmp	r3, #2
 80006d0:	d032      	beq.n	8000738 <__gnu_unwind_pr_common+0x11c>
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d1cc      	bne.n	8000670 <__gnu_unwind_pr_common+0x54>
 80006d6:	f1b8 0f00 	cmp.w	r8, #0
 80006da:	d002      	beq.n	80006e2 <__gnu_unwind_pr_common+0xc6>
 80006dc:	2800      	cmp	r0, #0
 80006de:	f040 80ce 	bne.w	800087e <__gnu_unwind_pr_common+0x262>
 80006e2:	3404      	adds	r4, #4
 80006e4:	f8d4 a000 	ldr.w	sl, [r4]
 80006e8:	f1ba 0f00 	cmp.w	sl, #0
 80006ec:	d1cd      	bne.n	800068a <__gnu_unwind_pr_common+0x6e>
 80006ee:	4638      	mov	r0, r7
 80006f0:	a905      	add	r1, sp, #20
 80006f2:	f000 fb29 	bl	8000d48 <__gnu_unwind_execute>
 80006f6:	2800      	cmp	r0, #0
 80006f8:	d1ba      	bne.n	8000670 <__gnu_unwind_pr_common+0x54>
 80006fa:	9b01      	ldr	r3, [sp, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0b3      	beq.n	8000668 <__gnu_unwind_pr_common+0x4c>
 8000700:	210f      	movs	r1, #15
 8000702:	4638      	mov	r0, r7
 8000704:	f7ff ff18 	bl	8000538 <_Unwind_GetGR>
 8000708:	210e      	movs	r1, #14
 800070a:	4602      	mov	r2, r0
 800070c:	4638      	mov	r0, r7
 800070e:	f7ff ff39 	bl	8000584 <_Unwind_SetGR>
 8000712:	4638      	mov	r0, r7
 8000714:	210f      	movs	r1, #15
 8000716:	4a6a      	ldr	r2, [pc, #424]	; (80008c0 <__gnu_unwind_pr_common+0x2a4>)
 8000718:	f7ff ff34 	bl	8000584 <_Unwind_SetGR>
 800071c:	2007      	movs	r0, #7
 800071e:	e7a8      	b.n	8000672 <__gnu_unwind_pr_common+0x56>
 8000720:	2000      	movs	r0, #0
 8000722:	e7ca      	b.n	80006ba <__gnu_unwind_pr_common+0x9e>
 8000724:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000728:	3408      	adds	r4, #8
 800072a:	e7b5      	b.n	8000698 <__gnu_unwind_pr_common+0x7c>
 800072c:	021b      	lsls	r3, r3, #8
 800072e:	9305      	str	r3, [sp, #20]
 8000730:	2303      	movs	r3, #3
 8000732:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000736:	e78a      	b.n	800064e <__gnu_unwind_pr_common+0x32>
 8000738:	6823      	ldr	r3, [r4, #0]
 800073a:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 800073e:	f1b8 0f00 	cmp.w	r8, #0
 8000742:	d145      	bne.n	80007d0 <__gnu_unwind_pr_common+0x1b4>
 8000744:	b128      	cbz	r0, 8000752 <__gnu_unwind_pr_common+0x136>
 8000746:	9a02      	ldr	r2, [sp, #8]
 8000748:	2a00      	cmp	r2, #0
 800074a:	d05c      	beq.n	8000806 <__gnu_unwind_pr_common+0x1ea>
 800074c:	f1bb 0f00 	cmp.w	fp, #0
 8000750:	d074      	beq.n	800083c <__gnu_unwind_pr_common+0x220>
 8000752:	2b00      	cmp	r3, #0
 8000754:	da00      	bge.n	8000758 <__gnu_unwind_pr_common+0x13c>
 8000756:	3404      	adds	r4, #4
 8000758:	f10b 0b01 	add.w	fp, fp, #1
 800075c:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000760:	e7c0      	b.n	80006e4 <__gnu_unwind_pr_common+0xc8>
 8000762:	f1b8 0f00 	cmp.w	r8, #0
 8000766:	d119      	bne.n	800079c <__gnu_unwind_pr_common+0x180>
 8000768:	b1b0      	cbz	r0, 8000798 <__gnu_unwind_pr_common+0x17c>
 800076a:	6863      	ldr	r3, [r4, #4]
 800076c:	6822      	ldr	r2, [r4, #0]
 800076e:	1c99      	adds	r1, r3, #2
 8000770:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000774:	f43f af7c 	beq.w	8000670 <__gnu_unwind_pr_common+0x54>
 8000778:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800077c:	3301      	adds	r3, #1
 800077e:	9104      	str	r1, [sp, #16]
 8000780:	f000 8091 	beq.w	80008a6 <__gnu_unwind_pr_common+0x28a>
 8000784:	1d20      	adds	r0, r4, #4
 8000786:	f7ff fdb7 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 800078a:	ab04      	add	r3, sp, #16
 800078c:	4601      	mov	r1, r0
 800078e:	4628      	mov	r0, r5
 8000790:	f002 fa60 	bl	8002c54 <__cxa_type_match>
 8000794:	2800      	cmp	r0, #0
 8000796:	d15c      	bne.n	8000852 <__gnu_unwind_pr_common+0x236>
 8000798:	3408      	adds	r4, #8
 800079a:	e7a3      	b.n	80006e4 <__gnu_unwind_pr_common+0xc8>
 800079c:	210d      	movs	r1, #13
 800079e:	4638      	mov	r0, r7
 80007a0:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007a4:	f7ff fec8 	bl	8000538 <_Unwind_GetGR>
 80007a8:	4581      	cmp	r9, r0
 80007aa:	d1f5      	bne.n	8000798 <__gnu_unwind_pr_common+0x17c>
 80007ac:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007ae:	429c      	cmp	r4, r3
 80007b0:	d1f2      	bne.n	8000798 <__gnu_unwind_pr_common+0x17c>
 80007b2:	4620      	mov	r0, r4
 80007b4:	f7ff fcd4 	bl	8000160 <selfrel_offset31>
 80007b8:	210f      	movs	r1, #15
 80007ba:	4602      	mov	r2, r0
 80007bc:	4638      	mov	r0, r7
 80007be:	f7ff fee1 	bl	8000584 <_Unwind_SetGR>
 80007c2:	4638      	mov	r0, r7
 80007c4:	462a      	mov	r2, r5
 80007c6:	2100      	movs	r1, #0
 80007c8:	f7ff fedc 	bl	8000584 <_Unwind_SetGR>
 80007cc:	2007      	movs	r0, #7
 80007ce:	e750      	b.n	8000672 <__gnu_unwind_pr_common+0x56>
 80007d0:	210d      	movs	r1, #13
 80007d2:	4638      	mov	r0, r7
 80007d4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80007d8:	f7ff feae 	bl	8000538 <_Unwind_GetGR>
 80007dc:	4581      	cmp	r9, r0
 80007de:	d001      	beq.n	80007e4 <__gnu_unwind_pr_common+0x1c8>
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	e7b6      	b.n	8000752 <__gnu_unwind_pr_common+0x136>
 80007e4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80007e6:	429c      	cmp	r4, r3
 80007e8:	d1fa      	bne.n	80007e0 <__gnu_unwind_pr_common+0x1c4>
 80007ea:	2304      	movs	r3, #4
 80007ec:	2200      	movs	r2, #0
 80007ee:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 80007f2:	18e3      	adds	r3, r4, r3
 80007f4:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 80007f8:	636b      	str	r3, [r5, #52]	; 0x34
 80007fa:	6823      	ldr	r3, [r4, #0]
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	db5a      	blt.n	80008b6 <__gnu_unwind_pr_common+0x29a>
 8000800:	2301      	movs	r3, #1
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	e7a8      	b.n	8000758 <__gnu_unwind_pr_common+0x13c>
 8000806:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800080a:	f8cd 800c 	str.w	r8, [sp, #12]
 800080e:	4691      	mov	r9, r2
 8000810:	46b0      	mov	r8, r6
 8000812:	f104 0a04 	add.w	sl, r4, #4
 8000816:	461e      	mov	r6, r3
 8000818:	e00e      	b.n	8000838 <__gnu_unwind_pr_common+0x21c>
 800081a:	4650      	mov	r0, sl
 800081c:	9604      	str	r6, [sp, #16]
 800081e:	f7ff fd6b 	bl	80002f8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000822:	2200      	movs	r2, #0
 8000824:	4601      	mov	r1, r0
 8000826:	ab04      	add	r3, sp, #16
 8000828:	4628      	mov	r0, r5
 800082a:	f109 0901 	add.w	r9, r9, #1
 800082e:	f10a 0a04 	add.w	sl, sl, #4
 8000832:	f002 fa0f 	bl	8002c54 <__cxa_type_match>
 8000836:	b9e8      	cbnz	r0, 8000874 <__gnu_unwind_pr_common+0x258>
 8000838:	45d9      	cmp	r9, fp
 800083a:	d1ee      	bne.n	800081a <__gnu_unwind_pr_common+0x1fe>
 800083c:	210d      	movs	r1, #13
 800083e:	4638      	mov	r0, r7
 8000840:	f7ff fe7a 	bl	8000538 <_Unwind_GetGR>
 8000844:	4603      	mov	r3, r0
 8000846:	9a04      	ldr	r2, [sp, #16]
 8000848:	2006      	movs	r0, #6
 800084a:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 800084e:	622b      	str	r3, [r5, #32]
 8000850:	e70f      	b.n	8000672 <__gnu_unwind_pr_common+0x56>
 8000852:	4681      	mov	r9, r0
 8000854:	210d      	movs	r1, #13
 8000856:	4638      	mov	r0, r7
 8000858:	f7ff fe6e 	bl	8000538 <_Unwind_GetGR>
 800085c:	f1b9 0f02 	cmp.w	r9, #2
 8000860:	6228      	str	r0, [r5, #32]
 8000862:	d125      	bne.n	80008b0 <__gnu_unwind_pr_common+0x294>
 8000864:	462b      	mov	r3, r5
 8000866:	9a04      	ldr	r2, [sp, #16]
 8000868:	f843 2f2c 	str.w	r2, [r3, #44]!
 800086c:	626b      	str	r3, [r5, #36]	; 0x24
 800086e:	2006      	movs	r0, #6
 8000870:	62ac      	str	r4, [r5, #40]	; 0x28
 8000872:	e6fe      	b.n	8000672 <__gnu_unwind_pr_common+0x56>
 8000874:	4646      	mov	r6, r8
 8000876:	6823      	ldr	r3, [r4, #0]
 8000878:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800087c:	e769      	b.n	8000752 <__gnu_unwind_pr_common+0x136>
 800087e:	4620      	mov	r0, r4
 8000880:	f7ff fc6e 	bl	8000160 <selfrel_offset31>
 8000884:	4602      	mov	r2, r0
 8000886:	3404      	adds	r4, #4
 8000888:	63ac      	str	r4, [r5, #56]	; 0x38
 800088a:	4628      	mov	r0, r5
 800088c:	4614      	mov	r4, r2
 800088e:	f002 fa3f 	bl	8002d10 <__cxa_begin_cleanup>
 8000892:	2800      	cmp	r0, #0
 8000894:	f43f aeec 	beq.w	8000670 <__gnu_unwind_pr_common+0x54>
 8000898:	4638      	mov	r0, r7
 800089a:	4622      	mov	r2, r4
 800089c:	210f      	movs	r1, #15
 800089e:	f7ff fe71 	bl	8000584 <_Unwind_SetGR>
 80008a2:	2007      	movs	r0, #7
 80008a4:	e6e5      	b.n	8000672 <__gnu_unwind_pr_common+0x56>
 80008a6:	210d      	movs	r1, #13
 80008a8:	4638      	mov	r0, r7
 80008aa:	f7ff fe45 	bl	8000538 <_Unwind_GetGR>
 80008ae:	6228      	str	r0, [r5, #32]
 80008b0:	9b04      	ldr	r3, [sp, #16]
 80008b2:	626b      	str	r3, [r5, #36]	; 0x24
 80008b4:	e7db      	b.n	800086e <__gnu_unwind_pr_common+0x252>
 80008b6:	f10b 0001 	add.w	r0, fp, #1
 80008ba:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80008be:	e779      	b.n	80007b4 <__gnu_unwind_pr_common+0x198>
 80008c0:	0800388d 	.word	0x0800388d

080008c4 <__aeabi_unwind_cpp_pr0>:
 80008c4:	2300      	movs	r3, #0
 80008c6:	e6a9      	b.n	800061c <__gnu_unwind_pr_common>

080008c8 <__aeabi_unwind_cpp_pr1>:
 80008c8:	2301      	movs	r3, #1
 80008ca:	e6a7      	b.n	800061c <__gnu_unwind_pr_common>

080008cc <__aeabi_unwind_cpp_pr2>:
 80008cc:	2302      	movs	r3, #2
 80008ce:	e6a5      	b.n	800061c <__gnu_unwind_pr_common>

080008d0 <_Unwind_VRS_Pop>:
 80008d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008d4:	4606      	mov	r6, r0
 80008d6:	4615      	mov	r5, r2
 80008d8:	461c      	mov	r4, r3
 80008da:	b0c3      	sub	sp, #268	; 0x10c
 80008dc:	2904      	cmp	r1, #4
 80008de:	f200 80b8 	bhi.w	8000a52 <_Unwind_VRS_Pop+0x182>
 80008e2:	e8df f001 	tbb	[pc, r1]
 80008e6:	569c      	.short	0x569c
 80008e8:	2db6      	.short	0x2db6
 80008ea:	03          	.byte	0x03
 80008eb:	00          	.byte	0x00
 80008ec:	2c00      	cmp	r4, #0
 80008ee:	f040 80b0 	bne.w	8000a52 <_Unwind_VRS_Pop+0x182>
 80008f2:	2a10      	cmp	r2, #16
 80008f4:	f200 80ad 	bhi.w	8000a52 <_Unwind_VRS_Pop+0x182>
 80008f8:	6803      	ldr	r3, [r0, #0]
 80008fa:	06d8      	lsls	r0, r3, #27
 80008fc:	f100 80f1 	bmi.w	8000ae2 <_Unwind_VRS_Pop+0x212>
 8000900:	af20      	add	r7, sp, #128	; 0x80
 8000902:	4638      	mov	r0, r7
 8000904:	f000 f990 	bl	8000c28 <__gnu_Unwind_Save_WMMXC>
 8000908:	2401      	movs	r4, #1
 800090a:	4638      	mov	r0, r7
 800090c:	2300      	movs	r3, #0
 800090e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000910:	fa04 f203 	lsl.w	r2, r4, r3
 8000914:	422a      	tst	r2, r5
 8000916:	f103 0301 	add.w	r3, r3, #1
 800091a:	d005      	beq.n	8000928 <_Unwind_VRS_Pop+0x58>
 800091c:	460a      	mov	r2, r1
 800091e:	f852 cb04 	ldr.w	ip, [r2], #4
 8000922:	4611      	mov	r1, r2
 8000924:	f8c0 c000 	str.w	ip, [r0]
 8000928:	2b04      	cmp	r3, #4
 800092a:	f100 0004 	add.w	r0, r0, #4
 800092e:	d1ef      	bne.n	8000910 <_Unwind_VRS_Pop+0x40>
 8000930:	4638      	mov	r0, r7
 8000932:	63b1      	str	r1, [r6, #56]	; 0x38
 8000934:	f000 f96e 	bl	8000c14 <__gnu_Unwind_Restore_WMMXC>
 8000938:	2000      	movs	r0, #0
 800093a:	b043      	add	sp, #268	; 0x10c
 800093c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000940:	2c03      	cmp	r4, #3
 8000942:	f040 8086 	bne.w	8000a52 <_Unwind_VRS_Pop+0x182>
 8000946:	b294      	uxth	r4, r2
 8000948:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 800094c:	2b10      	cmp	r3, #16
 800094e:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000952:	d87e      	bhi.n	8000a52 <_Unwind_VRS_Pop+0x182>
 8000954:	6803      	ldr	r3, [r0, #0]
 8000956:	071f      	lsls	r7, r3, #28
 8000958:	f100 80cb 	bmi.w	8000af2 <_Unwind_VRS_Pop+0x222>
 800095c:	af20      	add	r7, sp, #128	; 0x80
 800095e:	4638      	mov	r0, r7
 8000960:	f000 f936 	bl	8000bd0 <__gnu_Unwind_Save_WMMXD>
 8000964:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000966:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 800096a:	b154      	cbz	r4, 8000982 <_Unwind_VRS_Pop+0xb2>
 800096c:	460b      	mov	r3, r1
 800096e:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000972:	1ad0      	subs	r0, r2, r3
 8000974:	00e4      	lsls	r4, r4, #3
 8000976:	581d      	ldr	r5, [r3, r0]
 8000978:	f843 5b04 	str.w	r5, [r3], #4
 800097c:	428b      	cmp	r3, r1
 800097e:	d1fa      	bne.n	8000976 <_Unwind_VRS_Pop+0xa6>
 8000980:	4422      	add	r2, r4
 8000982:	4638      	mov	r0, r7
 8000984:	63b2      	str	r2, [r6, #56]	; 0x38
 8000986:	f000 f901 	bl	8000b8c <__gnu_Unwind_Restore_WMMXD>
 800098a:	2000      	movs	r0, #0
 800098c:	b043      	add	sp, #268	; 0x10c
 800098e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000992:	2c01      	cmp	r4, #1
 8000994:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000998:	b295      	uxth	r5, r2
 800099a:	d056      	beq.n	8000a4a <_Unwind_VRS_Pop+0x17a>
 800099c:	2c05      	cmp	r4, #5
 800099e:	d158      	bne.n	8000a52 <_Unwind_VRS_Pop+0x182>
 80009a0:	eb08 0905 	add.w	r9, r8, r5
 80009a4:	f1b9 0f20 	cmp.w	r9, #32
 80009a8:	d853      	bhi.n	8000a52 <_Unwind_VRS_Pop+0x182>
 80009aa:	f1b8 0f0f 	cmp.w	r8, #15
 80009ae:	d973      	bls.n	8000a98 <_Unwind_VRS_Pop+0x1c8>
 80009b0:	46a9      	mov	r9, r5
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	f040 8084 	bne.w	8000ac0 <_Unwind_VRS_Pop+0x1f0>
 80009b8:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80009ba:	b365      	cbz	r5, 8000a16 <_Unwind_VRS_Pop+0x146>
 80009bc:	af20      	add	r7, sp, #128	; 0x80
 80009be:	f04f 0900 	mov.w	r9, #0
 80009c2:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80009c6:	3f04      	subs	r7, #4
 80009c8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80009cc:	f853 1b04 	ldr.w	r1, [r3], #4
 80009d0:	42ab      	cmp	r3, r5
 80009d2:	f847 1f04 	str.w	r1, [r7, #4]!
 80009d6:	d1f9      	bne.n	80009cc <_Unwind_VRS_Pop+0xfc>
 80009d8:	f1b9 0f00 	cmp.w	r9, #0
 80009dc:	d00f      	beq.n	80009fe <_Unwind_VRS_Pop+0x12e>
 80009de:	466f      	mov	r7, sp
 80009e0:	4641      	mov	r1, r8
 80009e2:	2910      	cmp	r1, #16
 80009e4:	bf38      	it	cc
 80009e6:	2110      	movcc	r1, #16
 80009e8:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 80009ec:	3984      	subs	r1, #132	; 0x84
 80009ee:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 80009f2:	f853 0b04 	ldr.w	r0, [r3], #4
 80009f6:	42ab      	cmp	r3, r5
 80009f8:	f841 0f04 	str.w	r0, [r1, #4]!
 80009fc:	d1f9      	bne.n	80009f2 <_Unwind_VRS_Pop+0x122>
 80009fe:	2c01      	cmp	r4, #1
 8000a00:	d07f      	beq.n	8000b02 <_Unwind_VRS_Pop+0x232>
 8000a02:	f1b8 0f0f 	cmp.w	r8, #15
 8000a06:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a08:	d942      	bls.n	8000a90 <_Unwind_VRS_Pop+0x1c0>
 8000a0a:	f1b9 0f00 	cmp.w	r9, #0
 8000a0e:	d002      	beq.n	8000a16 <_Unwind_VRS_Pop+0x146>
 8000a10:	4668      	mov	r0, sp
 8000a12:	f000 f8b3 	bl	8000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000a16:	2000      	movs	r0, #0
 8000a18:	b043      	add	sp, #268	; 0x10c
 8000a1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a1e:	b9c4      	cbnz	r4, 8000a52 <_Unwind_VRS_Pop+0x182>
 8000a20:	4623      	mov	r3, r4
 8000a22:	2401      	movs	r4, #1
 8000a24:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a26:	1d37      	adds	r7, r6, #4
 8000a28:	b2a8      	uxth	r0, r5
 8000a2a:	fa04 f103 	lsl.w	r1, r4, r3
 8000a2e:	4201      	tst	r1, r0
 8000a30:	bf1c      	itt	ne
 8000a32:	f852 1b04 	ldrne.w	r1, [r2], #4
 8000a36:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	2b10      	cmp	r3, #16
 8000a3e:	d1f4      	bne.n	8000a2a <_Unwind_VRS_Pop+0x15a>
 8000a40:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8000a44:	d1e7      	bne.n	8000a16 <_Unwind_VRS_Pop+0x146>
 8000a46:	63b2      	str	r2, [r6, #56]	; 0x38
 8000a48:	e004      	b.n	8000a54 <_Unwind_VRS_Pop+0x184>
 8000a4a:	eb08 0305 	add.w	r3, r8, r5
 8000a4e:	2b10      	cmp	r3, #16
 8000a50:	d903      	bls.n	8000a5a <_Unwind_VRS_Pop+0x18a>
 8000a52:	2002      	movs	r0, #2
 8000a54:	b043      	add	sp, #268	; 0x10c
 8000a56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000a5a:	f1b8 0f0f 	cmp.w	r8, #15
 8000a5e:	d8f8      	bhi.n	8000a52 <_Unwind_VRS_Pop+0x182>
 8000a60:	6833      	ldr	r3, [r6, #0]
 8000a62:	07da      	lsls	r2, r3, #31
 8000a64:	d506      	bpl.n	8000a74 <_Unwind_VRS_Pop+0x1a4>
 8000a66:	4630      	mov	r0, r6
 8000a68:	f023 0303 	bic.w	r3, r3, #3
 8000a6c:	f840 3b48 	str.w	r3, [r0], #72
 8000a70:	f000 f878 	bl	8000b64 <__gnu_Unwind_Save_VFP>
 8000a74:	af20      	add	r7, sp, #128	; 0x80
 8000a76:	4638      	mov	r0, r7
 8000a78:	f000 f874 	bl	8000b64 <__gnu_Unwind_Save_VFP>
 8000a7c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d19d      	bne.n	80009be <_Unwind_VRS_Pop+0xee>
 8000a82:	461d      	mov	r5, r3
 8000a84:	3504      	adds	r5, #4
 8000a86:	4638      	mov	r0, r7
 8000a88:	63b5      	str	r5, [r6, #56]	; 0x38
 8000a8a:	f000 f867 	bl	8000b5c <__gnu_Unwind_Restore_VFP>
 8000a8e:	e7c2      	b.n	8000a16 <_Unwind_VRS_Pop+0x146>
 8000a90:	a820      	add	r0, sp, #128	; 0x80
 8000a92:	f000 f86b 	bl	8000b6c <__gnu_Unwind_Restore_VFP_D>
 8000a96:	e7b8      	b.n	8000a0a <_Unwind_VRS_Pop+0x13a>
 8000a98:	f1b9 0f10 	cmp.w	r9, #16
 8000a9c:	d93f      	bls.n	8000b1e <_Unwind_VRS_Pop+0x24e>
 8000a9e:	f1a9 0910 	sub.w	r9, r9, #16
 8000aa2:	6833      	ldr	r3, [r6, #0]
 8000aa4:	07d9      	lsls	r1, r3, #31
 8000aa6:	d508      	bpl.n	8000aba <_Unwind_VRS_Pop+0x1ea>
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f023 0301 	bic.w	r3, r3, #1
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	f840 3b48 	str.w	r3, [r0], #72
 8000ab6:	f000 f85d 	bl	8000b74 <__gnu_Unwind_Save_VFP_D>
 8000aba:	f1b9 0f00 	cmp.w	r9, #0
 8000abe:	d031      	beq.n	8000b24 <_Unwind_VRS_Pop+0x254>
 8000ac0:	6833      	ldr	r3, [r6, #0]
 8000ac2:	075a      	lsls	r2, r3, #29
 8000ac4:	d41f      	bmi.n	8000b06 <_Unwind_VRS_Pop+0x236>
 8000ac6:	f1b8 0f0f 	cmp.w	r8, #15
 8000aca:	d924      	bls.n	8000b16 <_Unwind_VRS_Pop+0x246>
 8000acc:	466f      	mov	r7, sp
 8000ace:	f1c8 0510 	rsb	r5, r8, #16
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	f000 f856 	bl	8000b84 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000ad8:	2d00      	cmp	r5, #0
 8000ada:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000adc:	dd80      	ble.n	80009e0 <_Unwind_VRS_Pop+0x110>
 8000ade:	af20      	add	r7, sp, #128	; 0x80
 8000ae0:	e76f      	b.n	80009c2 <_Unwind_VRS_Pop+0xf2>
 8000ae2:	f023 0310 	bic.w	r3, r3, #16
 8000ae6:	6033      	str	r3, [r6, #0]
 8000ae8:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8000aec:	f000 f89c 	bl	8000c28 <__gnu_Unwind_Save_WMMXC>
 8000af0:	e706      	b.n	8000900 <_Unwind_VRS_Pop+0x30>
 8000af2:	f023 0308 	bic.w	r3, r3, #8
 8000af6:	6003      	str	r3, [r0, #0]
 8000af8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8000afc:	f000 f868 	bl	8000bd0 <__gnu_Unwind_Save_WMMXD>
 8000b00:	e72c      	b.n	800095c <_Unwind_VRS_Pop+0x8c>
 8000b02:	af20      	add	r7, sp, #128	; 0x80
 8000b04:	e7be      	b.n	8000a84 <_Unwind_VRS_Pop+0x1b4>
 8000b06:	4630      	mov	r0, r6
 8000b08:	f023 0304 	bic.w	r3, r3, #4
 8000b0c:	f840 3bd0 	str.w	r3, [r0], #208
 8000b10:	f000 f838 	bl	8000b84 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000b14:	e7d7      	b.n	8000ac6 <_Unwind_VRS_Pop+0x1f6>
 8000b16:	a820      	add	r0, sp, #128	; 0x80
 8000b18:	f000 f82c 	bl	8000b74 <__gnu_Unwind_Save_VFP_D>
 8000b1c:	e7d6      	b.n	8000acc <_Unwind_VRS_Pop+0x1fc>
 8000b1e:	f04f 0900 	mov.w	r9, #0
 8000b22:	e7be      	b.n	8000aa2 <_Unwind_VRS_Pop+0x1d2>
 8000b24:	f1b8 0f0f 	cmp.w	r8, #15
 8000b28:	f63f af46 	bhi.w	80009b8 <_Unwind_VRS_Pop+0xe8>
 8000b2c:	af20      	add	r7, sp, #128	; 0x80
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f000 f820 	bl	8000b74 <__gnu_Unwind_Save_VFP_D>
 8000b34:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	f47f af41 	bne.w	80009be <_Unwind_VRS_Pop+0xee>
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	f000 f815 	bl	8000b6c <__gnu_Unwind_Restore_VFP_D>
 8000b42:	e768      	b.n	8000a16 <_Unwind_VRS_Pop+0x146>

08000b44 <__restore_core_regs>:
 8000b44:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000b48:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000b4c:	469c      	mov	ip, r3
 8000b4e:	46a6      	mov	lr, r4
 8000b50:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000b54:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000b58:	46e5      	mov	sp, ip
 8000b5a:	bd00      	pop	{pc}

08000b5c <__gnu_Unwind_Restore_VFP>:
 8000b5c:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__gnu_Unwind_Save_VFP>:
 8000b64:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__gnu_Unwind_Restore_VFP_D>:
 8000b6c:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__gnu_Unwind_Save_VFP_D>:
 8000b74:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000b7c:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop

08000b84 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000b84:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__gnu_Unwind_Restore_WMMXD>:
 8000b8c:	ecf0 0102 	ldfe	f0, [r0], #8
 8000b90:	ecf0 1102 	ldfe	f1, [r0], #8
 8000b94:	ecf0 2102 	ldfe	f2, [r0], #8
 8000b98:	ecf0 3102 	ldfe	f3, [r0], #8
 8000b9c:	ecf0 4102 	ldfe	f4, [r0], #8
 8000ba0:	ecf0 5102 	ldfe	f5, [r0], #8
 8000ba4:	ecf0 6102 	ldfe	f6, [r0], #8
 8000ba8:	ecf0 7102 	ldfe	f7, [r0], #8
 8000bac:	ecf0 8102 	ldfp	f0, [r0], #8
 8000bb0:	ecf0 9102 	ldfp	f1, [r0], #8
 8000bb4:	ecf0 a102 	ldfp	f2, [r0], #8
 8000bb8:	ecf0 b102 	ldfp	f3, [r0], #8
 8000bbc:	ecf0 c102 	ldfp	f4, [r0], #8
 8000bc0:	ecf0 d102 	ldfp	f5, [r0], #8
 8000bc4:	ecf0 e102 	ldfp	f6, [r0], #8
 8000bc8:	ecf0 f102 	ldfp	f7, [r0], #8
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <__gnu_Unwind_Save_WMMXD>:
 8000bd0:	ece0 0102 	stfe	f0, [r0], #8
 8000bd4:	ece0 1102 	stfe	f1, [r0], #8
 8000bd8:	ece0 2102 	stfe	f2, [r0], #8
 8000bdc:	ece0 3102 	stfe	f3, [r0], #8
 8000be0:	ece0 4102 	stfe	f4, [r0], #8
 8000be4:	ece0 5102 	stfe	f5, [r0], #8
 8000be8:	ece0 6102 	stfe	f6, [r0], #8
 8000bec:	ece0 7102 	stfe	f7, [r0], #8
 8000bf0:	ece0 8102 	stfp	f0, [r0], #8
 8000bf4:	ece0 9102 	stfp	f1, [r0], #8
 8000bf8:	ece0 a102 	stfp	f2, [r0], #8
 8000bfc:	ece0 b102 	stfp	f3, [r0], #8
 8000c00:	ece0 c102 	stfp	f4, [r0], #8
 8000c04:	ece0 d102 	stfp	f5, [r0], #8
 8000c08:	ece0 e102 	stfp	f6, [r0], #8
 8000c0c:	ece0 f102 	stfp	f7, [r0], #8
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <__gnu_Unwind_Restore_WMMXC>:
 8000c14:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8000c18:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8000c1c:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8000c20:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__gnu_Unwind_Save_WMMXC>:
 8000c28:	fca0 8101 	stc2	1, cr8, [r0], #4
 8000c2c:	fca0 9101 	stc2	1, cr9, [r0], #4
 8000c30:	fca0 a101 	stc2	1, cr10, [r0], #4
 8000c34:	fca0 b101 	stc2	1, cr11, [r0], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop

08000c3c <_Unwind_RaiseException>:
 8000c3c:	46ec      	mov	ip, sp
 8000c3e:	b500      	push	{lr}
 8000c40:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c48:	f04f 0300 	mov.w	r3, #0
 8000c4c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c50:	a901      	add	r1, sp, #4
 8000c52:	f7ff fbe7 	bl	8000424 <__gnu_Unwind_RaiseException>
 8000c56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c5a:	b012      	add	sp, #72	; 0x48
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop

08000c60 <_Unwind_Resume>:
 8000c60:	46ec      	mov	ip, sp
 8000c62:	b500      	push	{lr}
 8000c64:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c6c:	f04f 0300 	mov.w	r3, #0
 8000c70:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c74:	a901      	add	r1, sp, #4
 8000c76:	f7ff fc13 	bl	80004a0 <__gnu_Unwind_Resume>
 8000c7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000c7e:	b012      	add	sp, #72	; 0x48
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop

08000c84 <_Unwind_Resume_or_Rethrow>:
 8000c84:	46ec      	mov	ip, sp
 8000c86:	b500      	push	{lr}
 8000c88:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000c8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000c90:	f04f 0300 	mov.w	r3, #0
 8000c94:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000c98:	a901      	add	r1, sp, #4
 8000c9a:	f7ff fc23 	bl	80004e4 <__gnu_Unwind_Resume_or_Rethrow>
 8000c9e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000ca2:	b012      	add	sp, #72	; 0x48
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <_Unwind_ForcedUnwind>:
 8000ca8:	46ec      	mov	ip, sp
 8000caa:	b500      	push	{lr}
 8000cac:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cb0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000cbc:	ab01      	add	r3, sp, #4
 8000cbe:	f7ff fbe5 	bl	800048c <__gnu_Unwind_ForcedUnwind>
 8000cc2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cc6:	b012      	add	sp, #72	; 0x48
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop

08000ccc <_Unwind_Backtrace>:
 8000ccc:	46ec      	mov	ip, sp
 8000cce:	b500      	push	{lr}
 8000cd0:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000cd4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8000ce0:	aa01      	add	r2, sp, #4
 8000ce2:	f7ff fc5b 	bl	800059c <__gnu_Unwind_Backtrace>
 8000ce6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8000cea:	b012      	add	sp, #72	; 0x48
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop

08000cf0 <next_unwind_byte>:
 8000cf0:	7a02      	ldrb	r2, [r0, #8]
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b97a      	cbnz	r2, 8000d16 <next_unwind_byte+0x26>
 8000cf6:	7a42      	ldrb	r2, [r0, #9]
 8000cf8:	b1a2      	cbz	r2, 8000d24 <next_unwind_byte+0x34>
 8000cfa:	f04f 0c03 	mov.w	ip, #3
 8000cfe:	6841      	ldr	r1, [r0, #4]
 8000d00:	3a01      	subs	r2, #1
 8000d02:	7242      	strb	r2, [r0, #9]
 8000d04:	6808      	ldr	r0, [r1, #0]
 8000d06:	1d0a      	adds	r2, r1, #4
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	0202      	lsls	r2, r0, #8
 8000d0c:	f883 c008 	strb.w	ip, [r3, #8]
 8000d10:	0e00      	lsrs	r0, r0, #24
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	4770      	bx	lr
 8000d16:	6800      	ldr	r0, [r0, #0]
 8000d18:	3a01      	subs	r2, #1
 8000d1a:	721a      	strb	r2, [r3, #8]
 8000d1c:	0202      	lsls	r2, r0, #8
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	0e00      	lsrs	r0, r0, #24
 8000d22:	4770      	bx	lr
 8000d24:	20b0      	movs	r0, #176	; 0xb0
 8000d26:	4770      	bx	lr

08000d28 <_Unwind_GetGR.constprop.0>:
 8000d28:	2300      	movs	r3, #0
 8000d2a:	b500      	push	{lr}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	a903      	add	r1, sp, #12
 8000d30:	9100      	str	r1, [sp, #0]
 8000d32:	220c      	movs	r2, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff fbe7 	bl	8000508 <_Unwind_VRS_Get>
 8000d3a:	9803      	ldr	r0, [sp, #12]
 8000d3c:	b005      	add	sp, #20
 8000d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d42:	bf00      	nop

08000d44 <unwind_UCB_from_context>:
 8000d44:	e7f0      	b.n	8000d28 <_Unwind_GetGR.constprop.0>
 8000d46:	bf00      	nop

08000d48 <__gnu_unwind_execute>:
 8000d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d4c:	f04f 0800 	mov.w	r8, #0
 8000d50:	4605      	mov	r5, r0
 8000d52:	460e      	mov	r6, r1
 8000d54:	b085      	sub	sp, #20
 8000d56:	4630      	mov	r0, r6
 8000d58:	f7ff ffca 	bl	8000cf0 <next_unwind_byte>
 8000d5c:	28b0      	cmp	r0, #176	; 0xb0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	f000 80ba 	beq.w	8000ed8 <__gnu_unwind_execute+0x190>
 8000d64:	0607      	lsls	r7, r0, #24
 8000d66:	d520      	bpl.n	8000daa <__gnu_unwind_execute+0x62>
 8000d68:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8000d6c:	2b80      	cmp	r3, #128	; 0x80
 8000d6e:	d04d      	beq.n	8000e0c <__gnu_unwind_execute+0xc4>
 8000d70:	2b90      	cmp	r3, #144	; 0x90
 8000d72:	d036      	beq.n	8000de2 <__gnu_unwind_execute+0x9a>
 8000d74:	2ba0      	cmp	r3, #160	; 0xa0
 8000d76:	d060      	beq.n	8000e3a <__gnu_unwind_execute+0xf2>
 8000d78:	2bb0      	cmp	r3, #176	; 0xb0
 8000d7a:	d073      	beq.n	8000e64 <__gnu_unwind_execute+0x11c>
 8000d7c:	2bc0      	cmp	r3, #192	; 0xc0
 8000d7e:	f000 808a 	beq.w	8000e96 <__gnu_unwind_execute+0x14e>
 8000d82:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000d86:	2bd0      	cmp	r3, #208	; 0xd0
 8000d88:	d10b      	bne.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000d8a:	f000 0207 	and.w	r2, r0, #7
 8000d8e:	3201      	adds	r2, #1
 8000d90:	2305      	movs	r3, #5
 8000d92:	2101      	movs	r1, #1
 8000d94:	4628      	mov	r0, r5
 8000d96:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000d9a:	f7ff fd99 	bl	80008d0 <_Unwind_VRS_Pop>
 8000d9e:	2800      	cmp	r0, #0
 8000da0:	d0d9      	beq.n	8000d56 <__gnu_unwind_execute+0xe>
 8000da2:	2009      	movs	r0, #9
 8000da4:	b005      	add	sp, #20
 8000da6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000daa:	0083      	lsls	r3, r0, #2
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	1d1f      	adds	r7, r3, #4
 8000db0:	2300      	movs	r3, #0
 8000db2:	f10d 090c 	add.w	r9, sp, #12
 8000db6:	4619      	mov	r1, r3
 8000db8:	220d      	movs	r2, #13
 8000dba:	4628      	mov	r0, r5
 8000dbc:	f8cd 9000 	str.w	r9, [sp]
 8000dc0:	f7ff fba2 	bl	8000508 <_Unwind_VRS_Get>
 8000dc4:	9b03      	ldr	r3, [sp, #12]
 8000dc6:	0660      	lsls	r0, r4, #25
 8000dc8:	bf4c      	ite	mi
 8000dca:	1bdf      	submi	r7, r3, r7
 8000dcc:	18ff      	addpl	r7, r7, r3
 8000dce:	2300      	movs	r3, #0
 8000dd0:	220d      	movs	r2, #13
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	f8cd 9000 	str.w	r9, [sp]
 8000dda:	9703      	str	r7, [sp, #12]
 8000ddc:	f7ff fbba 	bl	8000554 <_Unwind_VRS_Set>
 8000de0:	e7b9      	b.n	8000d56 <__gnu_unwind_execute+0xe>
 8000de2:	f000 030d 	and.w	r3, r0, #13
 8000de6:	2b0d      	cmp	r3, #13
 8000de8:	d0db      	beq.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000dea:	2300      	movs	r3, #0
 8000dec:	af03      	add	r7, sp, #12
 8000dee:	4619      	mov	r1, r3
 8000df0:	f000 020f 	and.w	r2, r0, #15
 8000df4:	9700      	str	r7, [sp, #0]
 8000df6:	4628      	mov	r0, r5
 8000df8:	f7ff fb86 	bl	8000508 <_Unwind_VRS_Get>
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	220d      	movs	r2, #13
 8000e00:	4628      	mov	r0, r5
 8000e02:	4619      	mov	r1, r3
 8000e04:	9700      	str	r7, [sp, #0]
 8000e06:	f7ff fba5 	bl	8000554 <_Unwind_VRS_Set>
 8000e0a:	e7a4      	b.n	8000d56 <__gnu_unwind_execute+0xe>
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	f7ff ff6f 	bl	8000cf0 <next_unwind_byte>
 8000e12:	0224      	lsls	r4, r4, #8
 8000e14:	4320      	orrs	r0, r4
 8000e16:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8000e1a:	d0c2      	beq.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	0104      	lsls	r4, r0, #4
 8000e20:	4619      	mov	r1, r3
 8000e22:	4628      	mov	r0, r5
 8000e24:	b2a2      	uxth	r2, r4
 8000e26:	f7ff fd53 	bl	80008d0 <_Unwind_VRS_Pop>
 8000e2a:	2800      	cmp	r0, #0
 8000e2c:	d1b9      	bne.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000e2e:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8000e32:	bf18      	it	ne
 8000e34:	f04f 0801 	movne.w	r8, #1
 8000e38:	e78d      	b.n	8000d56 <__gnu_unwind_execute+0xe>
 8000e3a:	43c3      	mvns	r3, r0
 8000e3c:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8000e40:	f003 0307 	and.w	r3, r3, #7
 8000e44:	411a      	asrs	r2, r3
 8000e46:	2300      	movs	r3, #0
 8000e48:	0701      	lsls	r1, r0, #28
 8000e4a:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8000e4e:	bf48      	it	mi
 8000e50:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8000e54:	4628      	mov	r0, r5
 8000e56:	4619      	mov	r1, r3
 8000e58:	f7ff fd3a 	bl	80008d0 <_Unwind_VRS_Pop>
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	f43f af7a 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000e62:	e79e      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000e64:	28b1      	cmp	r0, #177	; 0xb1
 8000e66:	d03c      	beq.n	8000ee2 <__gnu_unwind_execute+0x19a>
 8000e68:	28b2      	cmp	r0, #178	; 0xb2
 8000e6a:	f000 80b0 	beq.w	8000fce <__gnu_unwind_execute+0x286>
 8000e6e:	28b3      	cmp	r0, #179	; 0xb3
 8000e70:	d04a      	beq.n	8000f08 <__gnu_unwind_execute+0x1c0>
 8000e72:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8000e76:	2bb4      	cmp	r3, #180	; 0xb4
 8000e78:	d093      	beq.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f000 0207 	and.w	r2, r0, #7
 8000e80:	441a      	add	r2, r3
 8000e82:	4628      	mov	r0, r5
 8000e84:	4619      	mov	r1, r3
 8000e86:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000e8a:	f7ff fd21 	bl	80008d0 <_Unwind_VRS_Pop>
 8000e8e:	2800      	cmp	r0, #0
 8000e90:	f43f af61 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000e94:	e785      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000e96:	28c6      	cmp	r0, #198	; 0xc6
 8000e98:	d04f      	beq.n	8000f3a <__gnu_unwind_execute+0x1f2>
 8000e9a:	28c7      	cmp	r0, #199	; 0xc7
 8000e9c:	d061      	beq.n	8000f62 <__gnu_unwind_execute+0x21a>
 8000e9e:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8000ea2:	2bc0      	cmp	r3, #192	; 0xc0
 8000ea4:	d070      	beq.n	8000f88 <__gnu_unwind_execute+0x240>
 8000ea6:	28c8      	cmp	r0, #200	; 0xc8
 8000ea8:	d07c      	beq.n	8000fa4 <__gnu_unwind_execute+0x25c>
 8000eaa:	28c9      	cmp	r0, #201	; 0xc9
 8000eac:	f47f af79 	bne.w	8000da2 <__gnu_unwind_execute+0x5a>
 8000eb0:	4630      	mov	r0, r6
 8000eb2:	f7ff ff1d 	bl	8000cf0 <next_unwind_byte>
 8000eb6:	2305      	movs	r3, #5
 8000eb8:	4602      	mov	r2, r0
 8000eba:	2101      	movs	r1, #1
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	0314      	lsls	r4, r2, #12
 8000ec0:	f002 020f 	and.w	r2, r2, #15
 8000ec4:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000ec8:	440a      	add	r2, r1
 8000eca:	4322      	orrs	r2, r4
 8000ecc:	f7ff fd00 	bl	80008d0 <_Unwind_VRS_Pop>
 8000ed0:	2800      	cmp	r0, #0
 8000ed2:	f43f af40 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000ed6:	e764      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000ed8:	f1b8 0f00 	cmp.w	r8, #0
 8000edc:	d01c      	beq.n	8000f18 <__gnu_unwind_execute+0x1d0>
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e760      	b.n	8000da4 <__gnu_unwind_execute+0x5c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	f7ff ff04 	bl	8000cf0 <next_unwind_byte>
 8000ee8:	4602      	mov	r2, r0
 8000eea:	2800      	cmp	r0, #0
 8000eec:	f43f af59 	beq.w	8000da2 <__gnu_unwind_execute+0x5a>
 8000ef0:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000ef4:	f47f af55 	bne.w	8000da2 <__gnu_unwind_execute+0x5a>
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4628      	mov	r0, r5
 8000efc:	f7ff fce8 	bl	80008d0 <_Unwind_VRS_Pop>
 8000f00:	2800      	cmp	r0, #0
 8000f02:	f43f af28 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000f06:	e74c      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	f7ff fef1 	bl	8000cf0 <next_unwind_byte>
 8000f0e:	2301      	movs	r3, #1
 8000f10:	4602      	mov	r2, r0
 8000f12:	4619      	mov	r1, r3
 8000f14:	4628      	mov	r0, r5
 8000f16:	e7d2      	b.n	8000ebe <__gnu_unwind_execute+0x176>
 8000f18:	ac03      	add	r4, sp, #12
 8000f1a:	4643      	mov	r3, r8
 8000f1c:	220e      	movs	r2, #14
 8000f1e:	4641      	mov	r1, r8
 8000f20:	4628      	mov	r0, r5
 8000f22:	9400      	str	r4, [sp, #0]
 8000f24:	f7ff faf0 	bl	8000508 <_Unwind_VRS_Get>
 8000f28:	4643      	mov	r3, r8
 8000f2a:	220f      	movs	r2, #15
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	4641      	mov	r1, r8
 8000f30:	9400      	str	r4, [sp, #0]
 8000f32:	f7ff fb0f 	bl	8000554 <_Unwind_VRS_Set>
 8000f36:	4640      	mov	r0, r8
 8000f38:	e734      	b.n	8000da4 <__gnu_unwind_execute+0x5c>
 8000f3a:	4630      	mov	r0, r6
 8000f3c:	f7ff fed8 	bl	8000cf0 <next_unwind_byte>
 8000f40:	4602      	mov	r2, r0
 8000f42:	2303      	movs	r3, #3
 8000f44:	0314      	lsls	r4, r2, #12
 8000f46:	f002 020f 	and.w	r2, r2, #15
 8000f4a:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8000f4e:	3201      	adds	r2, #1
 8000f50:	4628      	mov	r0, r5
 8000f52:	4619      	mov	r1, r3
 8000f54:	4322      	orrs	r2, r4
 8000f56:	f7ff fcbb 	bl	80008d0 <_Unwind_VRS_Pop>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	f43f aefb 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000f60:	e71f      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000f62:	4630      	mov	r0, r6
 8000f64:	f7ff fec4 	bl	8000cf0 <next_unwind_byte>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	2800      	cmp	r0, #0
 8000f6c:	f43f af19 	beq.w	8000da2 <__gnu_unwind_execute+0x5a>
 8000f70:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8000f74:	f47f af15 	bne.w	8000da2 <__gnu_unwind_execute+0x5a>
 8000f78:	2104      	movs	r1, #4
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	f7ff fca8 	bl	80008d0 <_Unwind_VRS_Pop>
 8000f80:	2800      	cmp	r0, #0
 8000f82:	f43f aee8 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000f86:	e70c      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000f88:	2303      	movs	r3, #3
 8000f8a:	f000 020f 	and.w	r2, r0, #15
 8000f8e:	3201      	adds	r2, #1
 8000f90:	4628      	mov	r0, r5
 8000f92:	4619      	mov	r1, r3
 8000f94:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8000f98:	f7ff fc9a 	bl	80008d0 <_Unwind_VRS_Pop>
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	f43f aeda 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000fa2:	e6fe      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000fa4:	4630      	mov	r0, r6
 8000fa6:	f7ff fea3 	bl	8000cf0 <next_unwind_byte>
 8000faa:	4602      	mov	r2, r0
 8000fac:	2101      	movs	r1, #1
 8000fae:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 8000fb2:	f002 020f 	and.w	r2, r2, #15
 8000fb6:	3410      	adds	r4, #16
 8000fb8:	440a      	add	r2, r1
 8000fba:	2305      	movs	r3, #5
 8000fbc:	4628      	mov	r0, r5
 8000fbe:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8000fc2:	f7ff fc85 	bl	80008d0 <_Unwind_VRS_Pop>
 8000fc6:	2800      	cmp	r0, #0
 8000fc8:	f43f aec5 	beq.w	8000d56 <__gnu_unwind_execute+0xe>
 8000fcc:	e6e9      	b.n	8000da2 <__gnu_unwind_execute+0x5a>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f10d 090c 	add.w	r9, sp, #12
 8000fd4:	220d      	movs	r2, #13
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4628      	mov	r0, r5
 8000fda:	f8cd 9000 	str.w	r9, [sp]
 8000fde:	f7ff fa93 	bl	8000508 <_Unwind_VRS_Get>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	f7ff fe84 	bl	8000cf0 <next_unwind_byte>
 8000fe8:	0602      	lsls	r2, r0, #24
 8000fea:	f04f 0402 	mov.w	r4, #2
 8000fee:	d50c      	bpl.n	800100a <__gnu_unwind_execute+0x2c2>
 8000ff0:	9b03      	ldr	r3, [sp, #12]
 8000ff2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8000ff6:	40a0      	lsls	r0, r4
 8000ff8:	4418      	add	r0, r3
 8000ffa:	9003      	str	r0, [sp, #12]
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f7ff fe77 	bl	8000cf0 <next_unwind_byte>
 8001002:	0603      	lsls	r3, r0, #24
 8001004:	f104 0407 	add.w	r4, r4, #7
 8001008:	d4f2      	bmi.n	8000ff0 <__gnu_unwind_execute+0x2a8>
 800100a:	9b03      	ldr	r3, [sp, #12]
 800100c:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001010:	40a2      	lsls	r2, r4
 8001012:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001016:	441a      	add	r2, r3
 8001018:	2300      	movs	r3, #0
 800101a:	9203      	str	r2, [sp, #12]
 800101c:	4628      	mov	r0, r5
 800101e:	220d      	movs	r2, #13
 8001020:	4619      	mov	r1, r3
 8001022:	f8cd 9000 	str.w	r9, [sp]
 8001026:	f7ff fa95 	bl	8000554 <_Unwind_VRS_Set>
 800102a:	e694      	b.n	8000d56 <__gnu_unwind_execute+0xe>

0800102c <__gnu_unwind_frame>:
 800102c:	460b      	mov	r3, r1
 800102e:	f04f 0c03 	mov.w	ip, #3
 8001032:	b500      	push	{lr}
 8001034:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001036:	4618      	mov	r0, r3
 8001038:	6853      	ldr	r3, [r2, #4]
 800103a:	b085      	sub	sp, #20
 800103c:	3208      	adds	r2, #8
 800103e:	9202      	str	r2, [sp, #8]
 8001040:	a901      	add	r1, sp, #4
 8001042:	0e1a      	lsrs	r2, r3, #24
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	f88d c00c 	strb.w	ip, [sp, #12]
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f88d 200d 	strb.w	r2, [sp, #13]
 8001050:	f7ff fe7a 	bl	8000d48 <__gnu_unwind_execute>
 8001054:	b005      	add	sp, #20
 8001056:	f85d fb04 	ldr.w	pc, [sp], #4
 800105a:	bf00      	nop

0800105c <_Unwind_GetRegionStart>:
 800105c:	b508      	push	{r3, lr}
 800105e:	f7ff fe71 	bl	8000d44 <unwind_UCB_from_context>
 8001062:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001064:	bd08      	pop	{r3, pc}
 8001066:	bf00      	nop

08001068 <_Unwind_GetLanguageSpecificData>:
 8001068:	b508      	push	{r3, lr}
 800106a:	f7ff fe6b 	bl	8000d44 <unwind_UCB_from_context>
 800106e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001070:	79c3      	ldrb	r3, [r0, #7]
 8001072:	3302      	adds	r3, #2
 8001074:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop

0800107c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_>:
				const auto&& expr = (n + end - begin) % n;
				return expr ? expr : n;
			}
		}

		constexpr void push(const Elem& x) noexcept override
 800107c:	b530      	push	{r4, r5, lr}
		{
			if(end == n) end = begin;
 800107e:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74

			buffer[end] = x;
 8001082:	240b      	movs	r4, #11
			if(end == n) end = begin;
 8001084:	2b0a      	cmp	r3, #10
 8001086:	bf08      	it	eq
 8001088:	6782      	streq	r2, [r0, #120]	; 0x78
			buffer[end] = x;
 800108a:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800108c:	680d      	ldr	r5, [r1, #0]
			
			if(end == n - 1) end = 0;
 800108e:	2b09      	cmp	r3, #9
			buffer[end] = x;
 8001090:	fb04 0403 	mla	r4, r4, r3, r0
			if(end == n - 1) end = 0;
 8001094:	bf08      	it	eq
 8001096:	2300      	moveq	r3, #0
			buffer[end] = x;
 8001098:	6065      	str	r5, [r4, #4]
 800109a:	684d      	ldr	r5, [r1, #4]
			else ++end;
 800109c:	bf18      	it	ne
 800109e:	3301      	addne	r3, #1
			buffer[end] = x;
 80010a0:	60a5      	str	r5, [r4, #8]
 80010a2:	890d      	ldrh	r5, [r1, #8]

			if(begin == end)
 80010a4:	429a      	cmp	r2, r3
			buffer[end] = x;
 80010a6:	81a5      	strh	r5, [r4, #12]
 80010a8:	7a89      	ldrb	r1, [r1, #10]
 80010aa:	73a1      	strb	r1, [r4, #14]
 80010ac:	6783      	str	r3, [r0, #120]	; 0x78
			if(begin == end)
 80010ae:	d105      	bne.n	80010bc <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_+0x40>
			{
				if(begin == n - 1) begin = 0;
 80010b0:	2a09      	cmp	r2, #9
 80010b2:	bf0b      	itete	eq
 80010b4:	2300      	moveq	r3, #0
				else ++begin;
 80010b6:	3201      	addne	r2, #1
				if(begin == n - 1) begin = 0;
 80010b8:	6743      	streq	r3, [r0, #116]	; 0x74
				else ++begin;
 80010ba:	6742      	strne	r2, [r0, #116]	; 0x74
			}
		}
 80010bc:	bd30      	pop	{r4, r5, pc}

080010be <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_>:
		constexpr void push(const Elem& x) noexcept override
 80010be:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n) end = begin;
 80010c0:	e9d0 c379 	ldrd	ip, r3, [r0, #484]	; 0x1e4
			buffer[end] = x;
 80010c4:	2418      	movs	r4, #24
			if(end == n) end = begin;
 80010c6:	2b14      	cmp	r3, #20
 80010c8:	bf08      	it	eq
 80010ca:	f8c0 c1e8 	streq.w	ip, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 80010ce:	460d      	mov	r5, r1
			buffer[end] = x;
 80010d0:	f8d0 71e8 	ldr.w	r7, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 80010d4:	4606      	mov	r6, r0
			if(end == n - 1) end = 0;
 80010d6:	2f13      	cmp	r7, #19
			buffer[end] = x;
 80010d8:	fb04 0407 	mla	r4, r4, r7, r0
 80010dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			if(end == n - 1) end = 0;
 80010de:	bf08      	it	eq
 80010e0:	2700      	moveq	r7, #0
			buffer[end] = x;
 80010e2:	f104 0404 	add.w	r4, r4, #4
 80010e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			else ++end;
 80010e8:	bf18      	it	ne
 80010ea:	3701      	addne	r7, #1
			if(begin == end)
 80010ec:	45bc      	cmp	ip, r7
			buffer[end] = x;
 80010ee:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f2:	e884 0003 	stmia.w	r4, {r0, r1}
 80010f6:	f8c6 71e8 	str.w	r7, [r6, #488]	; 0x1e8
			if(begin == end)
 80010fa:	d107      	bne.n	800110c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_+0x4e>
				if(begin == n - 1) begin = 0;
 80010fc:	f1bc 0f13 	cmp.w	ip, #19
 8001100:	bf0c      	ite	eq
 8001102:	2300      	moveq	r3, #0
				else ++begin;
 8001104:	f10c 0301 	addne.w	r3, ip, #1
 8001108:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
		}
 800110c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800110e <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv>:
			if(end == n) return 0;
 800110e:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
 8001112:	2b14      	cmp	r3, #20
 8001114:	d00c      	beq.n	8001130 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv+0x22>
				const auto&& expr = (n + end - begin) % n;
 8001116:	f8d0 01e4 	ldr.w	r0, [r0, #484]	; 0x1e4
 800111a:	3314      	adds	r3, #20
 800111c:	1a18      	subs	r0, r3, r0
 800111e:	2314      	movs	r3, #20
 8001120:	fbb0 f2f3 	udiv	r2, r0, r3
 8001124:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8001128:	2800      	cmp	r0, #0
 800112a:	bf08      	it	eq
 800112c:	4618      	moveq	r0, r3
 800112e:	4770      	bx	lr
			if(end == n) return 0;
 8001130:	2000      	movs	r0, #0
		}
 8001132:	4770      	bx	lr

08001134 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE5clearEv>:
		}

		constexpr void clear() noexcept
		{
			begin = 0;
			end = n;
 8001134:	2200      	movs	r2, #0
 8001136:	2314      	movs	r3, #20
 8001138:	e9c0 2379 	strd	r2, r3, [r0, #484]	; 0x1e4
		}
 800113c:	4770      	bx	lr

0800113e <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv>:
			if(end == n) return 0;
 800113e:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8001140:	2b0a      	cmp	r3, #10
 8001142:	d00b      	beq.n	800115c <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv+0x1e>
				const auto&& expr = (n + end - begin) % n;
 8001144:	6f40      	ldr	r0, [r0, #116]	; 0x74
 8001146:	330a      	adds	r3, #10
 8001148:	1a18      	subs	r0, r3, r0
 800114a:	230a      	movs	r3, #10
 800114c:	fbb0 f2f3 	udiv	r2, r0, r3
 8001150:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8001154:	2800      	cmp	r0, #0
 8001156:	bf08      	it	eq
 8001158:	4618      	moveq	r0, r3
 800115a:	4770      	bx	lr
			if(end == n) return 0;
 800115c:	2000      	movs	r0, #0
		}
 800115e:	4770      	bx	lr

08001160 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE5clearEv>:
			end = n;
 8001160:	2200      	movs	r2, #0
 8001162:	230a      	movs	r3, #10
 8001164:	e9c0 231d 	strd	r2, r3, [r0, #116]	; 0x74
		}
 8001168:	4770      	bx	lr

0800116a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 800116a:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 800116c:	f8d1 e1e8 	ldr.w	lr, [r1, #488]	; 0x1e8
		constexpr std::optional<Elem> pop() noexcept
 8001170:	4684      	mov	ip, r0
			if(end == n)
 8001172:	f1be 0f14 	cmp.w	lr, #20
		constexpr std::optional<Elem> pop() noexcept
 8001176:	460e      	mov	r6, r1
 8001178:	b087      	sub	sp, #28
			if(end == n)
 800117a:	d105      	bne.n	8001188 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x1e>
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 800117c:	2300      	movs	r3, #0
		}
 800117e:	4660      	mov	r0, ip

      template<typename... _Args>
	constexpr
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
	  _M_engaged(true)
 8001180:	f88c 3018 	strb.w	r3, [ip, #24]
 8001184:	b007      	add	sp, #28
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 8001188:	2418      	movs	r4, #24
 800118a:	466d      	mov	r5, sp
 800118c:	f8d1 71e4 	ldr.w	r7, [r1, #484]	; 0x1e4
			if(begin == n - 1) begin = 0;
 8001190:	2f13      	cmp	r7, #19
			Elem ret = buffer[begin];
 8001192:	fb04 1407 	mla	r4, r4, r7, r1
			if(begin == n - 1) begin = 0;
 8001196:	bf08      	it	eq
 8001198:	2700      	moveq	r7, #0
			Elem ret = buffer[begin];
 800119a:	f104 0404 	add.w	r4, r4, #4
 800119e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	e894 0003 	ldmia.w	r4, {r0, r1}
			else ++begin;
 80011a6:	bf18      	it	ne
 80011a8:	3701      	addne	r7, #1
			if(begin == end)
 80011aa:	45be      	cmp	lr, r7
			Elem ret = buffer[begin];
 80011ac:	e885 0003 	stmia.w	r5, {r0, r1}
				end = n;
 80011b0:	bf08      	it	eq
 80011b2:	2314      	moveq	r3, #20
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 80011b4:	4664      	mov	r4, ip
 80011b6:	466d      	mov	r5, sp
 80011b8:	bf08      	it	eq
 80011ba:	f8c6 31e8 	streq.w	r3, [r6, #488]	; 0x1e8
 80011be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c2:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_engaged(true)
 80011c6:	2301      	movs	r3, #1
	    : _M_value(std::forward<_Args>(__args)...)
 80011c8:	e884 0003 	stmia.w	r4, {r0, r1}
 80011cc:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 80011d0:	e7d5      	b.n	800117e <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x14>

080011d2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 80011d2:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 80011d4:	6f8f      	ldr	r7, [r1, #120]	; 0x78
		constexpr std::optional<Elem> pop() noexcept
 80011d6:	4603      	mov	r3, r0
			if(end == n)
 80011d8:	2f0a      	cmp	r7, #10
		constexpr std::optional<Elem> pop() noexcept
 80011da:	460a      	mov	r2, r1
 80011dc:	b085      	sub	sp, #20
			if(end == n)
 80011de:	d104      	bne.n	80011ea <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x18>
      _Optional_payload_base() = default;
 80011e0:	2200      	movs	r2, #0
		}
 80011e2:	4618      	mov	r0, r3
	  _M_engaged(true)
 80011e4:	72da      	strb	r2, [r3, #11]
 80011e6:	b005      	add	sp, #20
 80011e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 80011ea:	260b      	movs	r6, #11
 80011ec:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 80011ee:	ad01      	add	r5, sp, #4
			if(begin == n - 1) begin = 0;
 80011f0:	2c09      	cmp	r4, #9
			Elem ret = buffer[begin];
 80011f2:	fb06 1604 	mla	r6, r6, r4, r1
			if(begin == n - 1) begin = 0;
 80011f6:	bf08      	it	eq
 80011f8:	2400      	moveq	r4, #0
			Elem ret = buffer[begin];
 80011fa:	6870      	ldr	r0, [r6, #4]
 80011fc:	68b1      	ldr	r1, [r6, #8]
			else ++begin;
 80011fe:	bf18      	it	ne
 8001200:	3401      	addne	r4, #1
			Elem ret = buffer[begin];
 8001202:	c503      	stmia	r5!, {r0, r1}
 8001204:	7bb1      	ldrb	r1, [r6, #14]
			if(begin == end)
 8001206:	42a7      	cmp	r7, r4
			Elem ret = buffer[begin];
 8001208:	70a9      	strb	r1, [r5, #2]
				end = n;
 800120a:	bf08      	it	eq
 800120c:	210a      	moveq	r1, #10
			Elem ret = buffer[begin];
 800120e:	89b0      	ldrh	r0, [r6, #12]
				end = n;
 8001210:	bf08      	it	eq
 8001212:	6791      	streq	r1, [r2, #120]	; 0x78
			Elem ret = buffer[begin];
 8001214:	8028      	strh	r0, [r5, #0]
 8001216:	6754      	str	r4, [r2, #116]	; 0x74
	    : _M_value(std::forward<_Args>(__args)...)
 8001218:	aa01      	add	r2, sp, #4
 800121a:	ca03      	ldmia	r2!, {r0, r1}
 800121c:	6059      	str	r1, [r3, #4]
 800121e:	8811      	ldrh	r1, [r2, #0]
 8001220:	7892      	ldrb	r2, [r2, #2]
 8001222:	6018      	str	r0, [r3, #0]
 8001224:	729a      	strb	r2, [r3, #10]
 8001226:	8119      	strh	r1, [r3, #8]
	  _M_engaged(true)
 8001228:	2201      	movs	r2, #1
 800122a:	e7da      	b.n	80011e2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x10>

0800122c <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE>:
	public:
		TxUnit(const u32 base_id) noexcept:
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
		{}

		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 800122c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			auto for_body_par_id = [this, &pillarbox]<std::underlying_type_t<OffsetIdsEnum> offset_id, std::underlying_type_t<OffsetIdsEnum> n>(CompileForIndex<offset_id, n>) noexcept
			{
				CompileForIndex<offset_id + 1, n> ret{};

				ret.is_breaked = std::get<offset_id>(tx_ids).transmit(pillarbox, this->base_id);
 8001230:	6885      	ldr	r5, [r0, #8]
		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8001232:	460e      	mov	r6, r1
	{
		using Impl = TxIdImplInjectorAdaptor<offset_id>;
		SafeCircularQueue<MpuSpecific::TxFrame, Impl::queue_size()> queue{};

		// Mailboxが満杯になった(あるいはエラーが発生した)らfalse, そうでなければtrueを返す.
		bool transmit(MpuSpecific::Pillarbox& pillarbox, const u32 base_id) noexcept
 8001234:	ea5f 28d5 	movs.w	r8, r5, lsr #11
 8001238:	bf14      	ite	ne
 800123a:	2704      	movne	r7, #4
 800123c:	2700      	moveq	r7, #0
 800123e:	b08a      	sub	sp, #40	; 0x28
		{
			while(true)
			{
				if(pillarbox.not_full())
				{
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8001240:	f100 040c 	add.w	r4, r0, #12

		void post(const u32 id, TxFrame& frame) noexcept
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 8001244:	f3c5 050a 	ubfx	r5, r5, #0, #11
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
		}

		bool not_full() const noexcept
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 8001248:	6830      	ldr	r0, [r6, #0]
 800124a:	f000 fdd8 	bl	8001dfe <HAL_CAN_GetTxMailboxesFreeLevel>
				if(pillarbox.not_full())
 800124e:	b308      	cbz	r0, 8001294 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8001250:	4621      	mov	r1, r4
 8001252:	a801      	add	r0, sp, #4
 8001254:	f7ff ffbd 	bl	80011d2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>
 8001258:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800125c:	b1d3      	cbz	r3, 8001294 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 800125e:	f89d 3005 	ldrb.w	r3, [sp, #5]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8001262:	6830      	ldr	r0, [r6, #0]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2302      	movne	r3, #2
 800126a:	2300      	moveq	r3, #0
			};
 800126c:	9307      	str	r3, [sp, #28]
				.DLC = frame.header.dlc,
 800126e:	f89d 3004 	ldrb.w	r3, [sp, #4]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8001272:	f10d 0207 	add.w	r2, sp, #7
				.DLC = frame.header.dlc,
 8001276:	9308      	str	r3, [sp, #32]
			};
 8001278:	f89d 3006 	ldrb.w	r3, [sp, #6]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 800127c:	a904      	add	r1, sp, #16
			};
 800127e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			u32 mailbox{};
 8001282:	2300      	movs	r3, #0
 8001284:	9300      	str	r3, [sp, #0]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 8001286:	466b      	mov	r3, sp
			};
 8001288:	e9cd 5804 	strd	r5, r8, [sp, #16]
 800128c:	9706      	str	r7, [sp, #24]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 800128e:	f000 fd68 	bl	8001d62 <HAL_CAN_AddTxMessage>
 8001292:	e7d9      	b.n	8001248 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x1c>
				return ret;
			};

			compile_for(for_body_par_id, CompileForIndex<static_cast<std::underlying_type_t<OffsetIdsEnum>>(0), to_underlying(OffsetIdsEnum::n)>{});
		}
 8001294:	b00a      	add	sp, #40	; 0x28
 8001296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800129a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 800129a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800129c:	460e      	mov	r6, r1
 800129e:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 80012a0:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80012a2:	4604      	mov	r4, r0
 80012a4:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80012a8:	d01d      	beq.n	80012e6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80012aa:	1d05      	adds	r5, r0, #4
 80012ac:	42b5      	cmp	r5, r6
 80012ae:	d01a      	beq.n	80012e6 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80012b0:	682f      	ldr	r7, [r5, #0]
			}
		}

		void sort_tx_unit() noexcept
		{
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 80012b2:	6823      	ldr	r3, [r4, #0]
 80012b4:	68b9      	ldr	r1, [r7, #8]
	{
	  if (__comp(__i, __first))
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	4299      	cmp	r1, r3
 80012ba:	d209      	bcs.n	80012d0 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x36>
					   is_copy_assignable<_Tp>>;
	  // trivial types can have deleted assignment
	  static_assert( __assignable::type::value, "type is not assignable" );
#endif
	  const ptrdiff_t _Num = __last - __first;
	  if (_Num)
 80012bc:	42a5      	cmp	r5, r4
 80012be:	d004      	beq.n	80012ca <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x30>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80012c0:	4621      	mov	r1, r4
 80012c2:	1b2a      	subs	r2, r5, r4
 80012c4:	1d20      	adds	r0, r4, #4
 80012c6:	f002 fb8b 	bl	80039e0 <memmove>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
	      *__first = _GLIBCXX_MOVE(__val);
 80012ca:	6027      	str	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80012cc:	3504      	adds	r5, #4
 80012ce:	e7ed      	b.n	80012ac <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x12>
	  if (__comp(__i, __first))
 80012d0:	462b      	mov	r3, r5
 80012d2:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
 80012d6:	6890      	ldr	r0, [r2, #8]
 80012d8:	4281      	cmp	r1, r0
 80012da:	d202      	bcs.n	80012e2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x48>
	  *__last = _GLIBCXX_MOVE(*__next);
 80012dc:	f843 2904 	str.w	r2, [r3], #-4
      while (__comp(__val, __next))
 80012e0:	e7f7      	b.n	80012d2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 80012e2:	601f      	str	r7, [r3, #0]
    }
 80012e4:	e7f2      	b.n	80012cc <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x32>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 80012e6:	b003      	add	sp, #12
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012ea <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 80012ea:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 80012ec:	1e54      	subs	r4, r2, #1
 80012ee:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80012f2:	1066      	asrs	r6, r4, #1
	{
	  __secondChild = 2 * (__secondChild + 1);
	  if (__comp(__first + __secondChild,
		     __first + (__secondChild - 1)))
 80012f4:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      while (__secondChild < (__len - 1) / 2)
 80012f8:	460c      	mov	r4, r1
 80012fa:	42a6      	cmp	r6, r4
 80012fc:	dd14      	ble.n	8001328 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x3e>
	  __secondChild = 2 * (__secondChild + 1);
 80012fe:	1c65      	adds	r5, r4, #1
 8001300:	006f      	lsls	r7, r5, #1
		     __first + (__secondChild - 1)))
 8001302:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 8001306:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	  if (__comp(__first + __secondChild,
 800130a:	f8d5 e008 	ldr.w	lr, [r5, #8]
 800130e:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8001312:	68ad      	ldr	r5, [r5, #8]
 8001314:	45ae      	cmp	lr, r5
	    __secondChild--;
 8001316:	bf88      	it	hi
 8001318:	f107 37ff 	addhi.w	r7, r7, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 800131c:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8001320:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
 8001324:	463c      	mov	r4, r7
      while (__secondChild < (__len - 1) / 2)
 8001326:	e7e8      	b.n	80012fa <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x10>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8001328:	07d5      	lsls	r5, r2, #31
 800132a:	d40e      	bmi.n	800134a <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
 800132c:	3a02      	subs	r2, #2
 800132e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001332:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8001336:	d108      	bne.n	800134a <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
	{
	  __secondChild = 2 * (__secondChild + 1);
 8001338:	1c62      	adds	r2, r4, #1
 800133a:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800133c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8001340:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8001344:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 8001348:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 800134a:	1e62      	subs	r2, r4, #1
 800134c:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001350:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001352:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8001354:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8001358:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 800135c:	da0d      	bge.n	800137a <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
 800135e:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 8001362:	689e      	ldr	r6, [r3, #8]
 8001364:	68a7      	ldr	r7, [r4, #8]
 8001366:	42b7      	cmp	r7, r6
 8001368:	d207      	bcs.n	800137a <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 800136a:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
 800136e:	1e54      	subs	r4, r2, #1
 8001370:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8001374:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8001376:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8001378:	e7eb      	b.n	8001352 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 800137a:	602b      	str	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 800137c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800137e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 800137e:	b082      	sub	sp, #8
 8001380:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	4616      	mov	r6, r2
 800138a:	b087      	sub	sp, #28
 800138c:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 800138e:	1d07      	adds	r7, r0, #4
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 8001390:	1b2b      	subs	r3, r5, r4
 8001392:	2b40      	cmp	r3, #64	; 0x40
 8001394:	dd2c      	ble.n	80013f0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x72>
	  _DistanceType;

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
 8001396:	ea4f 08a3 	mov.w	r8, r3, asr #2
	{
	  if (__depth_limit == 0)
 800139a:	bb76      	cbnz	r6, 80013fa <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x7c>
 800139c:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	f10d 0910 	add.w	r9, sp, #16
 80013a6:	e887 0003 	stmia.w	r7, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 80013aa:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 80013ae:	f1a8 0602 	sub.w	r6, r8, #2
 80013b2:	1076      	asrs	r6, r6, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 80013b4:	e899 0003 	ldmia.w	r9, {r0, r1}
 80013b8:	4642      	mov	r2, r8
 80013ba:	e88d 0003 	stmia.w	sp, {r0, r1}
 80013be:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 80013c2:	4631      	mov	r1, r6
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff ff90 	bl	80012ea <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
			     __comp);
	  if (__parent == 0)
 80013ca:	b10e      	cbz	r6, 80013d0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	    return;
	  __parent--;
 80013cc:	3e01      	subs	r6, #1
      while (true)
 80013ce:	e7f1      	b.n	80013b4 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x36>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 80013d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
 80013d4:	6822      	ldr	r2, [r4, #0]
			 _DistanceType(__last - __first),
 80013d6:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 80013d8:	e897 0003 	ldmia.w	r7, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 80013dc:	602a      	str	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 80013de:	e88d 0003 	stmia.w	sp, {r0, r1}
 80013e2:	10b2      	asrs	r2, r6, #2
 80013e4:	2100      	movs	r1, #0
 80013e6:	4620      	mov	r0, r4
 80013e8:	f7ff ff7f 	bl	80012ea <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 80013ec:	2e04      	cmp	r6, #4
 80013ee:	dcef      	bgt.n	80013d0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 80013f0:	b007      	add	sp, #28
 80013f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013f6:	b002      	add	sp, #8
 80013f8:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 80013fa:	10db      	asrs	r3, r3, #3
 80013fc:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8001400:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8001404:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8001408:	f8d0 e008 	ldr.w	lr, [r0, #8]
 800140c:	f855 cc04 	ldr.w	ip, [r5, #-4]
      if (__comp(__a, __b))
 8001410:	45f1      	cmp	r9, lr
 8001412:	f8dc 1008 	ldr.w	r1, [ip, #8]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001416:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 8001418:	f106 36ff 	add.w	r6, r6, #4294967295
      if (__comp(__a, __b))
 800141c:	d22a      	bcs.n	8001474 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xf6>
	  if (__comp(__b, __c))
 800141e:	458e      	cmp	lr, r1
 8001420:	d221      	bcs.n	8001466 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xe8>
      __a = _GLIBCXX_MOVE(__b);
 8001422:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001424:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8001428:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 800142a:	462b      	mov	r3, r5
 800142c:	6820      	ldr	r0, [r4, #0]
 800142e:	4690      	mov	r8, r2
 8001430:	f852 1b04 	ldr.w	r1, [r2], #4
 8001434:	f8d0 9008 	ldr.w	r9, [r0, #8]
	  while (__comp(__first, __pivot))
 8001438:	6888      	ldr	r0, [r1, #8]
 800143a:	4548      	cmp	r0, r9
 800143c:	d3f6      	bcc.n	800142c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>
	  --__last;
 800143e:	1f18      	subs	r0, r3, #4
 8001440:	4603      	mov	r3, r0
 8001442:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
 8001446:	f8de c008 	ldr.w	ip, [lr, #8]
 800144a:	45e1      	cmp	r9, ip
 800144c:	d3f8      	bcc.n	8001440 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xc2>
	  if (!(__first < __last))
 800144e:	4598      	cmp	r8, r3
 8001450:	d318      	bcc.n	8001484 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x106>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8001452:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001454:	4629      	mov	r1, r5
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	4632      	mov	r2, r6
 800145a:	4640      	mov	r0, r8
 800145c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800145e:	f7ff ff8e 	bl	800137e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      while (__last - __first > int(_S_threshold))
 8001462:	4645      	mov	r5, r8
 8001464:	e794      	b.n	8001390 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x12>
	  else if (__comp(__a, __c))
 8001466:	4589      	cmp	r9, r1
 8001468:	d206      	bcs.n	8001478 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 800146a:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 800146e:	f845 2c04 	str.w	r2, [r5, #-4]
    }
 8001472:	e7d9      	b.n	8001428 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__a, __c))
 8001474:	4589      	cmp	r9, r1
 8001476:	d202      	bcs.n	800147e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x100>
 8001478:	e9c4 8200 	strd	r8, r2, [r4]
 800147c:	e7d4      	b.n	8001428 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__b, __c))
 800147e:	458e      	cmp	lr, r1
 8001480:	d2cf      	bcs.n	8001422 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xa4>
 8001482:	e7f2      	b.n	800146a <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xec>
      __a = _GLIBCXX_MOVE(__b);
 8001484:	f842 ec04 	str.w	lr, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001488:	6019      	str	r1, [r3, #0]
	  while (__comp(__first, __pivot))
 800148a:	e7cf      	b.n	800142c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>

0800148c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>:
		u32 base_id;

	public:
		UnitBase(const u32 id_num, const u32 base_id) noexcept:
			id_num{id_num},
			base_id{base_id}
 800148c:	2301      	movs	r3, #1
		Transmitter(const std::same_as<u32> auto ... args) noexcept:
 800148e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001492:	4604      	mov	r4, r0
 8001494:	e9c0 3101 	strd	r3, r1, [r0, #4]
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xc8>)
 800149a:	b089      	sub	sp, #36	; 0x24

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 800149c:	227c      	movs	r2, #124	; 0x7c
 800149e:	2100      	movs	r1, #0
 80014a0:	f840 3b0c 	str.w	r3, [r0], #12
 80014a4:	f002 fab6 	bl	8003a14 <memset>
	class SafeCircularQueue final : SafeCircularQueueEraseN<Elem>
 80014a8:	4b2b      	ldr	r3, [pc, #172]	; (8001558 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xcc>)
 80014aa:	226e      	movs	r2, #110	; 0x6e
 80014ac:	2100      	movs	r1, #0
 80014ae:	60e3      	str	r3, [r4, #12]
 80014b0:	f104 0010 	add.w	r0, r4, #16
 80014b4:	f002 faae 	bl	8003a14 <memset>
 80014b8:	230a      	movs	r3, #10
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 80014ba:	f104 0688 	add.w	r6, r4, #136	; 0x88
      { return iterator(data() + _Nm); }
 80014be:	f104 078c 	add.w	r7, r4, #140	; 0x8c
	   _Compare __comp)
    {
      if (__first != __last)
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80014c2:	eba7 0806 	sub.w	r8, r7, r6
 80014c6:	ea4f 02a8 	mov.w	r2, r8, asr #2

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80014ca:	fab2 f282 	clz	r2, r2
			tx_units{args ...}
 80014ce:	e9c4 3421 	strd	r3, r4, [r4, #132]	; 0x84
 80014d2:	2300      	movs	r3, #0
	  std::__introsort_loop(__first, __last,
 80014d4:	ad03      	add	r5, sp, #12
 80014d6:	f10d 0908 	add.w	r9, sp, #8
 80014da:	f1c2 021f 	rsb	r2, r2, #31
 80014de:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      end() noexcept
 80014e2:	f88d 300c 	strb.w	r3, [sp, #12]
 80014e6:	f88d 3008 	strb.w	r3, [sp, #8]
 80014ea:	4639      	mov	r1, r7
 80014ec:	462b      	mov	r3, r5
 80014ee:	4630      	mov	r0, r6
 80014f0:	f8cd 9000 	str.w	r9, [sp]
 80014f4:	0052      	lsls	r2, r2, #1
 80014f6:	9504      	str	r5, [sp, #16]
 80014f8:	f8cd 9014 	str.w	r9, [sp, #20]
 80014fc:	f7ff ff3f 	bl	800137e <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      if (__last - __first > int(_S_threshold))
 8001500:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8001504:	e9cd 5906 	strd	r5, r9, [sp, #24]
    __final_insertion_sort(_RandomAccessIterator __first,
 8001508:	ab06      	add	r3, sp, #24
      if (__last - __first > int(_S_threshold))
 800150a:	dd16      	ble.n	800153a <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xae>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 800150c:	cb0c      	ldmia	r3, {r2, r3}
 800150e:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 8001512:	4629      	mov	r1, r5
 8001514:	4630      	mov	r0, r6
 8001516:	f7ff fec0 	bl	800129a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800151a:	42bd      	cmp	r5, r7
 800151c:	d012      	beq.n	8001544 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xb8>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800151e:	462b      	mov	r3, r5
	__val = _GLIBCXX_MOVE(*__last);
 8001520:	682a      	ldr	r2, [r5, #0]
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 8001522:	6890      	ldr	r0, [r2, #8]
 8001524:	f853 1c04 	ldr.w	r1, [r3, #-4]
      while (__comp(__val, __next))
 8001528:	688e      	ldr	r6, [r1, #8]
 800152a:	42b0      	cmp	r0, r6
 800152c:	d202      	bcs.n	8001534 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xa8>
	  *__last = _GLIBCXX_MOVE(*__next);
 800152e:	f843 1904 	str.w	r1, [r3], #-4
      while (__comp(__val, __next))
 8001532:	e7f7      	b.n	8001524 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x98>
      *__last = _GLIBCXX_MOVE(__val);
 8001534:	601a      	str	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8001536:	3504      	adds	r5, #4
 8001538:	e7ef      	b.n	800151a <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x8e>
	std::__insertion_sort(__first, __last, __comp);
 800153a:	4639      	mov	r1, r7
 800153c:	cb0c      	ldmia	r3, {r2, r3}
 800153e:	4630      	mov	r0, r6
 8001540:	f7ff feab 	bl	800129a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
			is_id_sorted = true;
 8001544:	2301      	movs	r3, #1
		}
 8001546:	4620      	mov	r0, r4
			is_id_sorted = true;
 8001548:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		}
 800154c:	b009      	add	sp, #36	; 0x24
 800154e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001552:	bf00      	nop
 8001554:	08003eb8 	.word	0x08003eb8
 8001558:	08003ea0 	.word	0x08003ea0

0800155c <_GLOBAL__sub_I__ZN13Chibarobo20228executorE>:

}

namespace Chibarobo2022
{
	inline CRSLib::Can::Transmitter<Chibarobo2022::SampleTx> transmitter{(u32)0x100};
 800155c:	4a15      	ldr	r2, [pc, #84]	; (80015b4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x58>)
			transmitter.transmit(can_manager.pillarbox);
			
			executor.run_once();
		}
	}
}
 800155e:	b510      	push	{r4, lr}
 8001560:	6813      	ldr	r3, [r2, #0]
 8001562:	3301      	adds	r3, #1
 8001564:	2b01      	cmp	r3, #1
 8001566:	6013      	str	r3, [r2, #0]
 8001568:	d104      	bne.n	8001574 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x18>
 800156a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800156e:	4812      	ldr	r0, [pc, #72]	; (80015b8 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x5c>)
 8001570:	f7ff ff8c 	bl	800148c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>
	};
}

namespace Chibarobo2022
{
	inline CRSLib::Can::Receiver<Chibarobo2022::SampleRx> receiver{(u32)0x101};
 8001574:	4a11      	ldr	r2, [pc, #68]	; (80015bc <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x60>)
 8001576:	6813      	ldr	r3, [r2, #0]
 8001578:	3301      	adds	r3, #1
 800157a:	2b01      	cmp	r3, #1
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	d117      	bne.n	80015b0 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x54>
 8001580:	4c0f      	ldr	r4, [pc, #60]	; (80015c0 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x64>)
 8001582:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 8001586:	6023      	str	r3, [r4, #0]
 8001588:	f240 1301 	movw	r3, #257	; 0x101
 800158c:	2100      	movs	r1, #0
 800158e:	f104 0008 	add.w	r0, r4, #8
 8001592:	6063      	str	r3, [r4, #4]
 8001594:	f002 fa3e 	bl	8003a14 <memset>
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x68>)
 800159a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800159e:	2100      	movs	r1, #0
 80015a0:	f104 000c 	add.w	r0, r4, #12
 80015a4:	60a3      	str	r3, [r4, #8]
 80015a6:	f002 fa35 	bl	8003a14 <memset>
 80015aa:	2314      	movs	r3, #20
 80015ac:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 80015b0:	bd10      	pop	{r4, pc}
 80015b2:	bf00      	nop
 80015b4:	20000098 	.word	0x20000098
 80015b8:	20000290 	.word	0x20000290
 80015bc:	20000094 	.word	0x20000094
 80015c0:	2000009c 	.word	0x2000009c
 80015c4:	08003ec4 	.word	0x08003ec4

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015cc:	2214      	movs	r2, #20
 80015ce:	2100      	movs	r1, #0
 80015d0:	a808      	add	r0, sp, #32
 80015d2:	f002 fa1f 	bl	8003a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d6:	2214      	movs	r2, #20
 80015d8:	2100      	movs	r1, #0
 80015da:	a801      	add	r0, sp, #4
 80015dc:	f002 fa1a 	bl	8003a14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015e6:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e8:	e9cd 3206 	strd	r3, r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ec:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f2:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015fc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fe:	f000 fd47 	bl	8002090 <HAL_RCC_OscConfig>
 8001602:	b108      	cbz	r0, 8001608 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001604:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001606:	e7fe      	b.n	8001606 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001608:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800160e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001612:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001614:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001618:	4621      	mov	r1, r4
 800161a:	a801      	add	r0, sp, #4
 800161c:	f000 ff0e 	bl	800243c <HAL_RCC_ClockConfig>
 8001620:	b108      	cbz	r0, 8001626 <SystemClock_Config+0x5e>
 8001622:	b672      	cpsid	i
  while (1)
 8001624:	e7fe      	b.n	8001624 <SystemClock_Config+0x5c>
}
 8001626:	b010      	add	sp, #64	; 0x40
 8001628:	bd10      	pop	{r4, pc}
	...

0800162c <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	2610      	movs	r6, #16
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b098      	sub	sp, #96	; 0x60
  HAL_Init();
 8001632:	f000 faf7 	bl	8001c24 <HAL_Init>
  SystemClock_Config();
 8001636:	f7ff ffc7 	bl	80015c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	4632      	mov	r2, r6
 800163c:	2100      	movs	r1, #0
 800163e:	a810      	add	r0, sp, #64	; 0x40
 8001640:	f002 f9e8 	bl	8003a14 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001644:	4baa      	ldr	r3, [pc, #680]	; (80018f0 <main+0x2c4>)
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8001646:	f44f 41c8 	mov.w	r1, #25600	; 0x6400
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 800164c:	48a9      	ldr	r0, [pc, #676]	; (80018f4 <main+0x2c8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164e:	f042 0220 	orr.w	r2, r2, #32
 8001652:	619a      	str	r2, [r3, #24]
 8001654:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001658:	f002 0220 	and.w	r2, r2, #32
 800165c:	9200      	str	r2, [sp, #0]
 800165e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001660:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001662:	2502      	movs	r5, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	f042 0204 	orr.w	r2, r2, #4
 8001668:	619a      	str	r2, [r3, #24]
 800166a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2701      	movs	r7, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	f002 0204 	and.w	r2, r2, #4
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	699a      	ldr	r2, [r3, #24]
 8001678:	f042 0208 	orr.w	r2, r2, #8
 800167c:	619a      	str	r2, [r3, #24]
 800167e:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 8001680:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	f003 0308 	and.w	r3, r3, #8
 8001686:	9302      	str	r3, [sp, #8]
 8001688:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, DIRE_Pin|ENAC_Pin|DIRC_Pin, GPIO_PIN_RESET);
 800168a:	f000 fcfb 	bl	8002084 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENAA_Pin|DIRA_Pin|ENAE_Pin, GPIO_PIN_RESET);
 800168e:	2200      	movs	r2, #0
 8001690:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 8001694:	4898      	ldr	r0, [pc, #608]	; (80018f8 <main+0x2cc>)
 8001696:	f000 fcf5 	bl	8002084 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800169a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(DIRE_GPIO_Port, &GPIO_InitStruct);
 800169e:	4895      	ldr	r0, [pc, #596]	; (80018f4 <main+0x2c8>)
 80016a0:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016a2:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(DIRE_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f000 fc15 	bl	8001ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAC_Pin|DIRC_Pin;
 80016ae:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b2:	4890      	ldr	r0, [pc, #576]	; (80018f4 <main+0x2c8>)
 80016b4:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016b6:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016be:	f000 fc0b 	bl	8001ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAA_Pin|DIRA_Pin;
 80016c2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	488c      	ldr	r0, [pc, #560]	; (80018f8 <main+0x2cc>)
 80016c8:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ca:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	e9cd 5512 	strd	r5, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d2:	f000 fc01 	bl	8001ed8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAE_Pin;
 80016d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 80016da:	4887      	ldr	r0, [pc, #540]	; (80018f8 <main+0x2cc>)
 80016dc:	a910      	add	r1, sp, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	e9cd 3710 	strd	r3, r7, [sp, #64]	; 0x40
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e2:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 80016e6:	f000 fbf7 	bl	8001ed8 <HAL_GPIO_Init>
  hcan.Instance = CAN1;
 80016ea:	4884      	ldr	r0, [pc, #528]	; (80018fc <main+0x2d0>)
 80016ec:	4b84      	ldr	r3, [pc, #528]	; (8001900 <main+0x2d4>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016ee:	6184      	str	r4, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80016f0:	8384      	strh	r4, [r0, #28]
  hcan.Init.Prescaler = 16;
 80016f2:	e9c0 3600 	strd	r3, r6, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80016fe:	f000 fab5 	bl	8001c6c <HAL_CAN_Init>
 8001702:	4605      	mov	r5, r0
 8001704:	b108      	cbz	r0, 800170a <main+0xde>
 8001706:	b672      	cpsid	i
  while (1)
 8001708:	e7fe      	b.n	8001708 <main+0xdc>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170a:	4601      	mov	r1, r0
 800170c:	4632      	mov	r2, r6
 800170e:	a805      	add	r0, sp, #20
 8001710:	f002 f980 	bl	8003a14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001714:	221c      	movs	r2, #28
 8001716:	4629      	mov	r1, r5
 8001718:	a809      	add	r0, sp, #36	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171a:	e9cd 5503 	strd	r5, r5, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	f002 f979 	bl	8003a14 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001722:	2220      	movs	r2, #32
 8001724:	4629      	mov	r1, r5
 8001726:	a810      	add	r0, sp, #64	; 0x40
 8001728:	f002 f974 	bl	8003a14 <memset>
  htim1.Init.Prescaler = 71;
 800172c:	2347      	movs	r3, #71	; 0x47
  htim1.Init.Period = 65535;
 800172e:	f64f 77ff 	movw	r7, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001732:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim1.Instance = TIM1;
 8001736:	4c73      	ldr	r4, [pc, #460]	; (8001904 <main+0x2d8>)
  htim1.Init.Prescaler = 71;
 8001738:	4873      	ldr	r0, [pc, #460]	; (8001908 <main+0x2dc>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800173a:	e9c4 7503 	strd	r7, r5, [r4, #12]
  htim1.Init.Prescaler = 71;
 800173e:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001742:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001744:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8001746:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001748:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800174c:	f000 ffba 	bl	80026c4 <HAL_TIM_Base_Init>
 8001750:	b108      	cbz	r0, 8001756 <main+0x12a>
 8001752:	b672      	cpsid	i
  while (1)
 8001754:	e7fe      	b.n	8001754 <main+0x128>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001756:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800175a:	4620      	mov	r0, r4
 800175c:	a905      	add	r1, sp, #20
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800175e:	9505      	str	r5, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001760:	f001 f8ec 	bl	800293c <HAL_TIM_ConfigClockSource>
 8001764:	b108      	cbz	r0, 800176a <main+0x13e>
 8001766:	b672      	cpsid	i
  while (1)
 8001768:	e7fe      	b.n	8001768 <main+0x13c>
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800176a:	4620      	mov	r0, r4
 800176c:	f000 ffd6 	bl	800271c <HAL_TIM_OC_Init>
 8001770:	b108      	cbz	r0, 8001776 <main+0x14a>
 8001772:	b672      	cpsid	i
  while (1)
 8001774:	e7fe      	b.n	8001774 <main+0x148>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	e9cd 0003 	strd	r0, r0, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800177a:	a903      	add	r1, sp, #12
 800177c:	4620      	mov	r0, r4
 800177e:	f001 f971 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001782:	4602      	mov	r2, r0
 8001784:	b108      	cbz	r0, 800178a <main+0x15e>
 8001786:	b672      	cpsid	i
  while (1)
 8001788:	e7fe      	b.n	8001788 <main+0x15c>
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800178a:	2350      	movs	r3, #80	; 0x50
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800178c:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 8001790:	e9cd 3009 	strd	r3, r0, [sp, #36]	; 0x24
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001794:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001798:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800179a:	a909      	add	r1, sp, #36	; 0x24
 800179c:	4620      	mov	r0, r4
 800179e:	f001 f841 	bl	8002824 <HAL_TIM_OC_ConfigChannel>
 80017a2:	b108      	cbz	r0, 80017a8 <main+0x17c>
 80017a4:	b672      	cpsid	i
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <main+0x17a>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ac:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.DeadTime = 0;
 80017b0:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017b4:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017b6:	9017      	str	r0, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017b8:	a910      	add	r1, sp, #64	; 0x40
 80017ba:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017bc:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017be:	f001 f97b 	bl	8002ab8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017c2:	4681      	mov	r9, r0
 80017c4:	b108      	cbz	r0, 80017ca <main+0x19e>
 80017c6:	b672      	cpsid	i
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <main+0x19c>
  HAL_TIM_MspPostInit(&htim1);
 80017ca:	4620      	mov	r0, r4
 80017cc:	f000 f93e 	bl	8001a4c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017d0:	4632      	mov	r2, r6
 80017d2:	4649      	mov	r1, r9
 80017d4:	a809      	add	r0, sp, #36	; 0x24
 80017d6:	f002 f91d 	bl	8003a14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017da:	4649      	mov	r1, r9
 80017dc:	221c      	movs	r2, #28
 80017de:	a810      	add	r0, sp, #64	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017e0:	e9cd 9905 	strd	r9, r9, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017e4:	f002 f916 	bl	8003a14 <memset>
  htim2.Init.Prescaler = 31;
 80017e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80017ec:	231f      	movs	r3, #31
  htim2.Instance = TIM2;
 80017ee:	4c47      	ldr	r4, [pc, #284]	; (800190c <main+0x2e0>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017f0:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 31;
 80017f2:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 80017f6:	e9c4 9702 	strd	r9, r7, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017fe:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001802:	f000 ff5f 	bl	80026c4 <HAL_TIM_Base_Init>
 8001806:	b108      	cbz	r0, 800180c <main+0x1e0>
 8001808:	b672      	cpsid	i
  while (1)
 800180a:	e7fe      	b.n	800180a <main+0x1de>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800180c:	4620      	mov	r0, r4
 800180e:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001810:	9509      	str	r5, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001812:	f001 f893 	bl	800293c <HAL_TIM_ConfigClockSource>
 8001816:	b108      	cbz	r0, 800181c <main+0x1f0>
 8001818:	b672      	cpsid	i
  while (1)
 800181a:	e7fe      	b.n	800181a <main+0x1ee>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800181c:	4620      	mov	r0, r4
 800181e:	f000 ffa9 	bl	8002774 <HAL_TIM_PWM_Init>
 8001822:	b108      	cbz	r0, 8001828 <main+0x1fc>
 8001824:	b672      	cpsid	i
  while (1)
 8001826:	e7fe      	b.n	8001826 <main+0x1fa>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001828:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800182a:	4838      	ldr	r0, [pc, #224]	; (800190c <main+0x2e0>)
 800182c:	a905      	add	r1, sp, #20
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800182e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001832:	f001 f917 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 8001836:	4602      	mov	r2, r0
 8001838:	b108      	cbz	r0, 800183e <main+0x212>
 800183a:	b672      	cpsid	i
  while (1)
 800183c:	e7fe      	b.n	800183c <main+0x210>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800183e:	2660      	movs	r6, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001840:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.Pulse = 0;
 8001842:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001846:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001848:	a910      	add	r1, sp, #64	; 0x40
 800184a:	4830      	ldr	r0, [pc, #192]	; (800190c <main+0x2e0>)
 800184c:	f001 f811 	bl	8002872 <HAL_TIM_PWM_ConfigChannel>
 8001850:	4605      	mov	r5, r0
 8001852:	b108      	cbz	r0, 8001858 <main+0x22c>
 8001854:	b672      	cpsid	i
  while (1)
 8001856:	e7fe      	b.n	8001856 <main+0x22a>
  HAL_TIM_MspPostInit(&htim2);
 8001858:	482c      	ldr	r0, [pc, #176]	; (800190c <main+0x2e0>)
 800185a:	f000 f8f7 	bl	8001a4c <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800185e:	2210      	movs	r2, #16
 8001860:	4629      	mov	r1, r5
 8001862:	a809      	add	r0, sp, #36	; 0x24
 8001864:	f002 f8d6 	bl	8003a14 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001868:	221c      	movs	r2, #28
 800186a:	4629      	mov	r1, r5
 800186c:	a810      	add	r0, sp, #64	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186e:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	f002 f8cf 	bl	8003a14 <memset>
  htim3.Init.Prescaler = 31;
 8001876:	231f      	movs	r3, #31
  htim3.Instance = TIM3;
 8001878:	4c25      	ldr	r4, [pc, #148]	; (8001910 <main+0x2e4>)
  htim3.Init.Prescaler = 31;
 800187a:	4a26      	ldr	r2, [pc, #152]	; (8001914 <main+0x2e8>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800187c:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 31;
 800187e:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 65535;
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001886:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188a:	2380      	movs	r3, #128	; 0x80
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188c:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800188e:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001890:	f000 ff18 	bl	80026c4 <HAL_TIM_Base_Init>
 8001894:	b108      	cbz	r0, 800189a <main+0x26e>
 8001896:	b672      	cpsid	i
  while (1)
 8001898:	e7fe      	b.n	8001898 <main+0x26c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800189e:	4620      	mov	r0, r4
 80018a0:	a909      	add	r1, sp, #36	; 0x24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018a4:	f001 f84a 	bl	800293c <HAL_TIM_ConfigClockSource>
 80018a8:	b108      	cbz	r0, 80018ae <main+0x282>
 80018aa:	b672      	cpsid	i
  while (1)
 80018ac:	e7fe      	b.n	80018ac <main+0x280>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018ae:	4620      	mov	r0, r4
 80018b0:	f000 ff60 	bl	8002774 <HAL_TIM_PWM_Init>
 80018b4:	b108      	cbz	r0, 80018ba <main+0x28e>
 80018b6:	b672      	cpsid	i
  while (1)
 80018b8:	e7fe      	b.n	80018b8 <main+0x28c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ba:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018be:	a905      	add	r1, sp, #20
 80018c0:	4620      	mov	r0, r4
 80018c2:	f001 f8cf 	bl	8002a64 <HAL_TIMEx_MasterConfigSynchronization>
 80018c6:	4602      	mov	r2, r0
 80018c8:	b108      	cbz	r0, 80018ce <main+0x2a2>
 80018ca:	b672      	cpsid	i
  while (1)
 80018cc:	e7fe      	b.n	80018cc <main+0x2a0>
  sConfigOC.Pulse = 0;
 80018ce:	e9cd 6010 	strd	r6, r0, [sp, #64]	; 0x40
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018d2:	9012      	str	r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d4:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d6:	a910      	add	r1, sp, #64	; 0x40
 80018d8:	4620      	mov	r0, r4
 80018da:	f000 ffca 	bl	8002872 <HAL_TIM_PWM_ConfigChannel>
 80018de:	b108      	cbz	r0, 80018e4 <main+0x2b8>
 80018e0:	b672      	cpsid	i
  while (1)
 80018e2:	e7fe      	b.n	80018e2 <main+0x2b6>
  HAL_TIM_MspPostInit(&htim3);
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 f8b1 	bl	8001a4c <HAL_TIM_MspPostInit>
  wrapper_cpp();
 80018ea:	f000 f950 	bl	8001b8e <wrapper_cpp>
  while (1)
 80018ee:	e7fe      	b.n	80018ee <main+0x2c2>
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40010800 	.word	0x40010800
 80018fc:	20000320 	.word	0x20000320
 8001900:	40006400 	.word	0x40006400
 8001904:	20000348 	.word	0x20000348
 8001908:	40012c00 	.word	0x40012c00
 800190c:	20000390 	.word	0x20000390
 8001910:	200003d8 	.word	0x200003d8
 8001914:	40000400 	.word	0x40000400

08001918 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001918:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_MspInit+0x3c>)
{
 800191a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 800191c:	699a      	ldr	r2, [r3, #24]
 800191e:	f042 0201 	orr.w	r2, r2, #1
 8001922:	619a      	str	r2, [r3, #24]
 8001924:	699a      	ldr	r2, [r3, #24]
 8001926:	f002 0201 	and.w	r2, r2, #1
 800192a:	9200      	str	r2, [sp, #0]
 800192c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001934:	61da      	str	r2, [r3, #28]
 8001936:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001938:	4a07      	ldr	r2, [pc, #28]	; (8001958 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001942:	6853      	ldr	r3, [r2, #4]
 8001944:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001948:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800194c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	b002      	add	sp, #8
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	40010000 	.word	0x40010000

0800195c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800195c:	b510      	push	{r4, lr}
 800195e:	4604      	mov	r4, r0
 8001960:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	2210      	movs	r2, #16
 8001964:	2100      	movs	r1, #0
 8001966:	a802      	add	r0, sp, #8
 8001968:	f002 f854 	bl	8003a14 <memset>
  if(hcan->Instance==CAN1)
 800196c:	6822      	ldr	r2, [r4, #0]
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_CAN_MspInit+0x7c>)
 8001970:	429a      	cmp	r2, r3
 8001972:	d12e      	bne.n	80019d2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001974:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 8001978:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197a:	4818      	ldr	r0, [pc, #96]	; (80019dc <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 800197c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001980:	61da      	str	r2, [r3, #28]
 8001982:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001984:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001986:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800198a:	9200      	str	r2, [sp, #0]
 800198c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198e:	699a      	ldr	r2, [r3, #24]
 8001990:	f042 0208 	orr.w	r2, r2, #8
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	9301      	str	r3, [sp, #4]
 800199e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80019a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019a4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f000 fa97 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ae:	2302      	movs	r3, #2
 80019b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019b4:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b6:	4809      	ldr	r0, [pc, #36]	; (80019dc <HAL_CAN_MspInit+0x80>)
 80019b8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ba:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019bc:	f000 fa8c 	bl	8001ed8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_CAN_MspInit+0x84>)
 80019c2:	6853      	ldr	r3, [r2, #4]
 80019c4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 80019c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80019cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80019d2:	b006      	add	sp, #24
 80019d4:	bd10      	pop	{r4, pc}
 80019d6:	bf00      	nop
 80019d8:	40006400 	.word	0x40006400
 80019dc:	40010c00 	.word	0x40010c00
 80019e0:	40010000 	.word	0x40010000

080019e4 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80019e4:	6803      	ldr	r3, [r0, #0]
 80019e6:	4a16      	ldr	r2, [pc, #88]	; (8001a40 <HAL_TIM_Base_MspInit+0x5c>)
{
 80019e8:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d10b      	bne.n	8001a06 <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f6:	619a      	str	r2, [r3, #24]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001a02:	b004      	add	sp, #16
 8001a04:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d10b      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001a10:	69da      	ldr	r2, [r3, #28]
 8001a12:	f042 0201 	orr.w	r2, r2, #1
 8001a16:	61da      	str	r2, [r3, #28]
 8001a18:	69db      	ldr	r3, [r3, #28]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	9302      	str	r3, [sp, #8]
 8001a20:	9b02      	ldr	r3, [sp, #8]
 8001a22:	e7ee      	b.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8001a24:	4a08      	ldr	r2, [pc, #32]	; (8001a48 <HAL_TIM_Base_MspInit+0x64>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d1eb      	bne.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_TIM_Base_MspInit+0x60>)
 8001a2c:	69da      	ldr	r2, [r3, #28]
 8001a2e:	f042 0202 	orr.w	r2, r2, #2
 8001a32:	61da      	str	r2, [r3, #28]
 8001a34:	69db      	ldr	r3, [r3, #28]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	9303      	str	r3, [sp, #12]
 8001a3c:	9b03      	ldr	r3, [sp, #12]
}
 8001a3e:	e7e0      	b.n	8001a02 <HAL_TIM_Base_MspInit+0x1e>
 8001a40:	40012c00 	.word	0x40012c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40000400 	.word	0x40000400

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	2510      	movs	r5, #16
{
 8001a50:	4604      	mov	r4, r0
 8001a52:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	462a      	mov	r2, r5
 8001a56:	2100      	movs	r1, #0
 8001a58:	eb0d 0005 	add.w	r0, sp, r5
 8001a5c:	f001 ffda 	bl	8003a14 <memset>
  if(htim->Instance==TIM1)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	4a27      	ldr	r2, [pc, #156]	; (8001b00 <HAL_TIM_MspPostInit+0xb4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d116      	bne.n	8001a96 <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b26      	ldr	r3, [pc, #152]	; (8001b04 <HAL_TIM_MspPostInit+0xb8>)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	f042 0204 	orr.w	r2, r2, #4
 8001a74:	619a      	str	r2, [r3, #24]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a80:	2302      	movs	r3, #2
 8001a82:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	eb0d 0105 	add.w	r1, sp, r5
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	481e      	ldr	r0, [pc, #120]	; (8001b08 <HAL_TIM_MspPostInit+0xbc>)
 8001a8e:	f000 fa23 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a92:	b009      	add	sp, #36	; 0x24
 8001a94:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 8001a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9a:	d111      	bne.n	8001ac0 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001aa0:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa4:	f042 0204 	orr.w	r2, r2, #4
 8001aa8:	619a      	str	r2, [r3, #24]
 8001aaa:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	9302      	str	r3, [sp, #8]
 8001ab4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abe:	e7e5      	b.n	8001a8c <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM3)
 8001ac0:	4a12      	ldr	r2, [pc, #72]	; (8001b0c <HAL_TIM_MspPostInit+0xc0>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d1e5      	bne.n	8001a92 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_TIM_MspPostInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	4811      	ldr	r0, [pc, #68]	; (8001b10 <HAL_TIM_MspPostInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aca:	6999      	ldr	r1, [r3, #24]
 8001acc:	f041 0108 	orr.w	r1, r1, #8
 8001ad0:	6199      	str	r1, [r3, #24]
 8001ad2:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad4:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ad6:	f003 0308 	and.w	r3, r3, #8
 8001ada:	9303      	str	r3, [sp, #12]
 8001adc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001ae0:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f000 f9f7 	bl	8001ed8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001aea:	4a0a      	ldr	r2, [pc, #40]	; (8001b14 <HAL_TIM_MspPostInit+0xc8>)
 8001aec:	6853      	ldr	r3, [r2, #4]
 8001aee:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001af2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001af6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001afa:	6053      	str	r3, [r2, #4]
}
 8001afc:	e7c9      	b.n	8001a92 <HAL_TIM_MspPostInit+0x46>
 8001afe:	bf00      	nop
 8001b00:	40012c00 	.word	0x40012c00
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40010800 	.word	0x40010800
 8001b0c:	40000400 	.word	0x40000400
 8001b10:	40010c00 	.word	0x40010c00
 8001b14:	40010000 	.word	0x40010000

08001b18 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <NMI_Handler>

08001b1a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b1a:	e7fe      	b.n	8001b1a <HardFault_Handler>

08001b1c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b1c:	e7fe      	b.n	8001b1c <MemManage_Handler>

08001b1e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b1e:	e7fe      	b.n	8001b1e <BusFault_Handler>

08001b20 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <UsageFault_Handler>

08001b22 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:
 8001b24:	4770      	bx	lr

08001b26 <PendSV_Handler>:
 8001b26:	4770      	bx	lr

08001b28 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b28:	f000 b88e 	b.w	8001c48 <HAL_IncTick>

08001b2c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	4770      	bx	lr

08001b30 <_kill>:

int _kill(int pid, int sig)
{
 8001b30:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b32:	f001 ff0d 	bl	8003950 <__errno>
 8001b36:	2316      	movs	r3, #22
 8001b38:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3e:	bd08      	pop	{r3, pc}

08001b40 <_exit>:

void _exit (int status)
{
 8001b40:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001b42:	f001 ff05 	bl	8003950 <__errno>
 8001b46:	2316      	movs	r3, #22
 8001b48:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001b4a:	e7fe      	b.n	8001b4a <_exit+0xa>

08001b4c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b4c:	4a0b      	ldr	r2, [pc, #44]	; (8001b7c <_sbrk+0x30>)
{
 8001b4e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b50:	6811      	ldr	r1, [r2, #0]
{
 8001b52:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b54:	b909      	cbnz	r1, 8001b5a <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b56:	490a      	ldr	r1, [pc, #40]	; (8001b80 <_sbrk+0x34>)
 8001b58:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5a:	6810      	ldr	r0, [r2, #0]
 8001b5c:	4909      	ldr	r1, [pc, #36]	; (8001b84 <_sbrk+0x38>)
 8001b5e:	4c0a      	ldr	r4, [pc, #40]	; (8001b88 <_sbrk+0x3c>)
 8001b60:	4403      	add	r3, r0
 8001b62:	1b09      	subs	r1, r1, r4
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d906      	bls.n	8001b76 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b68:	f001 fef2 	bl	8003950 <__errno>
 8001b6c:	230c      	movs	r3, #12
 8001b6e:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b70:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b74:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b76:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b78:	e7fc      	b.n	8001b74 <_sbrk+0x28>
 8001b7a:	bf00      	nop
 8001b7c:	20000420 	.word	0x20000420
 8001b80:	20000458 	.word	0x20000458
 8001b84:	20002800 	.word	0x20002800
 8001b88:	00000400 	.word	0x00000400

08001b8c <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	4770      	bx	lr

08001b8e <wrapper_cpp>:
#include<main.h>

void wrapper_cpp(void){
	//メイン関数
}
 8001b8e:	4770      	bx	lr

08001b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b90:	480c      	ldr	r0, [pc, #48]	; (8001bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b92:	490d      	ldr	r1, [pc, #52]	; (8001bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b94:	4a0d      	ldr	r2, [pc, #52]	; (8001bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b98:	e002      	b.n	8001ba0 <LoopCopyDataInit>

08001b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b9e:	3304      	adds	r3, #4

08001ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba4:	d3f9      	bcc.n	8001b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ba6:	4a0a      	ldr	r2, [pc, #40]	; (8001bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ba8:	4c0a      	ldr	r4, [pc, #40]	; (8001bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bac:	e001      	b.n	8001bb2 <LoopFillZerobss>

08001bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb0:	3204      	adds	r2, #4

08001bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb4:	d3fb      	bcc.n	8001bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bb6:	f7ff ffe9 	bl	8001b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bba:	f001 fecf 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bbe:	f7ff fd35 	bl	800162c <main>
  bx lr
 8001bc2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bc8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001bcc:	0800417c 	.word	0x0800417c
  ldr r2, =_sbss
 8001bd0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001bd4:	20000454 	.word	0x20000454

08001bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bd8:	e7fe      	b.n	8001bd8 <ADC1_2_IRQHandler>
	...

08001bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bdc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bde:	4b0e      	ldr	r3, [pc, #56]	; (8001c18 <HAL_InitTick+0x3c>)
{
 8001be0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001be2:	7818      	ldrb	r0, [r3, #0]
 8001be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001be8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bec:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <HAL_InitTick+0x40>)
 8001bee:	6810      	ldr	r0, [r2, #0]
 8001bf0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf4:	f000 f95c 	bl	8001eb0 <HAL_SYSTICK_Config>
 8001bf8:	4604      	mov	r4, r0
 8001bfa:	b958      	cbnz	r0, 8001c14 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bfc:	2d0f      	cmp	r5, #15
 8001bfe:	d809      	bhi.n	8001c14 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c00:	4602      	mov	r2, r0
 8001c02:	4629      	mov	r1, r5
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295
 8001c08:	f000 f920 	bl	8001e4c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c0c:	4620      	mov	r0, r4
 8001c0e:	4b04      	ldr	r3, [pc, #16]	; (8001c20 <HAL_InitTick+0x44>)
 8001c10:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001c12:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001c14:	2001      	movs	r0, #1
 8001c16:	e7fc      	b.n	8001c12 <HAL_InitTick+0x36>
 8001c18:	20000004 	.word	0x20000004
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000008 	.word	0x20000008

08001c24 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4a07      	ldr	r2, [pc, #28]	; (8001c44 <HAL_Init+0x20>)
{
 8001c26:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c28:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c2a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c2c:	f043 0310 	orr.w	r3, r3, #16
 8001c30:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c32:	f000 f8f9 	bl	8001e28 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	200f      	movs	r0, #15
 8001c38:	f7ff ffd0 	bl	8001bdc <HAL_InitTick>
  HAL_MspInit();
 8001c3c:	f7ff fe6c 	bl	8001918 <HAL_MspInit>
}
 8001c40:	2000      	movs	r0, #0
 8001c42:	bd08      	pop	{r3, pc}
 8001c44:	40022000 	.word	0x40022000

08001c48 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c48:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <HAL_IncTick+0x10>)
 8001c4a:	4b04      	ldr	r3, [pc, #16]	; (8001c5c <HAL_IncTick+0x14>)
 8001c4c:	6811      	ldr	r1, [r2, #0]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	440b      	add	r3, r1
 8001c52:	6013      	str	r3, [r2, #0]
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	20000424 	.word	0x20000424
 8001c5c:	20000004 	.word	0x20000004

08001c60 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c60:	4b01      	ldr	r3, [pc, #4]	; (8001c68 <HAL_GetTick+0x8>)
 8001c62:	6818      	ldr	r0, [r3, #0]
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000424 	.word	0x20000424

08001c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c6e:	4604      	mov	r4, r0
 8001c70:	2800      	cmp	r0, #0
 8001c72:	d06e      	beq.n	8001d52 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c74:	f890 3020 	ldrb.w	r3, [r0, #32]
 8001c78:	b90b      	cbnz	r3, 8001c7e <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c7a:	f7ff fe6f 	bl	800195c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c7e:	6822      	ldr	r2, [r4, #0]
 8001c80:	6813      	ldr	r3, [r2, #0]
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c88:	f7ff ffea 	bl	8001c60 <HAL_GetTick>
 8001c8c:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c8e:	6823      	ldr	r3, [r4, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	07d1      	lsls	r1, r2, #31
 8001c94:	d551      	bpl.n	8001d3a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	f022 0202 	bic.w	r2, r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c9e:	f7ff ffdf 	bl	8001c60 <HAL_GetTick>
 8001ca2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	685a      	ldr	r2, [r3, #4]
 8001ca8:	0792      	lsls	r2, r2, #30
 8001caa:	d454      	bmi.n	8001d56 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cac:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cae:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001cb0:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	bf0c      	ite	eq
 8001cb6:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001cba:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 8001cbe:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8001cc0:	7e62      	ldrb	r2, [r4, #25]
 8001cc2:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	bf0c      	ite	eq
 8001cc8:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ccc:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8001cd0:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001cd2:	7ea2      	ldrb	r2, [r4, #26]
 8001cd4:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	bf0c      	ite	eq
 8001cda:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001cde:	f022 0220 	bicne.w	r2, r2, #32
 8001ce2:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001ce4:	7ee2      	ldrb	r2, [r4, #27]
 8001ce6:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	bf0c      	ite	eq
 8001cec:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cf0:	f042 0210 	orrne.w	r2, r2, #16
 8001cf4:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cf6:	7f22      	ldrb	r2, [r4, #28]
 8001cf8:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	bf0c      	ite	eq
 8001cfe:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001d02:	f022 0208 	bicne.w	r2, r2, #8
 8001d06:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001d08:	7f62      	ldrb	r2, [r4, #29]
 8001d0a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	bf0c      	ite	eq
 8001d10:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d14:	f022 0204 	bicne.w	r2, r2, #4
 8001d18:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d1a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	6921      	ldr	r1, [r4, #16]
 8001d22:	430a      	orrs	r2, r1
 8001d24:	6961      	ldr	r1, [r4, #20]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	6861      	ldr	r1, [r4, #4]
 8001d2a:	3901      	subs	r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d30:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d32:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8001d34:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8001d38:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d3a:	f7ff ff91 	bl	8001c60 <HAL_GetTick>
 8001d3e:	1b40      	subs	r0, r0, r5
 8001d40:	280a      	cmp	r0, #10
 8001d42:	d9a4      	bls.n	8001c8e <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d4a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d4c:	2305      	movs	r3, #5
 8001d4e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 8001d52:	2001      	movs	r0, #1
 8001d54:	e7f0      	b.n	8001d38 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d56:	f7ff ff83 	bl	8001c60 <HAL_GetTick>
 8001d5a:	1b40      	subs	r0, r0, r5
 8001d5c:	280a      	cmp	r0, #10
 8001d5e:	d9a1      	bls.n	8001ca4 <HAL_CAN_Init+0x38>
 8001d60:	e7f0      	b.n	8001d44 <HAL_CAN_Init+0xd8>

08001d62 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001d62:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d64:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d68:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d6a:	3d01      	subs	r5, #1
 8001d6c:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001d6e:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 8001d70:	d841      	bhi.n	8001df6 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001d72:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8001d76:	d03a      	beq.n	8001dee <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001d78:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001d7c:	2c03      	cmp	r4, #3
 8001d7e:	f04f 0501 	mov.w	r5, #1
 8001d82:	d105      	bne.n	8001d90 <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001d84:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001d86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d8a:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	e028      	b.n	8001de2 <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001d90:	40a5      	lsls	r5, r4
 8001d92:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8001d94:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8001d98:	f104 0318 	add.w	r3, r4, #24
 8001d9c:	bb10      	cbnz	r0, 8001de4 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001d9e:	6808      	ldr	r0, [r1, #0]
 8001da0:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001da8:	0120      	lsls	r0, r4, #4
 8001daa:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dae:	4406      	add	r6, r0
      return HAL_OK;
 8001db0:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001db2:	690d      	ldr	r5, [r1, #16]
 8001db4:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001db8:	7d09      	ldrb	r1, [r1, #20]
 8001dba:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001dbc:	bf02      	ittt	eq
 8001dbe:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 8001dc2:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8001dc6:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001dca:	6851      	ldr	r1, [r2, #4]
 8001dcc:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001dd6:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8001de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001de4:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8001de6:	4338      	orrs	r0, r7
 8001de8:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8001dec:	e7da      	b.n	8001da4 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001dee:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001df4:	e7c9      	b.n	8001d8a <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001df6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001df8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dfc:	e7c5      	b.n	8001d8a <HAL_CAN_AddTxMessage+0x28>

08001dfe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001dfe:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e02:	3b01      	subs	r3, #1
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d80c      	bhi.n	8001e22 <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e08:	6803      	ldr	r3, [r0, #0]
 8001e0a:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001e0c:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001e0e:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001e10:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001e12:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 8001e16:	bf48      	it	mi
 8001e18:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	d502      	bpl.n	8001e24 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 8001e1e:	3001      	adds	r0, #1
 8001e20:	4770      	bx	lr
  uint32_t freelevel = 0U;
 8001e22:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 8001e24:	4770      	bx	lr
	...

08001e28 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e28:	4907      	ldr	r1, [pc, #28]	; (8001e48 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e2a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e2c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e2e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e32:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e36:	0412      	lsls	r2, r2, #16
 8001e38:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001e44:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e4c:	4b16      	ldr	r3, [pc, #88]	; (8001ea8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b530      	push	{r4, r5, lr}
 8001e50:	68dc      	ldr	r4, [r3, #12]
 8001e52:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e56:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	bf28      	it	cs
 8001e60:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e62:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e64:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e68:	bf98      	it	ls
 8001e6a:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e70:	bf88      	it	hi
 8001e72:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	ea21 0303 	bic.w	r3, r1, r3
 8001e78:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e7a:	fa05 f404 	lsl.w	r4, r5, r4
 8001e7e:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001e82:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e84:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e88:	bfac      	ite	ge
 8001e8a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	4a07      	ldrlt	r2, [pc, #28]	; (8001eac <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e90:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	bfab      	itete	ge
 8001e98:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ea4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ea6:	bd30      	pop	{r4, r5, pc}
 8001ea8:	e000ed00 	.word	0xe000ed00
 8001eac:	e000ed14 	.word	0xe000ed14

08001eb0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb0:	3801      	subs	r0, #1
 8001eb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001eb6:	d20b      	bcs.n	8001ed0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	21f0      	movs	r1, #240	; 0xf0
 8001ebe:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ec8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eca:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ecc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ece:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ed0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001ed2:	4770      	bx	lr
 8001ed4:	e000ed00 	.word	0xe000ed00

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001edc:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001ede:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ee0:	4f61      	ldr	r7, [pc, #388]	; (8002068 <HAL_GPIO_Init+0x190>)
 8001ee2:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 8001ee4:	f8df c188 	ldr.w	ip, [pc, #392]	; 8002070 <HAL_GPIO_Init+0x198>
 8001ee8:	f8df e188 	ldr.w	lr, [pc, #392]	; 8002074 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001eec:	680d      	ldr	r5, [r1, #0]
 8001eee:	fa35 f406 	lsrs.w	r4, r5, r6
 8001ef2:	d102      	bne.n	8001efa <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 8001ef4:	b003      	add	sp, #12
 8001ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001efa:	f04f 0801 	mov.w	r8, #1
 8001efe:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f02:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8001f06:	ea38 0505 	bics.w	r5, r8, r5
 8001f0a:	d177      	bne.n	8001ffc <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 8001f0c:	684d      	ldr	r5, [r1, #4]
 8001f0e:	2d03      	cmp	r5, #3
 8001f10:	d807      	bhi.n	8001f22 <HAL_GPIO_Init+0x4a>
 8001f12:	3d01      	subs	r5, #1
 8001f14:	2d02      	cmp	r5, #2
 8001f16:	f200 8082 	bhi.w	800201e <HAL_GPIO_Init+0x146>
 8001f1a:	e8df f005 	tbb	[pc, r5]
 8001f1e:	9792      	.short	0x9792
 8001f20:	9d          	.byte	0x9d
 8001f21:	00          	.byte	0x00
 8001f22:	2d12      	cmp	r5, #18
 8001f24:	f000 8095 	beq.w	8002052 <HAL_GPIO_Init+0x17a>
 8001f28:	d86a      	bhi.n	8002000 <HAL_GPIO_Init+0x128>
 8001f2a:	2d11      	cmp	r5, #17
 8001f2c:	f000 808b 	beq.w	8002046 <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f30:	2cff      	cmp	r4, #255	; 0xff
 8001f32:	bf98      	it	ls
 8001f34:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f36:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f3a:	bf88      	it	hi
 8001f3c:	f100 0a04 	addhi.w	sl, r0, #4
 8001f40:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f44:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f48:	bf88      	it	hi
 8001f4a:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f4c:	fa09 fb05 	lsl.w	fp, r9, r5
 8001f50:	ea28 080b 	bic.w	r8, r8, fp
 8001f54:	fa02 f505 	lsl.w	r5, r2, r5
 8001f58:	ea48 0505 	orr.w	r5, r8, r5
 8001f5c:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f60:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8001f64:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8001f68:	d048      	beq.n	8001ffc <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f6a:	69bd      	ldr	r5, [r7, #24]
 8001f6c:	f026 0803 	bic.w	r8, r6, #3
 8001f70:	f045 0501 	orr.w	r5, r5, #1
 8001f74:	61bd      	str	r5, [r7, #24]
 8001f76:	69bd      	ldr	r5, [r7, #24]
 8001f78:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8001f7c:	f005 0501 	and.w	r5, r5, #1
 8001f80:	9501      	str	r5, [sp, #4]
 8001f82:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f86:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f8a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f8c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001f90:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f94:	fa09 f90b 	lsl.w	r9, r9, fp
 8001f98:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f9c:	4d36      	ldr	r5, [pc, #216]	; (8002078 <HAL_GPIO_Init+0x1a0>)
 8001f9e:	42a8      	cmp	r0, r5
 8001fa0:	d05e      	beq.n	8002060 <HAL_GPIO_Init+0x188>
 8001fa2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fa6:	42a8      	cmp	r0, r5
 8001fa8:	d05c      	beq.n	8002064 <HAL_GPIO_Init+0x18c>
 8001faa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001fae:	42a8      	cmp	r0, r5
 8001fb0:	bf0c      	ite	eq
 8001fb2:	2502      	moveq	r5, #2
 8001fb4:	2503      	movne	r5, #3
 8001fb6:	fa05 f50b 	lsl.w	r5, r5, fp
 8001fba:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001fbe:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc2:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc4:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001fc8:	bf14      	ite	ne
 8001fca:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fcc:	43a5      	biceq	r5, r4
 8001fce:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd0:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fd2:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001fd6:	bf14      	ite	ne
 8001fd8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fda:	43a5      	biceq	r5, r4
 8001fdc:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fde:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fe0:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001fe4:	bf14      	ite	ne
 8001fe6:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fe8:	43a5      	biceq	r5, r4
 8001fea:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fec:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fee:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ff2:	bf14      	ite	ne
 8001ff4:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ff6:	ea25 0404 	biceq.w	r4, r5, r4
 8001ffa:	60dc      	str	r4, [r3, #12]
	position++;
 8001ffc:	3601      	adds	r6, #1
 8001ffe:	e775      	b.n	8001eec <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 8002000:	f8df 9078 	ldr.w	r9, [pc, #120]	; 800207c <HAL_GPIO_Init+0x1a4>
 8002004:	454d      	cmp	r5, r9
 8002006:	d00a      	beq.n	800201e <HAL_GPIO_Init+0x146>
 8002008:	d815      	bhi.n	8002036 <HAL_GPIO_Init+0x15e>
 800200a:	4575      	cmp	r5, lr
 800200c:	d007      	beq.n	800201e <HAL_GPIO_Init+0x146>
 800200e:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 8002012:	454d      	cmp	r5, r9
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x146>
 8002016:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 800201a:	454d      	cmp	r5, r9
 800201c:	d188      	bne.n	8001f30 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800201e:	688a      	ldr	r2, [r1, #8]
 8002020:	b1e2      	cbz	r2, 800205c <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002022:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8002024:	bf08      	it	eq
 8002026:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800202a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800202e:	bf18      	it	ne
 8002030:	f8c0 8014 	strne.w	r8, [r0, #20]
 8002034:	e77c      	b.n	8001f30 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002036:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8002080 <HAL_GPIO_Init+0x1a8>
 800203a:	454d      	cmp	r5, r9
 800203c:	d0ef      	beq.n	800201e <HAL_GPIO_Init+0x146>
 800203e:	4565      	cmp	r5, ip
 8002040:	e7ec      	b.n	800201c <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002042:	68ca      	ldr	r2, [r1, #12]
          break;
 8002044:	e774      	b.n	8001f30 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002046:	68ca      	ldr	r2, [r1, #12]
 8002048:	3204      	adds	r2, #4
          break;
 800204a:	e771      	b.n	8001f30 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800204c:	68ca      	ldr	r2, [r1, #12]
 800204e:	3208      	adds	r2, #8
          break;
 8002050:	e76e      	b.n	8001f30 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002052:	68ca      	ldr	r2, [r1, #12]
 8002054:	320c      	adds	r2, #12
          break;
 8002056:	e76b      	b.n	8001f30 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 8002058:	2200      	movs	r2, #0
 800205a:	e769      	b.n	8001f30 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800205c:	2204      	movs	r2, #4
 800205e:	e767      	b.n	8001f30 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002060:	2500      	movs	r5, #0
 8002062:	e7a8      	b.n	8001fb6 <HAL_GPIO_Init+0xde>
 8002064:	2501      	movs	r5, #1
 8002066:	e7a6      	b.n	8001fb6 <HAL_GPIO_Init+0xde>
 8002068:	40021000 	.word	0x40021000
 800206c:	40010400 	.word	0x40010400
 8002070:	10320000 	.word	0x10320000
 8002074:	10120000 	.word	0x10120000
 8002078:	40010800 	.word	0x40010800
 800207c:	10220000 	.word	0x10220000
 8002080:	10310000 	.word	0x10310000

08002084 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	b10a      	cbz	r2, 800208a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002086:	6101      	str	r1, [r0, #16]
  }
}
 8002088:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800208a:	0409      	lsls	r1, r1, #16
 800208c:	e7fb      	b.n	8002086 <HAL_GPIO_WritePin+0x2>
	...

08002090 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002090:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002094:	4605      	mov	r5, r0
 8002096:	b338      	cbz	r0, 80020e8 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002098:	6803      	ldr	r3, [r0, #0]
 800209a:	07db      	lsls	r3, r3, #31
 800209c:	d410      	bmi.n	80020c0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800209e:	682b      	ldr	r3, [r5, #0]
 80020a0:	079f      	lsls	r7, r3, #30
 80020a2:	d45e      	bmi.n	8002162 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a4:	682b      	ldr	r3, [r5, #0]
 80020a6:	0719      	lsls	r1, r3, #28
 80020a8:	f100 8095 	bmi.w	80021d6 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020ac:	682b      	ldr	r3, [r5, #0]
 80020ae:	075a      	lsls	r2, r3, #29
 80020b0:	f100 80c1 	bmi.w	8002236 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	69e8      	ldr	r0, [r5, #28]
 80020b6:	2800      	cmp	r0, #0
 80020b8:	f040 812c 	bne.w	8002314 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	e029      	b.n	8002114 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c0:	4c90      	ldr	r4, [pc, #576]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80020c2:	6863      	ldr	r3, [r4, #4]
 80020c4:	f003 030c 	and.w	r3, r3, #12
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d007      	beq.n	80020dc <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020cc:	6863      	ldr	r3, [r4, #4]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	2b08      	cmp	r3, #8
 80020d4:	d10a      	bne.n	80020ec <HAL_RCC_OscConfig+0x5c>
 80020d6:	6863      	ldr	r3, [r4, #4]
 80020d8:	03de      	lsls	r6, r3, #15
 80020da:	d507      	bpl.n	80020ec <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020dc:	6823      	ldr	r3, [r4, #0]
 80020de:	039c      	lsls	r4, r3, #14
 80020e0:	d5dd      	bpl.n	800209e <HAL_RCC_OscConfig+0xe>
 80020e2:	686b      	ldr	r3, [r5, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1da      	bne.n	800209e <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80020e8:	2001      	movs	r0, #1
 80020ea:	e013      	b.n	8002114 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ec:	686b      	ldr	r3, [r5, #4]
 80020ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020f2:	d112      	bne.n	800211a <HAL_RCC_OscConfig+0x8a>
 80020f4:	6823      	ldr	r3, [r4, #0]
 80020f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80020fc:	f7ff fdb0 	bl	8001c60 <HAL_GetTick>
 8002100:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002102:	6823      	ldr	r3, [r4, #0]
 8002104:	0398      	lsls	r0, r3, #14
 8002106:	d4ca      	bmi.n	800209e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002108:	f7ff fdaa 	bl	8001c60 <HAL_GetTick>
 800210c:	1b80      	subs	r0, r0, r6
 800210e:	2864      	cmp	r0, #100	; 0x64
 8002110:	d9f7      	bls.n	8002102 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8002112:	2003      	movs	r0, #3
}
 8002114:	b002      	add	sp, #8
 8002116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211a:	b99b      	cbnz	r3, 8002144 <HAL_RCC_OscConfig+0xb4>
 800211c:	6823      	ldr	r3, [r4, #0]
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6023      	str	r3, [r4, #0]
 8002124:	6823      	ldr	r3, [r4, #0]
 8002126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800212c:	f7ff fd98 	bl	8001c60 <HAL_GetTick>
 8002130:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	0399      	lsls	r1, r3, #14
 8002136:	d5b2      	bpl.n	800209e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002138:	f7ff fd92 	bl	8001c60 <HAL_GetTick>
 800213c:	1b80      	subs	r0, r0, r6
 800213e:	2864      	cmp	r0, #100	; 0x64
 8002140:	d9f7      	bls.n	8002132 <HAL_RCC_OscConfig+0xa2>
 8002142:	e7e6      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	6823      	ldr	r3, [r4, #0]
 800214a:	d103      	bne.n	8002154 <HAL_RCC_OscConfig+0xc4>
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6023      	str	r3, [r4, #0]
 8002152:	e7cf      	b.n	80020f4 <HAL_RCC_OscConfig+0x64>
 8002154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002158:	6023      	str	r3, [r4, #0]
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002160:	e7cb      	b.n	80020fa <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002162:	4c68      	ldr	r4, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 8002164:	6863      	ldr	r3, [r4, #4]
 8002166:	f013 0f0c 	tst.w	r3, #12
 800216a:	d007      	beq.n	800217c <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800216c:	6863      	ldr	r3, [r4, #4]
 800216e:	f003 030c 	and.w	r3, r3, #12
 8002172:	2b08      	cmp	r3, #8
 8002174:	d110      	bne.n	8002198 <HAL_RCC_OscConfig+0x108>
 8002176:	6863      	ldr	r3, [r4, #4]
 8002178:	03da      	lsls	r2, r3, #15
 800217a:	d40d      	bmi.n	8002198 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217c:	6823      	ldr	r3, [r4, #0]
 800217e:	079b      	lsls	r3, r3, #30
 8002180:	d502      	bpl.n	8002188 <HAL_RCC_OscConfig+0xf8>
 8002182:	692b      	ldr	r3, [r5, #16]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d1af      	bne.n	80020e8 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	696a      	ldr	r2, [r5, #20]
 800218c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002190:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002194:	6023      	str	r3, [r4, #0]
 8002196:	e785      	b.n	80020a4 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002198:	692a      	ldr	r2, [r5, #16]
 800219a:	4b5b      	ldr	r3, [pc, #364]	; (8002308 <HAL_RCC_OscConfig+0x278>)
 800219c:	b16a      	cbz	r2, 80021ba <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021a2:	f7ff fd5d 	bl	8001c60 <HAL_GetTick>
 80021a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	6823      	ldr	r3, [r4, #0]
 80021aa:	079f      	lsls	r7, r3, #30
 80021ac:	d4ec      	bmi.n	8002188 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ae:	f7ff fd57 	bl	8001c60 <HAL_GetTick>
 80021b2:	1b80      	subs	r0, r0, r6
 80021b4:	2802      	cmp	r0, #2
 80021b6:	d9f7      	bls.n	80021a8 <HAL_RCC_OscConfig+0x118>
 80021b8:	e7ab      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80021ba:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80021bc:	f7ff fd50 	bl	8001c60 <HAL_GetTick>
 80021c0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	6823      	ldr	r3, [r4, #0]
 80021c4:	0798      	lsls	r0, r3, #30
 80021c6:	f57f af6d 	bpl.w	80020a4 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ca:	f7ff fd49 	bl	8001c60 <HAL_GetTick>
 80021ce:	1b80      	subs	r0, r0, r6
 80021d0:	2802      	cmp	r0, #2
 80021d2:	d9f6      	bls.n	80021c2 <HAL_RCC_OscConfig+0x132>
 80021d4:	e79d      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	69aa      	ldr	r2, [r5, #24]
 80021d8:	4e4a      	ldr	r6, [pc, #296]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 80021da:	4b4b      	ldr	r3, [pc, #300]	; (8002308 <HAL_RCC_OscConfig+0x278>)
 80021dc:	b1e2      	cbz	r2, 8002218 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80021de:	2201      	movs	r2, #1
 80021e0:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 80021e4:	f7ff fd3c 	bl	8001c60 <HAL_GetTick>
 80021e8:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80021ec:	079b      	lsls	r3, r3, #30
 80021ee:	d50d      	bpl.n	800220c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80021f4:	4b45      	ldr	r3, [pc, #276]	; (800230c <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80021fc:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80021fe:	bf00      	nop
  }
  while (Delay --);
 8002200:	9b01      	ldr	r3, [sp, #4]
 8002202:	1e5a      	subs	r2, r3, #1
 8002204:	9201      	str	r2, [sp, #4]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f9      	bne.n	80021fe <HAL_RCC_OscConfig+0x16e>
 800220a:	e74f      	b.n	80020ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220c:	f7ff fd28 	bl	8001c60 <HAL_GetTick>
 8002210:	1b00      	subs	r0, r0, r4
 8002212:	2802      	cmp	r0, #2
 8002214:	d9e9      	bls.n	80021ea <HAL_RCC_OscConfig+0x15a>
 8002216:	e77c      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002218:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 800221c:	f7ff fd20 	bl	8001c60 <HAL_GetTick>
 8002220:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002222:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8002224:	079f      	lsls	r7, r3, #30
 8002226:	f57f af41 	bpl.w	80020ac <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7ff fd19 	bl	8001c60 <HAL_GetTick>
 800222e:	1b00      	subs	r0, r0, r4
 8002230:	2802      	cmp	r0, #2
 8002232:	d9f6      	bls.n	8002222 <HAL_RCC_OscConfig+0x192>
 8002234:	e76d      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002236:	4c33      	ldr	r4, [pc, #204]	; (8002304 <HAL_RCC_OscConfig+0x274>)
 8002238:	69e3      	ldr	r3, [r4, #28]
 800223a:	00d8      	lsls	r0, r3, #3
 800223c:	d424      	bmi.n	8002288 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800223e:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	69e3      	ldr	r3, [r4, #28]
 8002242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002246:	61e3      	str	r3, [r4, #28]
 8002248:	69e3      	ldr	r3, [r4, #28]
 800224a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224e:	9300      	str	r3, [sp, #0]
 8002250:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002252:	4e2f      	ldr	r6, [pc, #188]	; (8002310 <HAL_RCC_OscConfig+0x280>)
 8002254:	6833      	ldr	r3, [r6, #0]
 8002256:	05d9      	lsls	r1, r3, #23
 8002258:	d518      	bpl.n	800228c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800225a:	68eb      	ldr	r3, [r5, #12]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d126      	bne.n	80022ae <HAL_RCC_OscConfig+0x21e>
 8002260:	6a23      	ldr	r3, [r4, #32]
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002268:	f7ff fcfa 	bl	8001c60 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002270:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002272:	6a23      	ldr	r3, [r4, #32]
 8002274:	079b      	lsls	r3, r3, #30
 8002276:	d53f      	bpl.n	80022f8 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002278:	2f00      	cmp	r7, #0
 800227a:	f43f af1b 	beq.w	80020b4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	69e3      	ldr	r3, [r4, #28]
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	61e3      	str	r3, [r4, #28]
 8002286:	e715      	b.n	80020b4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002288:	2700      	movs	r7, #0
 800228a:	e7e2      	b.n	8002252 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800228c:	6833      	ldr	r3, [r6, #0]
 800228e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002292:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002294:	f7ff fce4 	bl	8001c60 <HAL_GetTick>
 8002298:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800229a:	6833      	ldr	r3, [r6, #0]
 800229c:	05da      	lsls	r2, r3, #23
 800229e:	d4dc      	bmi.n	800225a <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a0:	f7ff fcde 	bl	8001c60 <HAL_GetTick>
 80022a4:	eba0 0008 	sub.w	r0, r0, r8
 80022a8:	2864      	cmp	r0, #100	; 0x64
 80022aa:	d9f6      	bls.n	800229a <HAL_RCC_OscConfig+0x20a>
 80022ac:	e731      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022ae:	b9ab      	cbnz	r3, 80022dc <HAL_RCC_OscConfig+0x24c>
 80022b0:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6223      	str	r3, [r4, #32]
 80022bc:	6a23      	ldr	r3, [r4, #32]
 80022be:	f023 0304 	bic.w	r3, r3, #4
 80022c2:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80022c4:	f7ff fccc 	bl	8001c60 <HAL_GetTick>
 80022c8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ca:	6a23      	ldr	r3, [r4, #32]
 80022cc:	0798      	lsls	r0, r3, #30
 80022ce:	d5d3      	bpl.n	8002278 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff fcc6 	bl	8001c60 <HAL_GetTick>
 80022d4:	1b80      	subs	r0, r0, r6
 80022d6:	4540      	cmp	r0, r8
 80022d8:	d9f7      	bls.n	80022ca <HAL_RCC_OscConfig+0x23a>
 80022da:	e71a      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022dc:	2b05      	cmp	r3, #5
 80022de:	6a23      	ldr	r3, [r4, #32]
 80022e0:	d103      	bne.n	80022ea <HAL_RCC_OscConfig+0x25a>
 80022e2:	f043 0304 	orr.w	r3, r3, #4
 80022e6:	6223      	str	r3, [r4, #32]
 80022e8:	e7ba      	b.n	8002260 <HAL_RCC_OscConfig+0x1d0>
 80022ea:	f023 0301 	bic.w	r3, r3, #1
 80022ee:	6223      	str	r3, [r4, #32]
 80022f0:	6a23      	ldr	r3, [r4, #32]
 80022f2:	f023 0304 	bic.w	r3, r3, #4
 80022f6:	e7b6      	b.n	8002266 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022f8:	f7ff fcb2 	bl	8001c60 <HAL_GetTick>
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4540      	cmp	r0, r8
 8002300:	d9b7      	bls.n	8002272 <HAL_RCC_OscConfig+0x1e2>
 8002302:	e706      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
 8002304:	40021000 	.word	0x40021000
 8002308:	42420000 	.word	0x42420000
 800230c:	20000000 	.word	0x20000000
 8002310:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4c2a      	ldr	r4, [pc, #168]	; (80023c0 <HAL_RCC_OscConfig+0x330>)
 8002316:	6863      	ldr	r3, [r4, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	d03e      	beq.n	800239e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002320:	2200      	movs	r2, #0
 8002322:	4b28      	ldr	r3, [pc, #160]	; (80023c4 <HAL_RCC_OscConfig+0x334>)
 8002324:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002326:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002328:	d12c      	bne.n	8002384 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800232a:	f7ff fc99 	bl	8001c60 <HAL_GetTick>
 800232e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	0199      	lsls	r1, r3, #6
 8002334:	d420      	bmi.n	8002378 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002336:	6a2b      	ldr	r3, [r5, #32]
 8002338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233c:	d105      	bne.n	800234a <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800233e:	6862      	ldr	r2, [r4, #4]
 8002340:	68a9      	ldr	r1, [r5, #8]
 8002342:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002346:	430a      	orrs	r2, r1
 8002348:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800234c:	6862      	ldr	r2, [r4, #4]
 800234e:	430b      	orrs	r3, r1
 8002350:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8002354:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002356:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800235a:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <HAL_RCC_OscConfig+0x334>)
 800235c:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 800235e:	f7ff fc7f 	bl	8001c60 <HAL_GetTick>
 8002362:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	019a      	lsls	r2, r3, #6
 8002368:	f53f aea8 	bmi.w	80020bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236c:	f7ff fc78 	bl	8001c60 <HAL_GetTick>
 8002370:	1b40      	subs	r0, r0, r5
 8002372:	2802      	cmp	r0, #2
 8002374:	d9f6      	bls.n	8002364 <HAL_RCC_OscConfig+0x2d4>
 8002376:	e6cc      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002378:	f7ff fc72 	bl	8001c60 <HAL_GetTick>
 800237c:	1b80      	subs	r0, r0, r6
 800237e:	2802      	cmp	r0, #2
 8002380:	d9d6      	bls.n	8002330 <HAL_RCC_OscConfig+0x2a0>
 8002382:	e6c6      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002384:	f7ff fc6c 	bl	8001c60 <HAL_GetTick>
 8002388:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	019b      	lsls	r3, r3, #6
 800238e:	f57f ae95 	bpl.w	80020bc <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002392:	f7ff fc65 	bl	8001c60 <HAL_GetTick>
 8002396:	1b40      	subs	r0, r0, r5
 8002398:	2802      	cmp	r0, #2
 800239a:	d9f6      	bls.n	800238a <HAL_RCC_OscConfig+0x2fa>
 800239c:	e6b9      	b.n	8002112 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239e:	2801      	cmp	r0, #1
 80023a0:	f43f aeb8 	beq.w	8002114 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80023a4:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023a6:	6a2a      	ldr	r2, [r5, #32]
 80023a8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80023ac:	4291      	cmp	r1, r2
 80023ae:	f47f ae9b 	bne.w	80020e8 <HAL_RCC_OscConfig+0x58>
 80023b2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023b4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b8:	4293      	cmp	r3, r2
 80023ba:	f43f ae7f 	beq.w	80020bc <HAL_RCC_OscConfig+0x2c>
 80023be:	e693      	b.n	80020e8 <HAL_RCC_OscConfig+0x58>
 80023c0:	40021000 	.word	0x40021000
 80023c4:	42420000 	.word	0x42420000

080023c8 <HAL_RCC_GetSysClockFreq>:
{
 80023c8:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_GetSysClockFreq+0x64>)
{
 80023cc:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80023ce:	ac02      	add	r4, sp, #8
 80023d0:	f103 0510 	add.w	r5, r3, #16
 80023d4:	4622      	mov	r2, r4
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	6859      	ldr	r1, [r3, #4]
 80023da:	3308      	adds	r3, #8
 80023dc:	c203      	stmia	r2!, {r0, r1}
 80023de:	42ab      	cmp	r3, r5
 80023e0:	4614      	mov	r4, r2
 80023e2:	d1f7      	bne.n	80023d4 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023e4:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 80023e8:	4911      	ldr	r1, [pc, #68]	; (8002430 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80023ea:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 80023ee:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80023f0:	f003 020c 	and.w	r2, r3, #12
 80023f4:	2a08      	cmp	r2, #8
 80023f6:	d117      	bne.n	8002428 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80023f8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80023fc:	3218      	adds	r2, #24
 80023fe:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002400:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002402:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002406:	d50c      	bpl.n	8002422 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002408:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800240c:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002410:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002412:	3318      	adds	r3, #24
 8002414:	446b      	add	r3, sp
 8002416:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800241a:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800241e:	b007      	add	sp, #28
 8002420:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <HAL_RCC_GetSysClockFreq+0x70>)
 8002424:	4358      	muls	r0, r3
 8002426:	e7fa      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8002428:	4802      	ldr	r0, [pc, #8]	; (8002434 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800242a:	e7f8      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x56>
 800242c:	08003ee4 	.word	0x08003ee4
 8002430:	40021000 	.word	0x40021000
 8002434:	007a1200 	.word	0x007a1200
 8002438:	003d0900 	.word	0x003d0900

0800243c <HAL_RCC_ClockConfig>:
{
 800243c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002440:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002442:	4604      	mov	r4, r0
 8002444:	b910      	cbnz	r0, 800244c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002446:	2001      	movs	r0, #1
}
 8002448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800244c:	4a44      	ldr	r2, [pc, #272]	; (8002560 <HAL_RCC_ClockConfig+0x124>)
 800244e:	6813      	ldr	r3, [r2, #0]
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	428b      	cmp	r3, r1
 8002456:	d328      	bcc.n	80024aa <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002458:	6821      	ldr	r1, [r4, #0]
 800245a:	078e      	lsls	r6, r1, #30
 800245c:	d430      	bmi.n	80024c0 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245e:	07ca      	lsls	r2, r1, #31
 8002460:	d443      	bmi.n	80024ea <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002462:	4a3f      	ldr	r2, [pc, #252]	; (8002560 <HAL_RCC_ClockConfig+0x124>)
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	42ab      	cmp	r3, r5
 800246c:	d865      	bhi.n	800253a <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800246e:	6822      	ldr	r2, [r4, #0]
 8002470:	4d3c      	ldr	r5, [pc, #240]	; (8002564 <HAL_RCC_ClockConfig+0x128>)
 8002472:	f012 0f04 	tst.w	r2, #4
 8002476:	d16c      	bne.n	8002552 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	0713      	lsls	r3, r2, #28
 800247a:	d506      	bpl.n	800248a <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800247c:	686b      	ldr	r3, [r5, #4]
 800247e:	6922      	ldr	r2, [r4, #16]
 8002480:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002484:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002488:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800248a:	f7ff ff9d 	bl	80023c8 <HAL_RCC_GetSysClockFreq>
 800248e:	686b      	ldr	r3, [r5, #4]
 8002490:	4a35      	ldr	r2, [pc, #212]	; (8002568 <HAL_RCC_ClockConfig+0x12c>)
 8002492:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002496:	5cd3      	ldrb	r3, [r2, r3]
 8002498:	40d8      	lsrs	r0, r3
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCC_ClockConfig+0x130>)
 800249c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 800249e:	4b34      	ldr	r3, [pc, #208]	; (8002570 <HAL_RCC_ClockConfig+0x134>)
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	f7ff fb9b 	bl	8001bdc <HAL_InitTick>
  return HAL_OK;
 80024a6:	2000      	movs	r0, #0
 80024a8:	e7ce      	b.n	8002448 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024aa:	6813      	ldr	r3, [r2, #0]
 80024ac:	f023 0307 	bic.w	r3, r3, #7
 80024b0:	430b      	orrs	r3, r1
 80024b2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b4:	6813      	ldr	r3, [r2, #0]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	428b      	cmp	r3, r1
 80024bc:	d1c3      	bne.n	8002446 <HAL_RCC_ClockConfig+0xa>
 80024be:	e7cb      	b.n	8002458 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024c0:	4b28      	ldr	r3, [pc, #160]	; (8002564 <HAL_RCC_ClockConfig+0x128>)
 80024c2:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024c6:	bf1e      	ittt	ne
 80024c8:	685a      	ldrne	r2, [r3, #4]
 80024ca:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 80024ce:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024d2:	bf42      	ittt	mi
 80024d4:	685a      	ldrmi	r2, [r3, #4]
 80024d6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 80024da:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	68a0      	ldr	r0, [r4, #8]
 80024e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80024e4:	4302      	orrs	r2, r0
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	e7b9      	b.n	800245e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	6862      	ldr	r2, [r4, #4]
 80024ec:	4e1d      	ldr	r6, [pc, #116]	; (8002564 <HAL_RCC_ClockConfig+0x128>)
 80024ee:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f0:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024f2:	d11a      	bne.n	800252a <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f8:	d0a5      	beq.n	8002446 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024fa:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002500:	f023 0303 	bic.w	r3, r3, #3
 8002504:	4313      	orrs	r3, r2
 8002506:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002508:	f7ff fbaa 	bl	8001c60 <HAL_GetTick>
 800250c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	6873      	ldr	r3, [r6, #4]
 8002510:	6862      	ldr	r2, [r4, #4]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800251a:	d0a2      	beq.n	8002462 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800251c:	f7ff fba0 	bl	8001c60 <HAL_GetTick>
 8002520:	1bc0      	subs	r0, r0, r7
 8002522:	4540      	cmp	r0, r8
 8002524:	d9f3      	bls.n	800250e <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8002526:	2003      	movs	r0, #3
 8002528:	e78e      	b.n	8002448 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800252a:	2a02      	cmp	r2, #2
 800252c:	d102      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800252e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002532:	e7e1      	b.n	80024f8 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	f013 0f02 	tst.w	r3, #2
 8002538:	e7de      	b.n	80024f8 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	6813      	ldr	r3, [r2, #0]
 800253c:	f023 0307 	bic.w	r3, r3, #7
 8002540:	432b      	orrs	r3, r5
 8002542:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002544:	6813      	ldr	r3, [r2, #0]
 8002546:	f003 0307 	and.w	r3, r3, #7
 800254a:	42ab      	cmp	r3, r5
 800254c:	f47f af7b 	bne.w	8002446 <HAL_RCC_ClockConfig+0xa>
 8002550:	e78d      	b.n	800246e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002552:	686b      	ldr	r3, [r5, #4]
 8002554:	68e1      	ldr	r1, [r4, #12]
 8002556:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800255a:	430b      	orrs	r3, r1
 800255c:	606b      	str	r3, [r5, #4]
 800255e:	e78b      	b.n	8002478 <HAL_RCC_ClockConfig+0x3c>
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	08003ed4 	.word	0x08003ed4
 800256c:	20000000 	.word	0x20000000
 8002570:	20000008 	.word	0x20000008

08002574 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002574:	6a03      	ldr	r3, [r0, #32]
{
 8002576:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002578:	f023 0301 	bic.w	r3, r3, #1
 800257c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800257e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002580:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002582:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002584:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002586:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800258a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800258c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800258e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8002592:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002594:	4d0a      	ldr	r5, [pc, #40]	; (80025c0 <TIM_OC1_SetConfig+0x4c>)
 8002596:	42a8      	cmp	r0, r5
 8002598:	d10b      	bne.n	80025b2 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800259a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 800259c:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80025a0:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80025a2:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80025a6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80025aa:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80025ac:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80025b0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025b2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80025b4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80025b6:	684a      	ldr	r2, [r1, #4]
 80025b8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	6203      	str	r3, [r0, #32]
}
 80025bc:	bd70      	pop	{r4, r5, r6, pc}
 80025be:	bf00      	nop
 80025c0:	40012c00 	.word	0x40012c00

080025c4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025c4:	6a03      	ldr	r3, [r0, #32]
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80025c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025cc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025ce:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025d2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025d4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80025d6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80025da:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025dc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80025de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025e2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025e6:	4d0b      	ldr	r5, [pc, #44]	; (8002614 <TIM_OC3_SetConfig+0x50>)
 80025e8:	42a8      	cmp	r0, r5
 80025ea:	d10d      	bne.n	8002608 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025ec:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80025ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025f2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80025f6:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80025fa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80025fe:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002600:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002604:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002608:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800260a:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800260c:	684a      	ldr	r2, [r1, #4]
 800260e:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002610:	6203      	str	r3, [r0, #32]
}
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	40012c00 	.word	0x40012c00

08002618 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002618:	6a03      	ldr	r3, [r0, #32]
{
 800261a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800261c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002620:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002622:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002624:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002626:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002628:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800262a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800262e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002632:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002634:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002638:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263c:	4d06      	ldr	r5, [pc, #24]	; (8002658 <TIM_OC4_SetConfig+0x40>)
 800263e:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002640:	bf02      	ittt	eq
 8002642:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002644:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002648:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800264c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800264e:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002650:	684a      	ldr	r2, [r1, #4]
 8002652:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002654:	6203      	str	r3, [r0, #32]
}
 8002656:	bd30      	pop	{r4, r5, pc}
 8002658:	40012c00 	.word	0x40012c00

0800265c <HAL_TIM_OC_MspInit>:
 800265c:	4770      	bx	lr

0800265e <HAL_TIM_PWM_MspInit>:
 800265e:	4770      	bx	lr

08002660 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002660:	4a16      	ldr	r2, [pc, #88]	; (80026bc <TIM_Base_SetConfig+0x5c>)
{
 8002662:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002664:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8002666:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002668:	d005      	beq.n	8002676 <TIM_Base_SetConfig+0x16>
 800266a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800266e:	d002      	beq.n	8002676 <TIM_Base_SetConfig+0x16>
 8002670:	4c13      	ldr	r4, [pc, #76]	; (80026c0 <TIM_Base_SetConfig+0x60>)
 8002672:	42a0      	cmp	r0, r4
 8002674:	d110      	bne.n	8002698 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 8002676:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800267c:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 800267e:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002682:	d005      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 8002684:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002688:	d002      	beq.n	8002690 <TIM_Base_SetConfig+0x30>
 800268a:	4a0d      	ldr	r2, [pc, #52]	; (80026c0 <TIM_Base_SetConfig+0x60>)
 800268c:	4290      	cmp	r0, r2
 800268e:	d103      	bne.n	8002698 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002690:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002692:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002696:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002698:	694a      	ldr	r2, [r1, #20]
 800269a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800269e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80026a0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026a2:	688b      	ldr	r3, [r1, #8]
 80026a4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80026a6:	680b      	ldr	r3, [r1, #0]
 80026a8:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <TIM_Base_SetConfig+0x5c>)
 80026ac:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80026ae:	bf04      	itt	eq
 80026b0:	690b      	ldreq	r3, [r1, #16]
 80026b2:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80026b4:	2301      	movs	r3, #1
 80026b6:	6143      	str	r3, [r0, #20]
}
 80026b8:	bd10      	pop	{r4, pc}
 80026ba:	bf00      	nop
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400

080026c4 <HAL_TIM_Base_Init>:
{
 80026c4:	b510      	push	{r4, lr}
  if (htim == NULL)
 80026c6:	4604      	mov	r4, r0
 80026c8:	b330      	cbz	r0, 8002718 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80026ca:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80026ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80026d2:	b91b      	cbnz	r3, 80026dc <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80026d4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80026d8:	f7ff f984 	bl	80019e4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026de:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80026e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026e4:	1d21      	adds	r1, r4, #4
 80026e6:	f7ff ffbb 	bl	8002660 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ea:	2301      	movs	r3, #1
  return HAL_OK;
 80026ec:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ee:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80026f6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80026fa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80026fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002702:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002706:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800270a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800270e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8002712:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002716:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002718:	2001      	movs	r0, #1
 800271a:	e7fc      	b.n	8002716 <HAL_TIM_Base_Init+0x52>

0800271c <HAL_TIM_OC_Init>:
{
 800271c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800271e:	4604      	mov	r4, r0
 8002720:	b330      	cbz	r0, 8002770 <HAL_TIM_OC_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002722:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002726:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800272a:	b91b      	cbnz	r3, 8002734 <HAL_TIM_OC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800272c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8002730:	f7ff ff94 	bl	800265c <HAL_TIM_OC_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002734:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002736:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002738:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800273c:	1d21      	adds	r1, r4, #4
 800273e:	f7ff ff8f 	bl	8002660 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002742:	2301      	movs	r3, #1
  return HAL_OK;
 8002744:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002746:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800274a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800274e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8002752:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8002756:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800275a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800275e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002762:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8002766:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800276a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800276e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002770:	2001      	movs	r0, #1
 8002772:	e7fc      	b.n	800276e <HAL_TIM_OC_Init+0x52>

08002774 <HAL_TIM_PWM_Init>:
{
 8002774:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002776:	4604      	mov	r4, r0
 8002778:	b330      	cbz	r0, 80027c8 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800277a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800277e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002782:	b91b      	cbnz	r3, 800278c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002784:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8002788:	f7ff ff69 	bl	800265e <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800278e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002790:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	1d21      	adds	r1, r4, #4
 8002796:	f7ff ff63 	bl	8002660 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279a:	2301      	movs	r3, #1
  return HAL_OK;
 800279c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800279e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027a2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80027a6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80027aa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80027ae:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80027b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80027ba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80027be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80027c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80027c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e7fc      	b.n	80027c6 <HAL_TIM_PWM_Init+0x52>

080027cc <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027cc:	6a03      	ldr	r3, [r0, #32]
{
 80027ce:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027d0:	f023 0310 	bic.w	r3, r3, #16
 80027d4:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80027d6:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80027d8:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80027da:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027dc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027de:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027e2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80027e8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027ec:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027f0:	4d0b      	ldr	r5, [pc, #44]	; (8002820 <TIM_OC2_SetConfig+0x54>)
 80027f2:	42a8      	cmp	r0, r5
 80027f4:	d10d      	bne.n	8002812 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027f6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027fc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002800:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002804:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8002808:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800280a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800280e:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002812:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002814:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002816:	684a      	ldr	r2, [r1, #4]
 8002818:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800281a:	6203      	str	r3, [r0, #32]
}
 800281c:	bd70      	pop	{r4, r5, r6, pc}
 800281e:	bf00      	nop
 8002820:	40012c00 	.word	0x40012c00

08002824 <HAL_TIM_OC_ConfigChannel>:
{
 8002824:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 8002826:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800282a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800282c:	2b01      	cmp	r3, #1
 800282e:	d01e      	beq.n	800286e <HAL_TIM_OC_ConfigChannel+0x4a>
 8002830:	2301      	movs	r3, #1
  switch (Channel)
 8002832:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002834:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002838:	d015      	beq.n	8002866 <HAL_TIM_OC_ConfigChannel+0x42>
 800283a:	d806      	bhi.n	800284a <HAL_TIM_OC_ConfigChannel+0x26>
 800283c:	b15a      	cbz	r2, 8002856 <HAL_TIM_OC_ConfigChannel+0x32>
 800283e:	2a04      	cmp	r2, #4
 8002840:	d00d      	beq.n	800285e <HAL_TIM_OC_ConfigChannel+0x3a>
  __HAL_UNLOCK(htim);
 8002842:	2000      	movs	r0, #0
 8002844:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002848:	bd10      	pop	{r4, pc}
  switch (Channel)
 800284a:	2a0c      	cmp	r2, #12
 800284c:	d1f9      	bne.n	8002842 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800284e:	6800      	ldr	r0, [r0, #0]
 8002850:	f7ff fee2 	bl	8002618 <TIM_OC4_SetConfig>
      break;
 8002854:	e7f5      	b.n	8002842 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002856:	6800      	ldr	r0, [r0, #0]
 8002858:	f7ff fe8c 	bl	8002574 <TIM_OC1_SetConfig>
      break;
 800285c:	e7f1      	b.n	8002842 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800285e:	6800      	ldr	r0, [r0, #0]
 8002860:	f7ff ffb4 	bl	80027cc <TIM_OC2_SetConfig>
      break;
 8002864:	e7ed      	b.n	8002842 <HAL_TIM_OC_ConfigChannel+0x1e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	f7ff feac 	bl	80025c4 <TIM_OC3_SetConfig>
      break;
 800286c:	e7e9      	b.n	8002842 <HAL_TIM_OC_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 800286e:	2002      	movs	r0, #2
 8002870:	e7ea      	b.n	8002848 <HAL_TIM_OC_ConfigChannel+0x24>

08002872 <HAL_TIM_PWM_ConfigChannel>:
{
 8002872:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002874:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002878:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800287a:	2b01      	cmp	r3, #1
 800287c:	d052      	beq.n	8002924 <HAL_TIM_PWM_ConfigChannel+0xb2>
 800287e:	2301      	movs	r3, #1
  switch (Channel)
 8002880:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8002882:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8002886:	d03c      	beq.n	8002902 <HAL_TIM_PWM_ConfigChannel+0x90>
 8002888:	d806      	bhi.n	8002898 <HAL_TIM_PWM_ConfigChannel+0x26>
 800288a:	b1c2      	cbz	r2, 80028be <HAL_TIM_PWM_ConfigChannel+0x4c>
 800288c:	2a04      	cmp	r2, #4
 800288e:	d027      	beq.n	80028e0 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8002890:	2000      	movs	r0, #0
 8002892:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002896:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 8002898:	2a0c      	cmp	r2, #12
 800289a:	d1f9      	bne.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800289c:	6800      	ldr	r0, [r0, #0]
 800289e:	f7ff febb 	bl	8002618 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80028a6:	69da      	ldr	r2, [r3, #28]
 80028a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80028b6:	69da      	ldr	r2, [r3, #28]
 80028b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80028bc:	e030      	b.n	8002920 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80028be:	6800      	ldr	r0, [r0, #0]
 80028c0:	f7ff fe58 	bl	8002574 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028c6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	f042 0208 	orr.w	r2, r2, #8
 80028ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80028d0:	699a      	ldr	r2, [r3, #24]
 80028d2:	f022 0204 	bic.w	r2, r2, #4
 80028d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80028d8:	699a      	ldr	r2, [r3, #24]
 80028da:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028dc:	619a      	str	r2, [r3, #24]
      break;
 80028de:	e7d7      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80028e0:	6800      	ldr	r0, [r0, #0]
 80028e2:	f7ff ff73 	bl	80027cc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028e6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028e8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80028f2:	699a      	ldr	r2, [r3, #24]
 80028f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80028fa:	699a      	ldr	r2, [r3, #24]
 80028fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002900:	e7ec      	b.n	80028dc <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002902:	6800      	ldr	r0, [r0, #0]
 8002904:	f7ff fe5e 	bl	80025c4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002908:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800290a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800290c:	69da      	ldr	r2, [r3, #28]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002914:	69da      	ldr	r2, [r3, #28]
 8002916:	f022 0204 	bic.w	r2, r2, #4
 800291a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800291c:	69da      	ldr	r2, [r3, #28]
 800291e:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002920:	61da      	str	r2, [r3, #28]
      break;
 8002922:	e7b5      	b.n	8002890 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8002924:	2002      	movs	r0, #2
 8002926:	e7b6      	b.n	8002896 <HAL_TIM_PWM_ConfigChannel+0x24>

08002928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002928:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800292a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800292c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800292e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002932:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002936:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002938:	6082      	str	r2, [r0, #8]
}
 800293a:	bd10      	pop	{r4, pc}

0800293c <HAL_TIM_ConfigClockSource>:
{
 800293c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800293e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8002942:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002944:	2b01      	cmp	r3, #1
 8002946:	f04f 0002 	mov.w	r0, #2
 800294a:	d027      	beq.n	800299c <HAL_TIM_ConfigClockSource+0x60>
 800294c:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800294e:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002952:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002954:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002958:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800295a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800295e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002962:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002964:	680b      	ldr	r3, [r1, #0]
 8002966:	2b60      	cmp	r3, #96	; 0x60
 8002968:	d04d      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0xca>
 800296a:	d832      	bhi.n	80029d2 <HAL_TIM_ConfigClockSource+0x96>
 800296c:	2b40      	cmp	r3, #64	; 0x40
 800296e:	d062      	beq.n	8002a36 <HAL_TIM_ConfigClockSource+0xfa>
 8002970:	d815      	bhi.n	800299e <HAL_TIM_ConfigClockSource+0x62>
 8002972:	2b20      	cmp	r3, #32
 8002974:	d003      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x42>
 8002976:	d809      	bhi.n	800298c <HAL_TIM_ConfigClockSource+0x50>
 8002978:	f033 0210 	bics.w	r2, r3, #16
 800297c:	d108      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800297e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002980:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002984:	4313      	orrs	r3, r2
 8002986:	f043 0307 	orr.w	r3, r3, #7
 800298a:	e020      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800298c:	2b30      	cmp	r3, #48	; 0x30
 800298e:	d0f6      	beq.n	800297e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002990:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002992:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002994:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002998:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800299c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800299e:	2b50      	cmp	r3, #80	; 0x50
 80029a0:	d1f6      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a2:	684a      	ldr	r2, [r1, #4]
 80029a4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80029a6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029a8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029aa:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ae:	f025 0501 	bic.w	r5, r5, #1
 80029b2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029b4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80029b6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029bc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80029c0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80029c2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80029c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80029c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ca:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80029ce:	6083      	str	r3, [r0, #8]
}
 80029d0:	e7de      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80029d2:	2b70      	cmp	r3, #112	; 0x70
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_ConfigClockSource+0xb4>
 80029d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029da:	d1d9      	bne.n	8002990 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80029dc:	68cb      	ldr	r3, [r1, #12]
 80029de:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80029e2:	f7ff ffa1 	bl	8002928 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029e6:	6822      	ldr	r2, [r4, #0]
 80029e8:	6893      	ldr	r3, [r2, #8]
 80029ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029ee:	e008      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80029f0:	68cb      	ldr	r3, [r1, #12]
 80029f2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80029f6:	f7ff ff97 	bl	8002928 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80029fa:	6822      	ldr	r2, [r4, #0]
 80029fc:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a02:	6093      	str	r3, [r2, #8]
      break;
 8002a04:	e7c4      	b.n	8002990 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a06:	684d      	ldr	r5, [r1, #4]
 8002a08:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0a:	6a01      	ldr	r1, [r0, #32]
 8002a0c:	f021 0110 	bic.w	r1, r1, #16
 8002a10:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a12:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002a14:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a16:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a22:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002a26:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a28:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a2a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a30:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002a34:	e7cb      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a36:	684a      	ldr	r2, [r1, #4]
 8002a38:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002a3a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a3c:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a3e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a42:	f025 0501 	bic.w	r5, r5, #1
 8002a46:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a48:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8002a4a:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a50:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002a54:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002a56:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002a58:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a5e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002a62:	e7b4      	b.n	80029ce <HAL_TIM_ConfigClockSource+0x92>

08002a64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a64:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a66:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8002a6a:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8002a6c:	2a01      	cmp	r2, #1
 8002a6e:	f04f 0002 	mov.w	r0, #2
 8002a72:	d01e      	beq.n	8002ab2 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a74:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002a76:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8002a7a:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a7c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a7e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a82:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8002a84:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a86:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a88:	4c0a      	ldr	r4, [pc, #40]	; (8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8002a8a:	42a2      	cmp	r2, r4
 8002a8c:	d006      	beq.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002a8e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8002a92:	d003      	beq.n	8002a9c <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8002a94:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002a98:	42a2      	cmp	r2, r4
 8002a9a:	d104      	bne.n	8002aa6 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a9c:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a9e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002aa2:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002aa4:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002aa6:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8002aa8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002aae:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 8002ab2:	bd30      	pop	{r4, r5, pc}
 8002ab4:	40012c00 	.word	0x40012c00

08002ab8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ab8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d01f      	beq.n	8002b00 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ac0:	68cb      	ldr	r3, [r1, #12]
 8002ac2:	688a      	ldr	r2, [r1, #8]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002aca:	684a      	ldr	r2, [r1, #4]
 8002acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ad0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ad2:	680a      	ldr	r2, [r1, #0]
 8002ad4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ad8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ada:	690a      	ldr	r2, [r1, #16]
 8002adc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ae0:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ae2:	694a      	ldr	r2, [r1, #20]
 8002ae4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ae8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002aea:	69ca      	ldr	r2, [r1, #28]
 8002aec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002af0:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002af6:	2300      	movs	r3, #0
 8002af8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002afc:	4618      	mov	r0, r3
 8002afe:	4770      	bx	lr
  __HAL_LOCK(htim);
 8002b00:	2002      	movs	r0, #2
}
 8002b02:	4770      	bx	lr

08002b04 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8002b04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002b06:	2400      	movs	r4, #0
 8002b08:	2310      	movs	r3, #16
 8002b0a:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002b0e:	6803      	ldr	r3, [r0, #0]
 8002b10:	4615      	mov	r5, r2
 8002b12:	699e      	ldr	r6, [r3, #24]
 8002b14:	e9cd 4400 	strd	r4, r4, [sp]
 8002b18:	466b      	mov	r3, sp
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	47b0      	blx	r6
 8002b1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002b22:	f003 0306 	and.w	r3, r3, #6
 8002b26:	2b06      	cmp	r3, #6
 8002b28:	bf09      	itett	eq
 8002b2a:	2001      	moveq	r0, #1
 8002b2c:	4620      	movne	r0, r4
 8002b2e:	9b00      	ldreq	r3, [sp, #0]
 8002b30:	602b      	streq	r3, [r5, #0]
 8002b32:	b004      	add	sp, #16
 8002b34:	bd70      	pop	{r4, r5, r6, pc}

08002b36 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 8002b36:	9800      	ldr	r0, [sp, #0]
 8002b38:	4290      	cmp	r0, r2
 8002b3a:	bf14      	ite	ne
 8002b3c:	2001      	movne	r0, #1
 8002b3e:	2006      	moveq	r0, #6
 8002b40:	4770      	bx	lr
	...

08002b44 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8002b44:	b510      	push	{r4, lr}
 8002b46:	4604      	mov	r4, r0
 8002b48:	4b02      	ldr	r3, [pc, #8]	; (8002b54 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 8002b4a:	6003      	str	r3, [r0, #0]
 8002b4c:	f000 fc21 	bl	8003392 <_ZNSt9type_infoD1Ev>
 8002b50:	4620      	mov	r0, r4
 8002b52:	bd10      	pop	{r4, pc}
 8002b54:	08003f30 	.word	0x08003f30

08002b58 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	4604      	mov	r4, r0
 8002b5c:	f7ff fff2 	bl	8002b44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8002b60:	4620      	mov	r0, r4
 8002b62:	2108      	movs	r1, #8
 8002b64:	f000 f842 	bl	8002bec <_ZdlPvj>
 8002b68:	4620      	mov	r0, r4
 8002b6a:	bd10      	pop	{r4, pc}

08002b6c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8002b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b70:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002b74:	461f      	mov	r7, r3
 8002b76:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8002b7a:	4598      	cmp	r8, r3
 8002b7c:	4606      	mov	r6, r0
 8002b7e:	4615      	mov	r5, r2
 8002b80:	d107      	bne.n	8002b92 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8002b82:	9907      	ldr	r1, [sp, #28]
 8002b84:	f000 fc08 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8002b88:	b118      	cbz	r0, 8002b92 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8002b8a:	7165      	strb	r5, [r4, #5]
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b92:	4639      	mov	r1, r7
 8002b94:	4630      	mov	r0, r6
 8002b96:	f000 fbff 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8002b9a:	2800      	cmp	r0, #0
 8002b9c:	d0f6      	beq.n	8002b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	f8c4 8000 	str.w	r8, [r4]
 8002ba4:	7125      	strb	r5, [r4, #4]
 8002ba6:	71a3      	strb	r3, [r4, #6]
 8002ba8:	e7f0      	b.n	8002b8c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08002baa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	4615      	mov	r5, r2
 8002bae:	461c      	mov	r4, r3
 8002bb0:	f000 fbf2 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8002bb4:	b120      	cbz	r0, 8002bc0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	60e3      	str	r3, [r4, #12]
 8002bba:	2306      	movs	r3, #6
 8002bbc:	6025      	str	r5, [r4, #0]
 8002bbe:	7123      	strb	r3, [r4, #4]
 8002bc0:	bd38      	pop	{r3, r4, r5, pc}

08002bc2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8002bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002bc6:	4605      	mov	r5, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	4616      	mov	r6, r2
 8002bcc:	461f      	mov	r7, r3
 8002bce:	f000 fbe3 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8002bd2:	b948      	cbnz	r0, 8002be8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8002bd4:	2f03      	cmp	r7, #3
 8002bd6:	d807      	bhi.n	8002be8 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	4632      	mov	r2, r6
 8002bdc:	4629      	mov	r1, r5
 8002bde:	4620      	mov	r0, r4
 8002be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	4718      	bx	r3
 8002be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bec <_ZdlPvj>:
 8002bec:	f000 be20 	b.w	8003830 <_ZdlPv>

08002bf0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 8002bf0:	b538      	push	{r3, r4, r5, lr}
 8002bf2:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 8002bf6:	4c07      	ldr	r4, [pc, #28]	; (8002c14 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 8002bf8:	4628      	mov	r0, r5
 8002bfa:	60e5      	str	r5, [r4, #12]
 8002bfc:	f000 fed2 	bl	80039a4 <malloc>
 8002c00:	60a0      	str	r0, [r4, #8]
 8002c02:	b910      	cbnz	r0, 8002c0a <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 8002c04:	60e0      	str	r0, [r4, #12]
 8002c06:	6060      	str	r0, [r4, #4]
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	6060      	str	r0, [r4, #4]
 8002c0e:	6005      	str	r5, [r0, #0]
 8002c10:	6043      	str	r3, [r0, #4]
 8002c12:	e7f9      	b.n	8002c08 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 8002c14:	20000428 	.word	0x20000428

08002c18 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8002c18:	7803      	ldrb	r3, [r0, #0]
 8002c1a:	2b47      	cmp	r3, #71	; 0x47
 8002c1c:	d117      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c1e:	7843      	ldrb	r3, [r0, #1]
 8002c20:	2b4e      	cmp	r3, #78	; 0x4e
 8002c22:	d114      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c24:	7883      	ldrb	r3, [r0, #2]
 8002c26:	2b55      	cmp	r3, #85	; 0x55
 8002c28:	d111      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c2a:	78c3      	ldrb	r3, [r0, #3]
 8002c2c:	2b43      	cmp	r3, #67	; 0x43
 8002c2e:	d10e      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c30:	7903      	ldrb	r3, [r0, #4]
 8002c32:	2b43      	cmp	r3, #67	; 0x43
 8002c34:	d10b      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c36:	7943      	ldrb	r3, [r0, #5]
 8002c38:	2b2b      	cmp	r3, #43	; 0x2b
 8002c3a:	d108      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c3c:	7983      	ldrb	r3, [r0, #6]
 8002c3e:	2b2b      	cmp	r3, #43	; 0x2b
 8002c40:	d105      	bne.n	8002c4e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8002c42:	79c0      	ldrb	r0, [r0, #7]
 8002c44:	2801      	cmp	r0, #1
 8002c46:	bf8c      	ite	hi
 8002c48:	2000      	movhi	r0, #0
 8002c4a:	2001      	movls	r0, #1
 8002c4c:	4770      	bx	lr
 8002c4e:	2000      	movs	r0, #0
 8002c50:	4770      	bx	lr
	...

08002c54 <__cxa_type_match>:
 8002c54:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c58:	461d      	mov	r5, r3
 8002c5a:	7803      	ldrb	r3, [r0, #0]
 8002c5c:	460e      	mov	r6, r1
 8002c5e:	2b47      	cmp	r3, #71	; 0x47
 8002c60:	4602      	mov	r2, r0
 8002c62:	79c1      	ldrb	r1, [r0, #7]
 8002c64:	d113      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c66:	7843      	ldrb	r3, [r0, #1]
 8002c68:	2b4e      	cmp	r3, #78	; 0x4e
 8002c6a:	d110      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c6c:	7883      	ldrb	r3, [r0, #2]
 8002c6e:	2b55      	cmp	r3, #85	; 0x55
 8002c70:	d10d      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c72:	78c3      	ldrb	r3, [r0, #3]
 8002c74:	2b43      	cmp	r3, #67	; 0x43
 8002c76:	d10a      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c78:	7903      	ldrb	r3, [r0, #4]
 8002c7a:	2b46      	cmp	r3, #70	; 0x46
 8002c7c:	d107      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c7e:	7943      	ldrb	r3, [r0, #5]
 8002c80:	2b4f      	cmp	r3, #79	; 0x4f
 8002c82:	d104      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c84:	7983      	ldrb	r3, [r0, #6]
 8002c86:	2b52      	cmp	r3, #82	; 0x52
 8002c88:	d101      	bne.n	8002c8e <__cxa_type_match+0x3a>
 8002c8a:	2900      	cmp	r1, #0
 8002c8c:	d030      	beq.n	8002cf0 <__cxa_type_match+0x9c>
 8002c8e:	4610      	mov	r0, r2
 8002c90:	f7ff ffc2 	bl	8002c18 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002c94:	2300      	movs	r3, #0
 8002c96:	f080 0401 	eor.w	r4, r0, #1
 8002c9a:	b2e4      	uxtb	r4, r4
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	9001      	str	r0, [sp, #4]
 8002ca0:	bb4b      	cbnz	r3, 8002cf6 <__cxa_type_match+0xa2>
 8002ca2:	bb54      	cbnz	r4, 8002cfa <__cxa_type_match+0xa6>
 8002ca4:	2901      	cmp	r1, #1
 8002ca6:	bf0a      	itet	eq
 8002ca8:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8002cac:	f1a2 0320 	subne.w	r3, r2, #32
 8002cb0:	3b78      	subeq	r3, #120	; 0x78
 8002cb2:	2901      	cmp	r1, #1
 8002cb4:	bf0c      	ite	eq
 8002cb6:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8002cba:	3258      	addne	r2, #88	; 0x58
 8002cbc:	681c      	ldr	r4, [r3, #0]
 8002cbe:	9201      	str	r2, [sp, #4]
 8002cc0:	6823      	ldr	r3, [r4, #0]
 8002cc2:	4620      	mov	r0, r4
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	4798      	blx	r3
 8002cc8:	b1c8      	cbz	r0, 8002cfe <__cxa_type_match+0xaa>
 8002cca:	2702      	movs	r7, #2
 8002ccc:	9b01      	ldr	r3, [sp, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	9301      	str	r3, [sp, #4]
 8002cd2:	6833      	ldr	r3, [r6, #0]
 8002cd4:	4621      	mov	r1, r4
 8002cd6:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8002cda:	4630      	mov	r0, r6
 8002cdc:	2301      	movs	r3, #1
 8002cde:	aa01      	add	r2, sp, #4
 8002ce0:	47c0      	blx	r8
 8002ce2:	b170      	cbz	r0, 8002d02 <__cxa_type_match+0xae>
 8002ce4:	9b01      	ldr	r3, [sp, #4]
 8002ce6:	602b      	str	r3, [r5, #0]
 8002ce8:	4638      	mov	r0, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	460c      	mov	r4, r1
 8002cf4:	e7d2      	b.n	8002c9c <__cxa_type_match+0x48>
 8002cf6:	4c04      	ldr	r4, [pc, #16]	; (8002d08 <__cxa_type_match+0xb4>)
 8002cf8:	e7e2      	b.n	8002cc0 <__cxa_type_match+0x6c>
 8002cfa:	4c04      	ldr	r4, [pc, #16]	; (8002d0c <__cxa_type_match+0xb8>)
 8002cfc:	e7e0      	b.n	8002cc0 <__cxa_type_match+0x6c>
 8002cfe:	2701      	movs	r7, #1
 8002d00:	e7e7      	b.n	8002cd2 <__cxa_type_match+0x7e>
 8002d02:	4607      	mov	r7, r0
 8002d04:	e7f0      	b.n	8002ce8 <__cxa_type_match+0x94>
 8002d06:	bf00      	nop
 8002d08:	08003f54 	.word	0x08003f54
 8002d0c:	08003f5c 	.word	0x08003f5c

08002d10 <__cxa_begin_cleanup>:
 8002d10:	b510      	push	{r4, lr}
 8002d12:	4604      	mov	r4, r0
 8002d14:	f000 f81a 	bl	8002d4c <__cxa_get_globals>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	4620      	mov	r0, r4
 8002d1c:	f1a4 0120 	sub.w	r1, r4, #32
 8002d20:	f7ff ff7a 	bl	8002c18 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8002d24:	b160      	cbz	r0, 8002d40 <__cxa_begin_cleanup+0x30>
 8002d26:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	f844 3c04 	str.w	r3, [r4, #-4]
 8002d32:	d103      	bne.n	8002d3c <__cxa_begin_cleanup+0x2c>
 8002d34:	6893      	ldr	r3, [r2, #8]
 8002d36:	f844 3c08 	str.w	r3, [r4, #-8]
 8002d3a:	6091      	str	r1, [r2, #8]
 8002d3c:	2001      	movs	r0, #1
 8002d3e:	bd10      	pop	{r4, pc}
 8002d40:	6893      	ldr	r3, [r2, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f9      	beq.n	8002d3a <__cxa_begin_cleanup+0x2a>
 8002d46:	f000 fa8b 	bl	8003260 <_ZSt9terminatev>
	...

08002d4c <__cxa_get_globals>:
 8002d4c:	4800      	ldr	r0, [pc, #0]	; (8002d50 <__cxa_get_globals+0x4>)
 8002d4e:	4770      	bx	lr
 8002d50:	20000438 	.word	0x20000438

08002d54 <_ZL12read_uleb128PKhPm>:
 8002d54:	2300      	movs	r3, #0
 8002d56:	461a      	mov	r2, r3
 8002d58:	b530      	push	{r4, r5, lr}
 8002d5a:	f810 5b01 	ldrb.w	r5, [r0], #1
 8002d5e:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 8002d62:	4094      	lsls	r4, r2
 8002d64:	4323      	orrs	r3, r4
 8002d66:	062c      	lsls	r4, r5, #24
 8002d68:	f102 0207 	add.w	r2, r2, #7
 8002d6c:	d4f5      	bmi.n	8002d5a <_ZL12read_uleb128PKhPm+0x6>
 8002d6e:	600b      	str	r3, [r1, #0]
 8002d70:	bd30      	pop	{r4, r5, pc}

08002d72 <_ZL12read_sleb128PKhPl>:
 8002d72:	2300      	movs	r3, #0
 8002d74:	461a      	mov	r2, r3
 8002d76:	b530      	push	{r4, r5, lr}
 8002d78:	f810 4b01 	ldrb.w	r4, [r0], #1
 8002d7c:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 8002d80:	4095      	lsls	r5, r2
 8002d82:	432b      	orrs	r3, r5
 8002d84:	0625      	lsls	r5, r4, #24
 8002d86:	f102 0207 	add.w	r2, r2, #7
 8002d8a:	d4f5      	bmi.n	8002d78 <_ZL12read_sleb128PKhPl+0x6>
 8002d8c:	2a1f      	cmp	r2, #31
 8002d8e:	d806      	bhi.n	8002d9e <_ZL12read_sleb128PKhPl+0x2c>
 8002d90:	0664      	lsls	r4, r4, #25
 8002d92:	bf42      	ittt	mi
 8002d94:	f04f 34ff 	movmi.w	r4, #4294967295
 8002d98:	fa04 f202 	lslmi.w	r2, r4, r2
 8002d9c:	4313      	orrmi	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	bd30      	pop	{r4, r5, pc}

08002da2 <_ZL28read_encoded_value_with_basehjPKhPj>:
 8002da2:	2850      	cmp	r0, #80	; 0x50
 8002da4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002da8:	4606      	mov	r6, r0
 8002daa:	4688      	mov	r8, r1
 8002dac:	4615      	mov	r5, r2
 8002dae:	461f      	mov	r7, r3
 8002db0:	d108      	bne.n	8002dc4 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 8002db2:	1cd0      	adds	r0, r2, #3
 8002db4:	f020 0003 	bic.w	r0, r0, #3
 8002db8:	f850 4b04 	ldr.w	r4, [r0], #4
 8002dbc:	603c      	str	r4, [r7, #0]
 8002dbe:	b002      	add	sp, #8
 8002dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dc4:	f000 030f 	and.w	r3, r0, #15
 8002dc8:	2b0c      	cmp	r3, #12
 8002dca:	d82e      	bhi.n	8002e2a <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 8002dcc:	e8df f003 	tbb	[pc, r3]
 8002dd0:	251d0725 	.word	0x251d0725
 8002dd4:	2d2d2d29 	.word	0x2d2d2d29
 8002dd8:	2521182d 	.word	0x2521182d
 8002ddc:	29          	.byte	0x29
 8002ddd:	00          	.byte	0x00
 8002dde:	4628      	mov	r0, r5
 8002de0:	a901      	add	r1, sp, #4
 8002de2:	f7ff ffb7 	bl	8002d54 <_ZL12read_uleb128PKhPm>
 8002de6:	9c01      	ldr	r4, [sp, #4]
 8002de8:	2c00      	cmp	r4, #0
 8002dea:	d0e7      	beq.n	8002dbc <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8002dec:	f006 0370 	and.w	r3, r6, #112	; 0x70
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	bf08      	it	eq
 8002df4:	46a8      	moveq	r8, r5
 8002df6:	0633      	lsls	r3, r6, #24
 8002df8:	4444      	add	r4, r8
 8002dfa:	bf48      	it	mi
 8002dfc:	6824      	ldrmi	r4, [r4, #0]
 8002dfe:	e7dd      	b.n	8002dbc <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 8002e00:	4628      	mov	r0, r5
 8002e02:	a901      	add	r1, sp, #4
 8002e04:	f7ff ffb5 	bl	8002d72 <_ZL12read_sleb128PKhPl>
 8002e08:	e7ed      	b.n	8002de6 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 8002e0a:	4628      	mov	r0, r5
 8002e0c:	f830 4b02 	ldrh.w	r4, [r0], #2
 8002e10:	e7ea      	b.n	8002de8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8002e12:	4628      	mov	r0, r5
 8002e14:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8002e18:	e7e6      	b.n	8002de8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8002e1a:	4628      	mov	r0, r5
 8002e1c:	f850 4b04 	ldr.w	r4, [r0], #4
 8002e20:	e7e2      	b.n	8002de8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8002e22:	4628      	mov	r0, r5
 8002e24:	f850 4b08 	ldr.w	r4, [r0], #8
 8002e28:	e7de      	b.n	8002de8 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8002e2a:	f000 fd89 	bl	8003940 <abort>

08002e2e <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 8002e2e:	b508      	push	{r3, lr}
 8002e30:	4603      	mov	r3, r0
 8002e32:	2bff      	cmp	r3, #255	; 0xff
 8002e34:	4608      	mov	r0, r1
 8002e36:	d010      	beq.n	8002e5a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8002e38:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002e3c:	2a30      	cmp	r2, #48	; 0x30
 8002e3e:	d012      	beq.n	8002e66 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 8002e40:	d807      	bhi.n	8002e52 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 8002e42:	2a20      	cmp	r2, #32
 8002e44:	d00b      	beq.n	8002e5e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8002e46:	d802      	bhi.n	8002e4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8002e48:	f013 0f60 	tst.w	r3, #96	; 0x60
 8002e4c:	d005      	beq.n	8002e5a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8002e4e:	f000 fd77 	bl	8003940 <abort>
 8002e52:	2a40      	cmp	r2, #64	; 0x40
 8002e54:	d00b      	beq.n	8002e6e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8002e56:	2a50      	cmp	r2, #80	; 0x50
 8002e58:	d1f9      	bne.n	8002e4e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8002e5a:	2000      	movs	r0, #0
 8002e5c:	bd08      	pop	{r3, pc}
 8002e5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e62:	f000 bf20 	b.w	8003ca6 <_Unwind_GetTextRelBase>
 8002e66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e6a:	f000 bf19 	b.w	8003ca0 <_Unwind_GetDataRelBase>
 8002e6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002e72:	f7fe b8f3 	b.w	800105c <_Unwind_GetRegionStart>

08002e76 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8002e76:	b570      	push	{r4, r5, r6, lr}
 8002e78:	460c      	mov	r4, r1
 8002e7a:	4601      	mov	r1, r0
 8002e7c:	4620      	mov	r0, r4
 8002e7e:	4615      	mov	r5, r2
 8002e80:	461e      	mov	r6, r3
 8002e82:	f7ff ffd4 	bl	8002e2e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8002e86:	4633      	mov	r3, r6
 8002e88:	4601      	mov	r1, r0
 8002e8a:	462a      	mov	r2, r5
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002e92:	f7ff bf86 	b.w	8002da2 <_ZL28read_encoded_value_with_basehjPKhPj>

08002e96 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8002e96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e98:	460c      	mov	r4, r1
 8002e9a:	4615      	mov	r5, r2
 8002e9c:	4606      	mov	r6, r0
 8002e9e:	b328      	cbz	r0, 8002eec <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 8002ea0:	f7fe f8dc 	bl	800105c <_Unwind_GetRegionStart>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	4620      	mov	r0, r4
 8002ea8:	602b      	str	r3, [r5, #0]
 8002eaa:	f810 1b01 	ldrb.w	r1, [r0], #1
 8002eae:	29ff      	cmp	r1, #255	; 0xff
 8002eb0:	d01e      	beq.n	8002ef0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	1d2b      	adds	r3, r5, #4
 8002eb6:	4630      	mov	r0, r6
 8002eb8:	f7ff ffdd 	bl	8002e76 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8002ebc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ec0:	2bff      	cmp	r3, #255	; 0xff
 8002ec2:	752b      	strb	r3, [r5, #20]
 8002ec4:	d016      	beq.n	8002ef4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 8002ec6:	2310      	movs	r3, #16
 8002ec8:	a901      	add	r1, sp, #4
 8002eca:	752b      	strb	r3, [r5, #20]
 8002ecc:	f7ff ff42 	bl	8002d54 <_ZL12read_uleb128PKhPm>
 8002ed0:	9b01      	ldr	r3, [sp, #4]
 8002ed2:	4403      	add	r3, r0
 8002ed4:	60eb      	str	r3, [r5, #12]
 8002ed6:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002eda:	a901      	add	r1, sp, #4
 8002edc:	756b      	strb	r3, [r5, #21]
 8002ede:	f7ff ff39 	bl	8002d54 <_ZL12read_uleb128PKhPm>
 8002ee2:	9b01      	ldr	r3, [sp, #4]
 8002ee4:	4403      	add	r3, r0
 8002ee6:	612b      	str	r3, [r5, #16]
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
 8002eec:	4603      	mov	r3, r0
 8002eee:	e7da      	b.n	8002ea6 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 8002ef0:	606b      	str	r3, [r5, #4]
 8002ef2:	e7e3      	b.n	8002ebc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	e7ed      	b.n	8002ed4 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

08002ef8 <_Unwind_GetGR>:
 8002ef8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002efa:	ab03      	add	r3, sp, #12
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	2300      	movs	r3, #0
 8002f00:	460a      	mov	r2, r1
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd fb00 	bl	8000508 <_Unwind_VRS_Get>
 8002f08:	9803      	ldr	r0, [sp, #12]
 8002f0a:	b005      	add	sp, #20
 8002f0c:	f85d fb04 	ldr.w	pc, [sp], #4

08002f10 <__gxx_personality_v0>:
 8002f10:	2300      	movs	r3, #0
 8002f12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f16:	b091      	sub	sp, #68	; 0x44
 8002f18:	9305      	str	r3, [sp, #20]
 8002f1a:	f000 0303 	and.w	r3, r0, #3
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	4606      	mov	r6, r0
 8002f22:	460c      	mov	r4, r1
 8002f24:	4617      	mov	r7, r2
 8002f26:	d00e      	beq.n	8002f46 <__gxx_personality_v0+0x36>
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d003      	beq.n	8002f34 <__gxx_personality_v0+0x24>
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d13b      	bne.n	8002fa8 <__gxx_personality_v0+0x98>
 8002f30:	0701      	lsls	r1, r0, #28
 8002f32:	d53b      	bpl.n	8002fac <__gxx_personality_v0+0x9c>
 8002f34:	4639      	mov	r1, r7
 8002f36:	4620      	mov	r0, r4
 8002f38:	f7fe f878 	bl	800102c <__gnu_unwind_frame>
 8002f3c:	b390      	cbz	r0, 8002fa4 <__gxx_personality_v0+0x94>
 8002f3e:	2009      	movs	r0, #9
 8002f40:	b011      	add	sp, #68	; 0x44
 8002f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f46:	0702      	lsls	r2, r0, #28
 8002f48:	d406      	bmi.n	8002f58 <__gxx_personality_v0+0x48>
 8002f4a:	6a0d      	ldr	r5, [r1, #32]
 8002f4c:	4638      	mov	r0, r7
 8002f4e:	210d      	movs	r1, #13
 8002f50:	f7ff ffd2 	bl	8002ef8 <_Unwind_GetGR>
 8002f54:	4285      	cmp	r5, r0
 8002f56:	d02b      	beq.n	8002fb0 <__gxx_personality_v0+0xa0>
 8002f58:	2002      	movs	r0, #2
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	f006 0608 	and.w	r6, r6, #8
 8002f60:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8002f64:	4306      	orrs	r6, r0
 8002f66:	220c      	movs	r2, #12
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4638      	mov	r0, r7
 8002f6c:	f8cd a000 	str.w	sl, [sp]
 8002f70:	940a      	str	r4, [sp, #40]	; 0x28
 8002f72:	f7fd faef 	bl	8000554 <_Unwind_VRS_Set>
 8002f76:	2e06      	cmp	r6, #6
 8002f78:	d11c      	bne.n	8002fb4 <__gxx_personality_v0+0xa4>
 8002f7a:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8002f7e:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8002f82:	f1b8 0f00 	cmp.w	r8, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	f04f 0b01 	moveq.w	fp, #1
 8002f8c:	f04f 0b03 	movne.w	fp, #3
 8002f90:	f016 0608 	ands.w	r6, r6, #8
 8002f94:	f000 8107 	beq.w	80031a6 <__gxx_personality_v0+0x296>
 8002f98:	f1bb 0f01 	cmp.w	fp, #1
 8002f9c:	f040 80ff 	bne.w	800319e <__gxx_personality_v0+0x28e>
 8002fa0:	f000 f95e 	bl	8003260 <_ZSt9terminatev>
 8002fa4:	2008      	movs	r0, #8
 8002fa6:	e7cb      	b.n	8002f40 <__gxx_personality_v0+0x30>
 8002fa8:	f000 fcca 	bl	8003940 <abort>
 8002fac:	2001      	movs	r0, #1
 8002fae:	e7d4      	b.n	8002f5a <__gxx_personality_v0+0x4a>
 8002fb0:	2006      	movs	r0, #6
 8002fb2:	e7d2      	b.n	8002f5a <__gxx_personality_v0+0x4a>
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	f7fe f857 	bl	8001068 <_Unwind_GetLanguageSpecificData>
 8002fba:	4681      	mov	r9, r0
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d0b9      	beq.n	8002f34 <__gxx_personality_v0+0x24>
 8002fc0:	4652      	mov	r2, sl
 8002fc2:	4601      	mov	r1, r0
 8002fc4:	4638      	mov	r0, r7
 8002fc6:	f7ff ff66 	bl	8002e96 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8002fca:	4639      	mov	r1, r7
 8002fcc:	4605      	mov	r5, r0
 8002fce:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8002fd2:	f7ff ff2c 	bl	8002e2e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8002fd6:	210f      	movs	r1, #15
 8002fd8:	900c      	str	r0, [sp, #48]	; 0x30
 8002fda:	4638      	mov	r0, r7
 8002fdc:	f7ff ff8c 	bl	8002ef8 <_Unwind_GetGR>
 8002fe0:	f020 0801 	bic.w	r8, r0, #1
 8002fe4:	f108 38ff 	add.w	r8, r8, #4294967295
 8002fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002fea:	42ab      	cmp	r3, r5
 8002fec:	f240 80bf 	bls.w	800316e <__gxx_personality_v0+0x25e>
 8002ff0:	462a      	mov	r2, r5
 8002ff2:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8002ff6:	ab06      	add	r3, sp, #24
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	f7ff ff3c 	bl	8002e76 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8002ffe:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8003002:	4602      	mov	r2, r0
 8003004:	ab07      	add	r3, sp, #28
 8003006:	2000      	movs	r0, #0
 8003008:	f7ff ff35 	bl	8002e76 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800300c:	ab08      	add	r3, sp, #32
 800300e:	4602      	mov	r2, r0
 8003010:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8003014:	2000      	movs	r0, #0
 8003016:	f7ff ff2e 	bl	8002e76 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 800301a:	a909      	add	r1, sp, #36	; 0x24
 800301c:	f7ff fe9a 	bl	8002d54 <_ZL12read_uleb128PKhPm>
 8003020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003022:	9a06      	ldr	r2, [sp, #24]
 8003024:	4605      	mov	r5, r0
 8003026:	4413      	add	r3, r2
 8003028:	4543      	cmp	r3, r8
 800302a:	d901      	bls.n	8003030 <__gxx_personality_v0+0x120>
 800302c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800302e:	e7db      	b.n	8002fe8 <__gxx_personality_v0+0xd8>
 8003030:	9a07      	ldr	r2, [sp, #28]
 8003032:	4413      	add	r3, r2
 8003034:	4543      	cmp	r3, r8
 8003036:	d9d7      	bls.n	8002fe8 <__gxx_personality_v0+0xd8>
 8003038:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800303c:	f1b8 0f00 	cmp.w	r8, #0
 8003040:	d001      	beq.n	8003046 <__gxx_personality_v0+0x136>
 8003042:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003044:	4498      	add	r8, r3
 8003046:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8003048:	b115      	cbz	r5, 8003050 <__gxx_personality_v0+0x140>
 800304a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800304c:	3d01      	subs	r5, #1
 800304e:	4405      	add	r5, r0
 8003050:	f1b8 0f00 	cmp.w	r8, #0
 8003054:	f43f af6e 	beq.w	8002f34 <__gxx_personality_v0+0x24>
 8003058:	2d00      	cmp	r5, #0
 800305a:	f000 80f2 	beq.w	8003242 <__gxx_personality_v0+0x332>
 800305e:	f016 0308 	ands.w	r3, r6, #8
 8003062:	9302      	str	r3, [sp, #8]
 8003064:	d034      	beq.n	80030d0 <__gxx_personality_v0+0x1c0>
 8003066:	2347      	movs	r3, #71	; 0x47
 8003068:	7023      	strb	r3, [r4, #0]
 800306a:	234e      	movs	r3, #78	; 0x4e
 800306c:	7063      	strb	r3, [r4, #1]
 800306e:	2355      	movs	r3, #85	; 0x55
 8003070:	70a3      	strb	r3, [r4, #2]
 8003072:	2343      	movs	r3, #67	; 0x43
 8003074:	70e3      	strb	r3, [r4, #3]
 8003076:	2346      	movs	r3, #70	; 0x46
 8003078:	7123      	strb	r3, [r4, #4]
 800307a:	234f      	movs	r3, #79	; 0x4f
 800307c:	7163      	strb	r3, [r4, #5]
 800307e:	2352      	movs	r3, #82	; 0x52
 8003080:	71a3      	strb	r3, [r4, #6]
 8003082:	2300      	movs	r3, #0
 8003084:	71e3      	strb	r3, [r4, #7]
 8003086:	f04f 0b00 	mov.w	fp, #0
 800308a:	a907      	add	r1, sp, #28
 800308c:	4628      	mov	r0, r5
 800308e:	f7ff fe70 	bl	8002d72 <_ZL12read_sleb128PKhPl>
 8003092:	a908      	add	r1, sp, #32
 8003094:	9003      	str	r0, [sp, #12]
 8003096:	f7ff fe6c 	bl	8002d72 <_ZL12read_sleb128PKhPl>
 800309a:	9907      	ldr	r1, [sp, #28]
 800309c:	2900      	cmp	r1, #0
 800309e:	d063      	beq.n	8003168 <__gxx_personality_v0+0x258>
 80030a0:	dd3a      	ble.n	8003118 <__gxx_personality_v0+0x208>
 80030a2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80030a6:	28ff      	cmp	r0, #255	; 0xff
 80030a8:	d032      	beq.n	8003110 <__gxx_personality_v0+0x200>
 80030aa:	f000 0307 	and.w	r3, r0, #7
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	f63f af7a 	bhi.w	8002fa8 <__gxx_personality_v0+0x98>
 80030b4:	a201      	add	r2, pc, #4	; (adr r2, 80030bc <__gxx_personality_v0+0x1ac>)
 80030b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ba:	bf00      	nop
 80030bc:	08003115 	.word	0x08003115
 80030c0:	08002fa9 	.word	0x08002fa9
 80030c4:	080030e3 	.word	0x080030e3
 80030c8:	08003115 	.word	0x08003115
 80030cc:	0800310d 	.word	0x0800310d
 80030d0:	79e3      	ldrb	r3, [r4, #7]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	bf0c      	ite	eq
 80030d6:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 80030da:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 80030de:	9305      	str	r3, [sp, #20]
 80030e0:	e7d1      	b.n	8003086 <__gxx_personality_v0+0x176>
 80030e2:	2502      	movs	r5, #2
 80030e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030e6:	ab09      	add	r3, sp, #36	; 0x24
 80030e8:	fb05 2211 	mls	r2, r5, r1, r2
 80030ec:	990c      	ldr	r1, [sp, #48]	; 0x30
 80030ee:	f7ff fe58 	bl	8002da2 <_ZL28read_encoded_value_with_basehjPKhPj>
 80030f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80030f4:	b131      	cbz	r1, 8003104 <__gxx_personality_v0+0x1f4>
 80030f6:	b35c      	cbz	r4, 8003150 <__gxx_personality_v0+0x240>
 80030f8:	2200      	movs	r2, #0
 80030fa:	4620      	mov	r0, r4
 80030fc:	ab05      	add	r3, sp, #20
 80030fe:	f7ff fda9 	bl	8002c54 <__cxa_type_match>
 8003102:	b328      	cbz	r0, 8003150 <__gxx_personality_v0+0x240>
 8003104:	f04f 0b03 	mov.w	fp, #3
 8003108:	9d07      	ldr	r5, [sp, #28]
 800310a:	e034      	b.n	8003176 <__gxx_personality_v0+0x266>
 800310c:	2508      	movs	r5, #8
 800310e:	e7e9      	b.n	80030e4 <__gxx_personality_v0+0x1d4>
 8003110:	2500      	movs	r5, #0
 8003112:	e7e7      	b.n	80030e4 <__gxx_personality_v0+0x1d4>
 8003114:	2504      	movs	r5, #4
 8003116:	e7e5      	b.n	80030e4 <__gxx_personality_v0+0x1d4>
 8003118:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 800311c:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8003120:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003122:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8003126:	313f      	adds	r1, #63	; 0x3f
 8003128:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 800312c:	b1bc      	cbz	r4, 800315e <__gxx_personality_v0+0x24e>
 800312e:	9a02      	ldr	r2, [sp, #8]
 8003130:	b9aa      	cbnz	r2, 800315e <__gxx_personality_v0+0x24e>
 8003132:	9b05      	ldr	r3, [sp, #20]
 8003134:	3d04      	subs	r5, #4
 8003136:	9309      	str	r3, [sp, #36]	; 0x24
 8003138:	f855 1f04 	ldr.w	r1, [r5, #4]!
 800313c:	2900      	cmp	r1, #0
 800313e:	d0e1      	beq.n	8003104 <__gxx_personality_v0+0x1f4>
 8003140:	2200      	movs	r2, #0
 8003142:	4620      	mov	r0, r4
 8003144:	ab09      	add	r3, sp, #36	; 0x24
 8003146:	4429      	add	r1, r5
 8003148:	f7ff fd84 	bl	8002c54 <__cxa_type_match>
 800314c:	2800      	cmp	r0, #0
 800314e:	d0f3      	beq.n	8003138 <__gxx_personality_v0+0x228>
 8003150:	9d08      	ldr	r5, [sp, #32]
 8003152:	2d00      	cmp	r5, #0
 8003154:	d071      	beq.n	800323a <__gxx_personality_v0+0x32a>
 8003156:	9b03      	ldr	r3, [sp, #12]
 8003158:	442b      	add	r3, r5
 800315a:	461d      	mov	r5, r3
 800315c:	e795      	b.n	800308a <__gxx_personality_v0+0x17a>
 800315e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f4      	bne.n	8003150 <__gxx_personality_v0+0x240>
 8003166:	e7cd      	b.n	8003104 <__gxx_personality_v0+0x1f4>
 8003168:	f04f 0b01 	mov.w	fp, #1
 800316c:	e7f0      	b.n	8003150 <__gxx_personality_v0+0x240>
 800316e:	2500      	movs	r5, #0
 8003170:	f04f 0b01 	mov.w	fp, #1
 8003174:	46a8      	mov	r8, r5
 8003176:	07f3      	lsls	r3, r6, #31
 8003178:	f57f af0a 	bpl.w	8002f90 <__gxx_personality_v0+0x80>
 800317c:	f1bb 0f02 	cmp.w	fp, #2
 8003180:	f43f aed8 	beq.w	8002f34 <__gxx_personality_v0+0x24>
 8003184:	210d      	movs	r1, #13
 8003186:	4638      	mov	r0, r7
 8003188:	9e05      	ldr	r6, [sp, #20]
 800318a:	f7ff feb5 	bl	8002ef8 <_Unwind_GetGR>
 800318e:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8003192:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8003196:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 800319a:	2006      	movs	r0, #6
 800319c:	e6d0      	b.n	8002f40 <__gxx_personality_v0+0x30>
 800319e:	2d00      	cmp	r5, #0
 80031a0:	da22      	bge.n	80031e8 <__gxx_personality_v0+0x2d8>
 80031a2:	f000 f86f 	bl	8003284 <_ZSt10unexpectedv>
 80031a6:	f1bb 0f01 	cmp.w	fp, #1
 80031aa:	d102      	bne.n	80031b2 <__gxx_personality_v0+0x2a2>
 80031ac:	4620      	mov	r0, r4
 80031ae:	f000 fb5e 	bl	800386e <__cxa_call_terminate>
 80031b2:	2d00      	cmp	r5, #0
 80031b4:	da18      	bge.n	80031e8 <__gxx_personality_v0+0x2d8>
 80031b6:	4652      	mov	r2, sl
 80031b8:	4649      	mov	r1, r9
 80031ba:	4638      	mov	r0, r7
 80031bc:	f7ff fe6b 	bl	8002e96 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 80031c0:	4639      	mov	r1, r7
 80031c2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 80031c6:	f7ff fe32 	bl	8002e2e <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 80031ca:	43eb      	mvns	r3, r5
 80031cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80031ce:	900c      	str	r0, [sp, #48]	; 0x30
 80031d0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80031d4:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 80031d8:	b10a      	cbz	r2, 80031de <__gxx_personality_v0+0x2ce>
 80031da:	3601      	adds	r6, #1
 80031dc:	e7fa      	b.n	80031d4 <__gxx_personality_v0+0x2c4>
 80031de:	2204      	movs	r2, #4
 80031e0:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 80031e4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80031e8:	2300      	movs	r3, #0
 80031ea:	ae09      	add	r6, sp, #36	; 0x24
 80031ec:	461a      	mov	r2, r3
 80031ee:	4619      	mov	r1, r3
 80031f0:	4638      	mov	r0, r7
 80031f2:	9600      	str	r6, [sp, #0]
 80031f4:	9409      	str	r4, [sp, #36]	; 0x24
 80031f6:	f7fd f9ad 	bl	8000554 <_Unwind_VRS_Set>
 80031fa:	2300      	movs	r3, #0
 80031fc:	2201      	movs	r2, #1
 80031fe:	4619      	mov	r1, r3
 8003200:	4638      	mov	r0, r7
 8003202:	9600      	str	r6, [sp, #0]
 8003204:	9509      	str	r5, [sp, #36]	; 0x24
 8003206:	f7fd f9a5 	bl	8000554 <_Unwind_VRS_Set>
 800320a:	210f      	movs	r1, #15
 800320c:	4638      	mov	r0, r7
 800320e:	f7ff fe73 	bl	8002ef8 <_Unwind_GetGR>
 8003212:	2300      	movs	r3, #0
 8003214:	f000 0001 	and.w	r0, r0, #1
 8003218:	ea40 0008 	orr.w	r0, r0, r8
 800321c:	9009      	str	r0, [sp, #36]	; 0x24
 800321e:	220f      	movs	r2, #15
 8003220:	4619      	mov	r1, r3
 8003222:	4638      	mov	r0, r7
 8003224:	9600      	str	r6, [sp, #0]
 8003226:	f7fd f995 	bl	8000554 <_Unwind_VRS_Set>
 800322a:	f1bb 0f02 	cmp.w	fp, #2
 800322e:	d102      	bne.n	8003236 <__gxx_personality_v0+0x326>
 8003230:	4620      	mov	r0, r4
 8003232:	f7ff fd6d 	bl	8002d10 <__cxa_begin_cleanup>
 8003236:	2007      	movs	r0, #7
 8003238:	e682      	b.n	8002f40 <__gxx_personality_v0+0x30>
 800323a:	f1bb 0f00 	cmp.w	fp, #0
 800323e:	f43f ae79 	beq.w	8002f34 <__gxx_personality_v0+0x24>
 8003242:	f04f 0b02 	mov.w	fp, #2
 8003246:	e796      	b.n	8003176 <__gxx_personality_v0+0x266>

08003248 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003248:	b508      	push	{r3, lr}
 800324a:	4780      	blx	r0
 800324c:	f000 fb78 	bl	8003940 <abort>

08003250 <_ZSt13get_terminatev>:
 8003250:	4b02      	ldr	r3, [pc, #8]	; (800325c <_ZSt13get_terminatev+0xc>)
 8003252:	6818      	ldr	r0, [r3, #0]
 8003254:	f3bf 8f5b 	dmb	ish
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000010 	.word	0x20000010

08003260 <_ZSt9terminatev>:
 8003260:	b508      	push	{r3, lr}
 8003262:	f7ff fff5 	bl	8003250 <_ZSt13get_terminatev>
 8003266:	f7ff ffef 	bl	8003248 <_ZN10__cxxabiv111__terminateEPFvvE>

0800326a <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 800326a:	b508      	push	{r3, lr}
 800326c:	4780      	blx	r0
 800326e:	f7ff fff7 	bl	8003260 <_ZSt9terminatev>
	...

08003274 <_ZSt14get_unexpectedv>:
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <_ZSt14get_unexpectedv+0xc>)
 8003276:	6818      	ldr	r0, [r3, #0]
 8003278:	f3bf 8f5b 	dmb	ish
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	2000000c 	.word	0x2000000c

08003284 <_ZSt10unexpectedv>:
 8003284:	b508      	push	{r3, lr}
 8003286:	f7ff fff5 	bl	8003274 <_ZSt14get_unexpectedv>
 800328a:	f7ff ffee 	bl	800326a <_ZN10__cxxabiv112__unexpectedEPFvvE>
	...

08003290 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8003290:	b510      	push	{r4, lr}
 8003292:	4604      	mov	r4, r0
 8003294:	4b02      	ldr	r3, [pc, #8]	; (80032a0 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8003296:	6003      	str	r3, [r0, #0]
 8003298:	f7ff fc54 	bl	8002b44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800329c:	4620      	mov	r0, r4
 800329e:	bd10      	pop	{r4, pc}
 80032a0:	08003fe4 	.word	0x08003fe4

080032a4 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	f7ff fff2 	bl	8003290 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 80032ac:	4620      	mov	r0, r4
 80032ae:	210c      	movs	r1, #12
 80032b0:	f7ff fc9c 	bl	8002bec <_ZdlPvj>
 80032b4:	4620      	mov	r0, r4
 80032b6:	bd10      	pop	{r4, pc}

080032b8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80032b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032bc:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80032c0:	4606      	mov	r6, r0
 80032c2:	4590      	cmp	r8, r2
 80032c4:	460f      	mov	r7, r1
 80032c6:	4615      	mov	r5, r2
 80032c8:	461c      	mov	r4, r3
 80032ca:	d00b      	beq.n	80032e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 80032cc:	68b0      	ldr	r0, [r6, #8]
 80032ce:	462a      	mov	r2, r5
 80032d0:	6803      	ldr	r3, [r0, #0]
 80032d2:	f8cd 8018 	str.w	r8, [sp, #24]
 80032d6:	6a1e      	ldr	r6, [r3, #32]
 80032d8:	4639      	mov	r1, r7
 80032da:	4623      	mov	r3, r4
 80032dc:	46b4      	mov	ip, r6
 80032de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80032e2:	4760      	bx	ip
 80032e4:	4619      	mov	r1, r3
 80032e6:	f000 f857 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	d0ee      	beq.n	80032cc <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 80032ee:	2006      	movs	r0, #6
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080032f4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 80032f4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032f8:	460d      	mov	r5, r1
 80032fa:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 80032fe:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8003302:	4619      	mov	r1, r3
 8003304:	4681      	mov	r9, r0
 8003306:	4617      	mov	r7, r2
 8003308:	4698      	mov	r8, r3
 800330a:	f000 f845 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 800330e:	b190      	cbz	r0, 8003336 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8003310:	2d00      	cmp	r5, #0
 8003312:	6034      	str	r4, [r6, #0]
 8003314:	7137      	strb	r7, [r6, #4]
 8003316:	db09      	blt.n	800332c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8003318:	442c      	add	r4, r5
 800331a:	45a2      	cmp	sl, r4
 800331c:	bf0c      	ite	eq
 800331e:	2406      	moveq	r4, #6
 8003320:	2401      	movne	r4, #1
 8003322:	71b4      	strb	r4, [r6, #6]
 8003324:	2000      	movs	r0, #0
 8003326:	b001      	add	sp, #4
 8003328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800332c:	3502      	adds	r5, #2
 800332e:	d1f9      	bne.n	8003324 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003330:	2301      	movs	r3, #1
 8003332:	71b3      	strb	r3, [r6, #6]
 8003334:	e7f6      	b.n	8003324 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003336:	4554      	cmp	r4, sl
 8003338:	d106      	bne.n	8003348 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 800333a:	4659      	mov	r1, fp
 800333c:	4648      	mov	r0, r9
 800333e:	f000 f82b 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003342:	b108      	cbz	r0, 8003348 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8003344:	7177      	strb	r7, [r6, #5]
 8003346:	e7ed      	b.n	8003324 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8003348:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800334c:	463a      	mov	r2, r7
 800334e:	6803      	ldr	r3, [r0, #0]
 8003350:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8003354:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8003358:	69dc      	ldr	r4, [r3, #28]
 800335a:	4629      	mov	r1, r5
 800335c:	4643      	mov	r3, r8
 800335e:	46a4      	mov	ip, r4
 8003360:	b001      	add	sp, #4
 8003362:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003366:	4760      	bx	ip

08003368 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800336c:	4607      	mov	r7, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4615      	mov	r5, r2
 8003372:	461e      	mov	r6, r3
 8003374:	f7ff fc19 	bl	8002baa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003378:	b948      	cbnz	r0, 800338e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 800337a:	68b8      	ldr	r0, [r7, #8]
 800337c:	462a      	mov	r2, r5
 800337e:	6803      	ldr	r3, [r0, #0]
 8003380:	4621      	mov	r1, r4
 8003382:	699f      	ldr	r7, [r3, #24]
 8003384:	4633      	mov	r3, r6
 8003386:	46bc      	mov	ip, r7
 8003388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800338c:	4760      	bx	ip
 800338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003392 <_ZNSt9type_infoD1Ev>:
 8003392:	4770      	bx	lr

08003394 <_ZNKSt9type_info14__is_pointer_pEv>:
 8003394:	2000      	movs	r0, #0
 8003396:	4770      	bx	lr

08003398 <_ZNKSt9type_infoeqERKS_>:
 8003398:	4281      	cmp	r1, r0
 800339a:	b508      	push	{r3, lr}
 800339c:	d00e      	beq.n	80033bc <_ZNKSt9type_infoeqERKS_+0x24>
 800339e:	6840      	ldr	r0, [r0, #4]
 80033a0:	7803      	ldrb	r3, [r0, #0]
 80033a2:	2b2a      	cmp	r3, #42	; 0x2a
 80033a4:	d00c      	beq.n	80033c0 <_ZNKSt9type_infoeqERKS_+0x28>
 80033a6:	6849      	ldr	r1, [r1, #4]
 80033a8:	780b      	ldrb	r3, [r1, #0]
 80033aa:	2b2a      	cmp	r3, #42	; 0x2a
 80033ac:	bf08      	it	eq
 80033ae:	3101      	addeq	r1, #1
 80033b0:	f7fc fecc 	bl	800014c <strcmp>
 80033b4:	fab0 f080 	clz	r0, r0
 80033b8:	0940      	lsrs	r0, r0, #5
 80033ba:	bd08      	pop	{r3, pc}
 80033bc:	2001      	movs	r0, #1
 80033be:	e7fc      	b.n	80033ba <_ZNKSt9type_infoeqERKS_+0x22>
 80033c0:	2000      	movs	r0, #0
 80033c2:	e7fa      	b.n	80033ba <_ZNKSt9type_infoeqERKS_+0x22>

080033c4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 80033c4:	b510      	push	{r4, lr}
 80033c6:	4604      	mov	r4, r0
 80033c8:	4b02      	ldr	r3, [pc, #8]	; (80033d4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 80033ca:	6003      	str	r3, [r0, #0]
 80033cc:	f7ff fbba 	bl	8002b44 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 80033d0:	4620      	mov	r0, r4
 80033d2:	bd10      	pop	{r4, pc}
 80033d4:	0800405c 	.word	0x0800405c

080033d8 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 80033d8:	b510      	push	{r4, lr}
 80033da:	4604      	mov	r4, r0
 80033dc:	f7ff fff2 	bl	80033c4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 80033e0:	4620      	mov	r0, r4
 80033e2:	2118      	movs	r1, #24
 80033e4:	f7ff fc02 	bl	8002bec <_ZdlPvj>
 80033e8:	4620      	mov	r0, r4
 80033ea:	bd10      	pop	{r4, pc}

080033ec <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 80033ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80033f4:	4604      	mov	r4, r0
 80033f6:	454a      	cmp	r2, r9
 80033f8:	460f      	mov	r7, r1
 80033fa:	4616      	mov	r6, r2
 80033fc:	469a      	mov	sl, r3
 80033fe:	d024      	beq.n	800344a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8003400:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8003404:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8003408:	f1b8 0f00 	cmp.w	r8, #0
 800340c:	d028      	beq.n	8003460 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 800340e:	68e5      	ldr	r5, [r4, #12]
 8003410:	07aa      	lsls	r2, r5, #30
 8003412:	d521      	bpl.n	8003458 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8003414:	122a      	asrs	r2, r5, #8
 8003416:	f015 0501 	ands.w	r5, r5, #1
 800341a:	d003      	beq.n	8003424 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 800341c:	1cfb      	adds	r3, r7, #3
 800341e:	d01b      	beq.n	8003458 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8003420:	6833      	ldr	r3, [r6, #0]
 8003422:	589a      	ldr	r2, [r3, r2]
 8003424:	68a0      	ldr	r0, [r4, #8]
 8003426:	4639      	mov	r1, r7
 8003428:	6803      	ldr	r3, [r0, #0]
 800342a:	f8cd 9000 	str.w	r9, [sp]
 800342e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8003432:	4432      	add	r2, r6
 8003434:	4653      	mov	r3, sl
 8003436:	47d8      	blx	fp
 8003438:	2803      	cmp	r0, #3
 800343a:	d90d      	bls.n	8003458 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800343c:	b115      	cbz	r5, 8003444 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800343e:	f040 0001 	orr.w	r0, r0, #1
 8003442:	b2c0      	uxtb	r0, r0
 8003444:	b003      	add	sp, #12
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	4619      	mov	r1, r3
 800344c:	f7ff ffa4 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003450:	2800      	cmp	r0, #0
 8003452:	d0d5      	beq.n	8003400 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8003454:	2006      	movs	r0, #6
 8003456:	e7f5      	b.n	8003444 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8003458:	f108 38ff 	add.w	r8, r8, #4294967295
 800345c:	3c08      	subs	r4, #8
 800345e:	e7d3      	b.n	8003408 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8003460:	2001      	movs	r0, #1
 8003462:	e7ef      	b.n	8003444 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08003464 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8003464:	b4f0      	push	{r4, r5, r6, r7}
 8003466:	1e0d      	subs	r5, r1, #0
 8003468:	9c04      	ldr	r4, [sp, #16]
 800346a:	db06      	blt.n	800347a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 800346c:	1950      	adds	r0, r2, r5
 800346e:	4284      	cmp	r4, r0
 8003470:	bf14      	ite	ne
 8003472:	2001      	movne	r0, #1
 8003474:	2006      	moveq	r0, #6
 8003476:	bcf0      	pop	{r4, r5, r6, r7}
 8003478:	4770      	bx	lr
 800347a:	3502      	adds	r5, #2
 800347c:	d005      	beq.n	800348a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 800347e:	6805      	ldr	r5, [r0, #0]
 8003480:	9404      	str	r4, [sp, #16]
 8003482:	6a2c      	ldr	r4, [r5, #32]
 8003484:	46a4      	mov	ip, r4
 8003486:	bcf0      	pop	{r4, r5, r6, r7}
 8003488:	4760      	bx	ip
 800348a:	2001      	movs	r0, #1
 800348c:	e7f3      	b.n	8003476 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0800348e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800348e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003492:	b091      	sub	sp, #68	; 0x44
 8003494:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8003496:	469a      	mov	sl, r3
 8003498:	68a3      	ldr	r3, [r4, #8]
 800349a:	4688      	mov	r8, r1
 800349c:	06d9      	lsls	r1, r3, #27
 800349e:	bf48      	it	mi
 80034a0:	6883      	ldrmi	r3, [r0, #8]
 80034a2:	9206      	str	r2, [sp, #24]
 80034a4:	bf48      	it	mi
 80034a6:	60a3      	strmi	r3, [r4, #8]
 80034a8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80034aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80034ac:	4681      	mov	r9, r0
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d107      	bne.n	80034c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80034b2:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80034b4:	f7ff ff70 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 80034b8:	b118      	cbz	r0, 80034c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 80034ba:	9b06      	ldr	r3, [sp, #24]
 80034bc:	7163      	strb	r3, [r4, #5]
 80034be:	2700      	movs	r7, #0
 80034c0:	e085      	b.n	80035ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80034c2:	4651      	mov	r1, sl
 80034c4:	4648      	mov	r0, r9
 80034c6:	f7ff ff67 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 80034ca:	b1c0      	cbz	r0, 80034fe <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 80034cc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80034ce:	f1b8 0f00 	cmp.w	r8, #0
 80034d2:	6023      	str	r3, [r4, #0]
 80034d4:	9b06      	ldr	r3, [sp, #24]
 80034d6:	7123      	strb	r3, [r4, #4]
 80034d8:	db0b      	blt.n	80034f2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 80034da:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80034dc:	4498      	add	r8, r3
 80034de:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80034e0:	4543      	cmp	r3, r8
 80034e2:	bf0c      	ite	eq
 80034e4:	f04f 0806 	moveq.w	r8, #6
 80034e8:	f04f 0801 	movne.w	r8, #1
 80034ec:	f884 8006 	strb.w	r8, [r4, #6]
 80034f0:	e7e5      	b.n	80034be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80034f2:	f118 0f02 	cmn.w	r8, #2
 80034f6:	d1e2      	bne.n	80034be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80034f8:	2301      	movs	r3, #1
 80034fa:	71a3      	strb	r3, [r4, #6]
 80034fc:	e7df      	b.n	80034be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80034fe:	f1b8 0f00 	cmp.w	r8, #0
 8003502:	bfa8      	it	ge
 8003504:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 8003506:	f04f 0700 	mov.w	r7, #0
 800350a:	bfa4      	itt	ge
 800350c:	eba3 0308 	subge.w	r3, r3, r8
 8003510:	9307      	strge	r3, [sp, #28]
 8003512:	f04f 0302 	mov.w	r3, #2
 8003516:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 800351a:	f04f 0301 	mov.w	r3, #1
 800351e:	9308      	str	r3, [sp, #32]
 8003520:	9b06      	ldr	r3, [sp, #24]
 8003522:	bfb8      	it	lt
 8003524:	9007      	strlt	r0, [sp, #28]
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	930b      	str	r3, [sp, #44]	; 0x2c
 800352c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8003530:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8003534:	9305      	str	r3, [sp, #20]
 8003536:	f1bb 0f00 	cmp.w	fp, #0
 800353a:	f000 80d5 	beq.w	80036e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25a>
 800353e:	2300      	movs	r3, #0
 8003540:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8003544:	9b05      	ldr	r3, [sp, #20]
 8003546:	68a5      	ldr	r5, [r4, #8]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	950f      	str	r5, [sp, #60]	; 0x3c
 800354c:	07da      	lsls	r2, r3, #31
 800354e:	bf48      	it	mi
 8003550:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8003552:	ea4f 2123 	mov.w	r1, r3, asr #8
 8003556:	bf42      	ittt	mi
 8003558:	6800      	ldrmi	r0, [r0, #0]
 800355a:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 800355c:	5841      	ldrmi	r1, [r0, r1]
 800355e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8003560:	bf58      	it	pl
 8003562:	9a06      	ldrpl	r2, [sp, #24]
 8003564:	4401      	add	r1, r0
 8003566:	9807      	ldr	r0, [sp, #28]
 8003568:	b138      	cbz	r0, 800357a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 800356a:	4288      	cmp	r0, r1
 800356c:	bf2c      	ite	cs
 800356e:	2000      	movcs	r0, #0
 8003570:	2001      	movcc	r0, #1
 8003572:	9e08      	ldr	r6, [sp, #32]
 8003574:	42b0      	cmp	r0, r6
 8003576:	f000 80b3 	beq.w	80036e0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 800357a:	079b      	lsls	r3, r3, #30
 800357c:	d407      	bmi.n	800358e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
 800357e:	f118 0f02 	cmn.w	r8, #2
 8003582:	d102      	bne.n	800358a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfc>
 8003584:	07ae      	lsls	r6, r5, #30
 8003586:	f000 80ad 	beq.w	80036e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 800358a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800358e:	9b05      	ldr	r3, [sp, #20]
 8003590:	ad0d      	add	r5, sp, #52	; 0x34
 8003592:	6898      	ldr	r0, [r3, #8]
 8003594:	6803      	ldr	r3, [r0, #0]
 8003596:	9503      	str	r5, [sp, #12]
 8003598:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800359a:	9502      	str	r5, [sp, #8]
 800359c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800359e:	e9cd 1500 	strd	r1, r5, [sp]
 80035a2:	4641      	mov	r1, r8
 80035a4:	69dd      	ldr	r5, [r3, #28]
 80035a6:	4653      	mov	r3, sl
 80035a8:	47a8      	blx	r5
 80035aa:	7963      	ldrb	r3, [r4, #5]
 80035ac:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 80035b0:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 80035b4:	4313      	orrs	r3, r2
 80035b6:	2d06      	cmp	r5, #6
 80035b8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80035ba:	7163      	strb	r3, [r4, #5]
 80035bc:	d001      	beq.n	80035c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 80035be:	2d02      	cmp	r5, #2
 80035c0:	d109      	bne.n	80035d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 80035c2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80035c6:	6021      	str	r1, [r4, #0]
 80035c8:	7123      	strb	r3, [r4, #4]
 80035ca:	71a5      	strb	r5, [r4, #6]
 80035cc:	4607      	mov	r7, r0
 80035ce:	4638      	mov	r0, r7
 80035d0:	b011      	add	sp, #68	; 0x44
 80035d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d6:	6822      	ldr	r2, [r4, #0]
 80035d8:	b9a7      	cbnz	r7, 8003604 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 80035da:	b9aa      	cbnz	r2, 8003608 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 80035dc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80035e0:	6021      	str	r1, [r4, #0]
 80035e2:	7122      	strb	r2, [r4, #4]
 80035e4:	b121      	cbz	r1, 80035f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80035e6:	b11b      	cbz	r3, 80035f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80035e8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80035ec:	07dd      	lsls	r5, r3, #31
 80035ee:	d5ed      	bpl.n	80035cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80035f0:	7963      	ldrb	r3, [r4, #5]
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d0ea      	beq.n	80035cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80035f6:	9b05      	ldr	r3, [sp, #20]
 80035f8:	4607      	mov	r7, r0
 80035fa:	3b08      	subs	r3, #8
 80035fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003600:	9305      	str	r3, [sp, #20]
 8003602:	e798      	b.n	8003536 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 8003604:	2a00      	cmp	r2, #0
 8003606:	d037      	beq.n	8003678 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 8003608:	4291      	cmp	r1, r2
 800360a:	d106      	bne.n	800361a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 800360c:	7923      	ldrb	r3, [r4, #4]
 800360e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8003612:	4313      	orrs	r3, r2
 8003614:	7123      	strb	r3, [r4, #4]
 8003616:	4638      	mov	r0, r7
 8003618:	e7ea      	b.n	80035f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 800361a:	b909      	cbnz	r1, 8003620 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800361c:	2800      	cmp	r0, #0
 800361e:	d0fa      	beq.n	8003616 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8003620:	2b03      	cmp	r3, #3
 8003622:	79a6      	ldrb	r6, [r4, #6]
 8003624:	d904      	bls.n	8003630 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8003626:	07d9      	lsls	r1, r3, #31
 8003628:	d529      	bpl.n	800367e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 800362a:	68a3      	ldr	r3, [r4, #8]
 800362c:	079b      	lsls	r3, r3, #30
 800362e:	d526      	bpl.n	800367e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8003630:	b97e      	cbnz	r6, 8003652 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 8003632:	2d03      	cmp	r5, #3
 8003634:	d905      	bls.n	8003642 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8003636:	07ee      	lsls	r6, r5, #31
 8003638:	d541      	bpl.n	80036be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 800363a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800363e:	0798      	lsls	r0, r3, #30
 8003640:	d53d      	bpl.n	80036be <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8003642:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003644:	4641      	mov	r1, r8
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4650      	mov	r0, sl
 800364a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800364c:	f7ff ff0a 	bl	8003464 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8003650:	4606      	mov	r6, r0
 8003652:	b9e5      	cbnz	r5, 800368e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8003654:	2e03      	cmp	r6, #3
 8003656:	d905      	bls.n	8003664 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8003658:	07f1      	lsls	r1, r6, #31
 800365a:	d532      	bpl.n	80036c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 800365c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003660:	079a      	lsls	r2, r3, #30
 8003662:	d52e      	bpl.n	80036c2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8003664:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8003666:	4641      	mov	r1, r8
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4650      	mov	r0, sl
 800366c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800366e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003670:	f7ff fef8 	bl	8003464 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8003674:	4605      	mov	r5, r0
 8003676:	e00a      	b.n	800368e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8003678:	2900      	cmp	r1, #0
 800367a:	d1d1      	bne.n	8003620 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800367c:	e7cb      	b.n	8003616 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 800367e:	2e01      	cmp	r6, #1
 8003680:	bf38      	it	cc
 8003682:	2601      	movcc	r6, #1
 8003684:	2d01      	cmp	r5, #1
 8003686:	bf38      	it	cc
 8003688:	2501      	movcc	r5, #1
 800368a:	b2f6      	uxtb	r6, r6
 800368c:	b2ed      	uxtb	r5, r5
 800368e:	ea85 0306 	eor.w	r3, r5, r6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b03      	cmp	r3, #3
 8003696:	d916      	bls.n	80036c6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8003698:	2d03      	cmp	r5, #3
 800369a:	bf81      	itttt	hi
 800369c:	462e      	movhi	r6, r5
 800369e:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 80036a0:	2000      	movhi	r0, #0
 80036a2:	6023      	strhi	r3, [r4, #0]
 80036a4:	bf8a      	itet	hi
 80036a6:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 80036aa:	4638      	movls	r0, r7
 80036ac:	7123      	strbhi	r3, [r4, #4]
 80036ae:	07b3      	lsls	r3, r6, #30
 80036b0:	71a6      	strb	r6, [r4, #6]
 80036b2:	d402      	bmi.n	80036ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 80036b4:	f016 0601 	ands.w	r6, r6, #1
 80036b8:	d19a      	bne.n	80035f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80036ba:	2000      	movs	r0, #0
 80036bc:	e786      	b.n	80035cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80036be:	2601      	movs	r6, #1
 80036c0:	e7e5      	b.n	800368e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80036c2:	2501      	movs	r5, #1
 80036c4:	e7e3      	b.n	800368e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80036c6:	2300      	movs	r3, #0
 80036c8:	4035      	ands	r5, r6
 80036ca:	b2ed      	uxtb	r5, r5
 80036cc:	2d03      	cmp	r5, #3
 80036ce:	6023      	str	r3, [r4, #0]
 80036d0:	d903      	bls.n	80036da <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 80036d2:	2302      	movs	r3, #2
 80036d4:	2001      	movs	r0, #1
 80036d6:	71a3      	strb	r3, [r4, #6]
 80036d8:	e778      	b.n	80035cc <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80036da:	2001      	movs	r0, #1
 80036dc:	71a0      	strb	r0, [r4, #6]
 80036de:	e787      	b.n	80035f0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80036e0:	2301      	movs	r3, #1
 80036e2:	9309      	str	r3, [sp, #36]	; 0x24
 80036e4:	4638      	mov	r0, r7
 80036e6:	e786      	b.n	80035f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 80036e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f43f af6f 	beq.w	80035ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80036f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	f43f af6b 	beq.w	80035ce <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80036f8:	2301      	movs	r3, #1
 80036fa:	f8cd b020 	str.w	fp, [sp, #32]
 80036fe:	930a      	str	r3, [sp, #40]	; 0x28
 8003700:	e714      	b.n	800352c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9e>

08003702 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8003702:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	4606      	mov	r6, r0
 800370a:	4617      	mov	r7, r2
 800370c:	461c      	mov	r4, r3
 800370e:	9102      	str	r1, [sp, #8]
 8003710:	f7ff fa4b 	bl	8002baa <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8003714:	4605      	mov	r5, r0
 8003716:	2800      	cmp	r0, #0
 8003718:	d15f      	bne.n	80037da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 800371a:	f8d4 9008 	ldr.w	r9, [r4, #8]
 800371e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8003722:	f019 0f10 	tst.w	r9, #16
 8003726:	bf18      	it	ne
 8003728:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 800372c:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8003730:	f009 0301 	and.w	r3, r9, #1
 8003734:	9303      	str	r3, [sp, #12]
 8003736:	f10d 0b10 	add.w	fp, sp, #16
 800373a:	f1ba 0f00 	cmp.w	sl, #0
 800373e:	d072      	beq.n	8003826 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 8003740:	2300      	movs	r3, #0
 8003742:	9304      	str	r3, [sp, #16]
 8003744:	f88d 3014 	strb.w	r3, [sp, #20]
 8003748:	2300      	movs	r3, #0
 800374a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800374e:	9307      	str	r3, [sp, #28]
 8003750:	f002 0301 	and.w	r3, r2, #1
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	f002 0302 	and.w	r3, r2, #2
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	9b03      	ldr	r3, [sp, #12]
 800375e:	f002 0102 	and.w	r1, r2, #2
 8003762:	430b      	orrs	r3, r1
 8003764:	f8cd 9018 	str.w	r9, [sp, #24]
 8003768:	d104      	bne.n	8003774 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x72>
 800376a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800376e:	f1a8 0808 	sub.w	r8, r8, #8
 8003772:	e7e2      	b.n	800373a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8003774:	2f00      	cmp	r7, #0
 8003776:	d034      	beq.n	80037e2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 8003778:	9b00      	ldr	r3, [sp, #0]
 800377a:	1212      	asrs	r2, r2, #8
 800377c:	b10b      	cbz	r3, 8003782 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x80>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	589a      	ldr	r2, [r3, r2]
 8003782:	443a      	add	r2, r7
 8003784:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8003788:	9902      	ldr	r1, [sp, #8]
 800378a:	6803      	ldr	r3, [r0, #0]
 800378c:	699d      	ldr	r5, [r3, #24]
 800378e:	465b      	mov	r3, fp
 8003790:	47a8      	blx	r5
 8003792:	4605      	mov	r5, r0
 8003794:	2800      	cmp	r0, #0
 8003796:	d0e8      	beq.n	800376a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8003798:	9b07      	ldr	r3, [sp, #28]
 800379a:	2b08      	cmp	r3, #8
 800379c:	d104      	bne.n	80037a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 800379e:	9b00      	ldr	r3, [sp, #0]
 80037a0:	b113      	cbz	r3, 80037a8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 80037a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80037a6:	9307      	str	r3, [sp, #28]
 80037a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d905      	bls.n	80037bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80037b0:	9a01      	ldr	r2, [sp, #4]
 80037b2:	b91a      	cbnz	r2, 80037bc <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 80037b4:	f023 0302 	bic.w	r3, r3, #2
 80037b8:	f88d 3014 	strb.w	r3, [sp, #20]
 80037bc:	68e1      	ldr	r1, [r4, #12]
 80037be:	b9c1      	cbnz	r1, 80037f2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 80037c0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80037c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037c8:	7923      	ldrb	r3, [r4, #4]
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d905      	bls.n	80037da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80037ce:	079a      	lsls	r2, r3, #30
 80037d0:	d509      	bpl.n	80037e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 80037d2:	68b3      	ldr	r3, [r6, #8]
 80037d4:	f013 0f01 	tst.w	r3, #1
 80037d8:	d1c7      	bne.n	800376a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 80037da:	4628      	mov	r0, r5
 80037dc:	b009      	add	sp, #36	; 0x24
 80037de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e2:	463a      	mov	r2, r7
 80037e4:	e7ce      	b.n	8003784 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x82>
 80037e6:	07db      	lsls	r3, r3, #31
 80037e8:	d5f7      	bpl.n	80037da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80037ea:	68b3      	ldr	r3, [r6, #8]
 80037ec:	f013 0f02 	tst.w	r3, #2
 80037f0:	e7f2      	b.n	80037d8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	9a04      	ldr	r2, [sp, #16]
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d004      	beq.n	8003804 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 80037fa:	2300      	movs	r3, #0
 80037fc:	6023      	str	r3, [r4, #0]
 80037fe:	2302      	movs	r3, #2
 8003800:	7123      	strb	r3, [r4, #4]
 8003802:	e7ea      	b.n	80037da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 8003804:	b12b      	cbz	r3, 8003812 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 8003806:	7923      	ldrb	r3, [r4, #4]
 8003808:	f89d 2014 	ldrb.w	r2, [sp, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	7123      	strb	r3, [r4, #4]
 8003810:	e7ab      	b.n	800376a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8003812:	9807      	ldr	r0, [sp, #28]
 8003814:	2808      	cmp	r0, #8
 8003816:	d0f2      	beq.n	80037fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8003818:	2908      	cmp	r1, #8
 800381a:	d0f0      	beq.n	80037fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 800381c:	f7ff fdbc 	bl	8003398 <_ZNKSt9type_infoeqERKS_>
 8003820:	2800      	cmp	r0, #0
 8003822:	d1f0      	bne.n	8003806 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8003824:	e7eb      	b.n	80037fe <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8003826:	7925      	ldrb	r5, [r4, #4]
 8003828:	3d00      	subs	r5, #0
 800382a:	bf18      	it	ne
 800382c:	2501      	movne	r5, #1
 800382e:	e7d4      	b.n	80037da <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>

08003830 <_ZdlPv>:
 8003830:	f000 b8c0 	b.w	80039b4 <free>

08003834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8003834:	7803      	ldrb	r3, [r0, #0]
 8003836:	2b47      	cmp	r3, #71	; 0x47
 8003838:	d117      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800383a:	7843      	ldrb	r3, [r0, #1]
 800383c:	2b4e      	cmp	r3, #78	; 0x4e
 800383e:	d114      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003840:	7883      	ldrb	r3, [r0, #2]
 8003842:	2b55      	cmp	r3, #85	; 0x55
 8003844:	d111      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003846:	78c3      	ldrb	r3, [r0, #3]
 8003848:	2b43      	cmp	r3, #67	; 0x43
 800384a:	d10e      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800384c:	7903      	ldrb	r3, [r0, #4]
 800384e:	2b43      	cmp	r3, #67	; 0x43
 8003850:	d10b      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003852:	7943      	ldrb	r3, [r0, #5]
 8003854:	2b2b      	cmp	r3, #43	; 0x2b
 8003856:	d108      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8003858:	7983      	ldrb	r3, [r0, #6]
 800385a:	2b2b      	cmp	r3, #43	; 0x2b
 800385c:	d105      	bne.n	800386a <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800385e:	79c0      	ldrb	r0, [r0, #7]
 8003860:	2801      	cmp	r0, #1
 8003862:	bf8c      	ite	hi
 8003864:	2000      	movhi	r0, #0
 8003866:	2001      	movls	r0, #1
 8003868:	4770      	bx	lr
 800386a:	2000      	movs	r0, #0
 800386c:	4770      	bx	lr

0800386e <__cxa_call_terminate>:
 800386e:	b510      	push	{r4, lr}
 8003870:	4604      	mov	r4, r0
 8003872:	b148      	cbz	r0, 8003888 <__cxa_call_terminate+0x1a>
 8003874:	f000 f83b 	bl	80038ee <__cxa_begin_catch>
 8003878:	4620      	mov	r0, r4
 800387a:	f7ff ffdb 	bl	8003834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800387e:	b118      	cbz	r0, 8003888 <__cxa_call_terminate+0x1a>
 8003880:	f854 0c14 	ldr.w	r0, [r4, #-20]
 8003884:	f7ff fce0 	bl	8003248 <_ZN10__cxxabiv111__terminateEPFvvE>
 8003888:	f7ff fcea 	bl	8003260 <_ZSt9terminatev>

0800388c <__cxa_call_unexpected>:
 800388c:	b538      	push	{r3, r4, r5, lr}
 800388e:	4602      	mov	r2, r0
 8003890:	f7ff ffd0 	bl	8003834 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003894:	4604      	mov	r4, r0
 8003896:	b140      	cbz	r0, 80038aa <__cxa_call_unexpected+0x1e>
 8003898:	2500      	movs	r5, #0
 800389a:	f852 4c18 	ldr.w	r4, [r2, #-24]
 800389e:	4610      	mov	r0, r2
 80038a0:	f000 f825 	bl	80038ee <__cxa_begin_catch>
 80038a4:	b11d      	cbz	r5, 80038ae <__cxa_call_unexpected+0x22>
 80038a6:	f7ff fced 	bl	8003284 <_ZSt10unexpectedv>
 80038aa:	2501      	movs	r5, #1
 80038ac:	e7f7      	b.n	800389e <__cxa_call_unexpected+0x12>
 80038ae:	4620      	mov	r0, r4
 80038b0:	f7ff fcdb 	bl	800326a <_ZN10__cxxabiv112__unexpectedEPFvvE>

080038b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80038b4:	7803      	ldrb	r3, [r0, #0]
 80038b6:	2b47      	cmp	r3, #71	; 0x47
 80038b8:	d117      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038ba:	7843      	ldrb	r3, [r0, #1]
 80038bc:	2b4e      	cmp	r3, #78	; 0x4e
 80038be:	d114      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038c0:	7883      	ldrb	r3, [r0, #2]
 80038c2:	2b55      	cmp	r3, #85	; 0x55
 80038c4:	d111      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038c6:	78c3      	ldrb	r3, [r0, #3]
 80038c8:	2b43      	cmp	r3, #67	; 0x43
 80038ca:	d10e      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038cc:	7903      	ldrb	r3, [r0, #4]
 80038ce:	2b43      	cmp	r3, #67	; 0x43
 80038d0:	d10b      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038d2:	7943      	ldrb	r3, [r0, #5]
 80038d4:	2b2b      	cmp	r3, #43	; 0x2b
 80038d6:	d108      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038d8:	7983      	ldrb	r3, [r0, #6]
 80038da:	2b2b      	cmp	r3, #43	; 0x2b
 80038dc:	d105      	bne.n	80038ea <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80038de:	79c0      	ldrb	r0, [r0, #7]
 80038e0:	2801      	cmp	r0, #1
 80038e2:	bf8c      	ite	hi
 80038e4:	2000      	movhi	r0, #0
 80038e6:	2001      	movls	r0, #1
 80038e8:	4770      	bx	lr
 80038ea:	2000      	movs	r0, #0
 80038ec:	4770      	bx	lr

080038ee <__cxa_begin_catch>:
 80038ee:	b538      	push	{r3, r4, r5, lr}
 80038f0:	4604      	mov	r4, r0
 80038f2:	f7ff fa2b 	bl	8002d4c <__cxa_get_globals>
 80038f6:	4602      	mov	r2, r0
 80038f8:	6805      	ldr	r5, [r0, #0]
 80038fa:	4620      	mov	r0, r4
 80038fc:	f1a4 0120 	sub.w	r1, r4, #32
 8003900:	f7ff ffd8 	bl	80038b4 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8003904:	b928      	cbnz	r0, 8003912 <__cxa_begin_catch+0x24>
 8003906:	b10d      	cbz	r5, 800390c <__cxa_begin_catch+0x1e>
 8003908:	f7ff fcaa 	bl	8003260 <_ZSt9terminatev>
 800390c:	6011      	str	r1, [r2, #0]
 800390e:	4628      	mov	r0, r5
 8003910:	bd38      	pop	{r3, r4, r5, pc}
 8003912:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 8003916:	4620      	mov	r0, r4
 8003918:	2b00      	cmp	r3, #0
 800391a:	bfb4      	ite	lt
 800391c:	f1c3 0301 	rsblt	r3, r3, #1
 8003920:	3301      	addge	r3, #1
 8003922:	f844 3c0c 	str.w	r3, [r4, #-12]
 8003926:	6853      	ldr	r3, [r2, #4]
 8003928:	428d      	cmp	r5, r1
 800392a:	f103 33ff 	add.w	r3, r3, #4294967295
 800392e:	6053      	str	r3, [r2, #4]
 8003930:	bf1c      	itt	ne
 8003932:	f844 5c10 	strne.w	r5, [r4, #-16]
 8003936:	6011      	strne	r1, [r2, #0]
 8003938:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800393a:	f7fc fddd 	bl	80004f8 <_Unwind_Complete>
 800393e:	e7e6      	b.n	800390e <__cxa_begin_catch+0x20>

08003940 <abort>:
 8003940:	2006      	movs	r0, #6
 8003942:	b508      	push	{r3, lr}
 8003944:	f000 f982 	bl	8003c4c <raise>
 8003948:	2001      	movs	r0, #1
 800394a:	f7fe f8f9 	bl	8001b40 <_exit>
	...

08003950 <__errno>:
 8003950:	4b01      	ldr	r3, [pc, #4]	; (8003958 <__errno+0x8>)
 8003952:	6818      	ldr	r0, [r3, #0]
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	20000014 	.word	0x20000014

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	2600      	movs	r6, #0
 8003960:	4d0c      	ldr	r5, [pc, #48]	; (8003994 <__libc_init_array+0x38>)
 8003962:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003964:	1b64      	subs	r4, r4, r5
 8003966:	10a4      	asrs	r4, r4, #2
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	f000 f99e 	bl	8003cac <_init>
 8003970:	2600      	movs	r6, #0
 8003972:	4d0a      	ldr	r5, [pc, #40]	; (800399c <__libc_init_array+0x40>)
 8003974:	4c0a      	ldr	r4, [pc, #40]	; (80039a0 <__libc_init_array+0x44>)
 8003976:	1b64      	subs	r4, r4, r5
 8003978:	10a4      	asrs	r4, r4, #2
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	0800416c 	.word	0x0800416c
 8003998:	0800416c 	.word	0x0800416c
 800399c:	0800416c 	.word	0x0800416c
 80039a0:	08004178 	.word	0x08004178

080039a4 <malloc>:
 80039a4:	4b02      	ldr	r3, [pc, #8]	; (80039b0 <malloc+0xc>)
 80039a6:	4601      	mov	r1, r0
 80039a8:	6818      	ldr	r0, [r3, #0]
 80039aa:	f000 b8a3 	b.w	8003af4 <_malloc_r>
 80039ae:	bf00      	nop
 80039b0:	20000014 	.word	0x20000014

080039b4 <free>:
 80039b4:	4b02      	ldr	r3, [pc, #8]	; (80039c0 <free+0xc>)
 80039b6:	4601      	mov	r1, r0
 80039b8:	6818      	ldr	r0, [r3, #0]
 80039ba:	f000 b833 	b.w	8003a24 <_free_r>
 80039be:	bf00      	nop
 80039c0:	20000014 	.word	0x20000014

080039c4 <memcpy>:
 80039c4:	440a      	add	r2, r1
 80039c6:	4291      	cmp	r1, r2
 80039c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80039cc:	d100      	bne.n	80039d0 <memcpy+0xc>
 80039ce:	4770      	bx	lr
 80039d0:	b510      	push	{r4, lr}
 80039d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039d6:	4291      	cmp	r1, r2
 80039d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039dc:	d1f9      	bne.n	80039d2 <memcpy+0xe>
 80039de:	bd10      	pop	{r4, pc}

080039e0 <memmove>:
 80039e0:	4288      	cmp	r0, r1
 80039e2:	b510      	push	{r4, lr}
 80039e4:	eb01 0402 	add.w	r4, r1, r2
 80039e8:	d902      	bls.n	80039f0 <memmove+0x10>
 80039ea:	4284      	cmp	r4, r0
 80039ec:	4623      	mov	r3, r4
 80039ee:	d807      	bhi.n	8003a00 <memmove+0x20>
 80039f0:	1e43      	subs	r3, r0, #1
 80039f2:	42a1      	cmp	r1, r4
 80039f4:	d008      	beq.n	8003a08 <memmove+0x28>
 80039f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80039fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80039fe:	e7f8      	b.n	80039f2 <memmove+0x12>
 8003a00:	4601      	mov	r1, r0
 8003a02:	4402      	add	r2, r0
 8003a04:	428a      	cmp	r2, r1
 8003a06:	d100      	bne.n	8003a0a <memmove+0x2a>
 8003a08:	bd10      	pop	{r4, pc}
 8003a0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a0e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a12:	e7f7      	b.n	8003a04 <memmove+0x24>

08003a14 <memset>:
 8003a14:	4603      	mov	r3, r0
 8003a16:	4402      	add	r2, r0
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d100      	bne.n	8003a1e <memset+0xa>
 8003a1c:	4770      	bx	lr
 8003a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8003a22:	e7f9      	b.n	8003a18 <memset+0x4>

08003a24 <_free_r>:
 8003a24:	b538      	push	{r3, r4, r5, lr}
 8003a26:	4605      	mov	r5, r0
 8003a28:	2900      	cmp	r1, #0
 8003a2a:	d040      	beq.n	8003aae <_free_r+0x8a>
 8003a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a30:	1f0c      	subs	r4, r1, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	bfb8      	it	lt
 8003a36:	18e4      	addlt	r4, r4, r3
 8003a38:	f000 f924 	bl	8003c84 <__malloc_lock>
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <_free_r+0x8c>)
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	b933      	cbnz	r3, 8003a50 <_free_r+0x2c>
 8003a42:	6063      	str	r3, [r4, #4]
 8003a44:	6014      	str	r4, [r2, #0]
 8003a46:	4628      	mov	r0, r5
 8003a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a4c:	f000 b920 	b.w	8003c90 <__malloc_unlock>
 8003a50:	42a3      	cmp	r3, r4
 8003a52:	d908      	bls.n	8003a66 <_free_r+0x42>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	1821      	adds	r1, r4, r0
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	bf01      	itttt	eq
 8003a5c:	6819      	ldreq	r1, [r3, #0]
 8003a5e:	685b      	ldreq	r3, [r3, #4]
 8003a60:	1809      	addeq	r1, r1, r0
 8003a62:	6021      	streq	r1, [r4, #0]
 8003a64:	e7ed      	b.n	8003a42 <_free_r+0x1e>
 8003a66:	461a      	mov	r2, r3
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	b10b      	cbz	r3, 8003a70 <_free_r+0x4c>
 8003a6c:	42a3      	cmp	r3, r4
 8003a6e:	d9fa      	bls.n	8003a66 <_free_r+0x42>
 8003a70:	6811      	ldr	r1, [r2, #0]
 8003a72:	1850      	adds	r0, r2, r1
 8003a74:	42a0      	cmp	r0, r4
 8003a76:	d10b      	bne.n	8003a90 <_free_r+0x6c>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	4401      	add	r1, r0
 8003a7c:	1850      	adds	r0, r2, r1
 8003a7e:	4283      	cmp	r3, r0
 8003a80:	6011      	str	r1, [r2, #0]
 8003a82:	d1e0      	bne.n	8003a46 <_free_r+0x22>
 8003a84:	6818      	ldr	r0, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4401      	add	r1, r0
 8003a8a:	6011      	str	r1, [r2, #0]
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	e7da      	b.n	8003a46 <_free_r+0x22>
 8003a90:	d902      	bls.n	8003a98 <_free_r+0x74>
 8003a92:	230c      	movs	r3, #12
 8003a94:	602b      	str	r3, [r5, #0]
 8003a96:	e7d6      	b.n	8003a46 <_free_r+0x22>
 8003a98:	6820      	ldr	r0, [r4, #0]
 8003a9a:	1821      	adds	r1, r4, r0
 8003a9c:	428b      	cmp	r3, r1
 8003a9e:	bf01      	itttt	eq
 8003aa0:	6819      	ldreq	r1, [r3, #0]
 8003aa2:	685b      	ldreq	r3, [r3, #4]
 8003aa4:	1809      	addeq	r1, r1, r0
 8003aa6:	6021      	streq	r1, [r4, #0]
 8003aa8:	6063      	str	r3, [r4, #4]
 8003aaa:	6054      	str	r4, [r2, #4]
 8003aac:	e7cb      	b.n	8003a46 <_free_r+0x22>
 8003aae:	bd38      	pop	{r3, r4, r5, pc}
 8003ab0:	20000444 	.word	0x20000444

08003ab4 <sbrk_aligned>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	4e0e      	ldr	r6, [pc, #56]	; (8003af0 <sbrk_aligned+0x3c>)
 8003ab8:	460c      	mov	r4, r1
 8003aba:	6831      	ldr	r1, [r6, #0]
 8003abc:	4605      	mov	r5, r0
 8003abe:	b911      	cbnz	r1, 8003ac6 <sbrk_aligned+0x12>
 8003ac0:	f000 f88c 	bl	8003bdc <_sbrk_r>
 8003ac4:	6030      	str	r0, [r6, #0]
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f887 	bl	8003bdc <_sbrk_r>
 8003ace:	1c43      	adds	r3, r0, #1
 8003ad0:	d00a      	beq.n	8003ae8 <sbrk_aligned+0x34>
 8003ad2:	1cc4      	adds	r4, r0, #3
 8003ad4:	f024 0403 	bic.w	r4, r4, #3
 8003ad8:	42a0      	cmp	r0, r4
 8003ada:	d007      	beq.n	8003aec <sbrk_aligned+0x38>
 8003adc:	1a21      	subs	r1, r4, r0
 8003ade:	4628      	mov	r0, r5
 8003ae0:	f000 f87c 	bl	8003bdc <_sbrk_r>
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d101      	bne.n	8003aec <sbrk_aligned+0x38>
 8003ae8:	f04f 34ff 	mov.w	r4, #4294967295
 8003aec:	4620      	mov	r0, r4
 8003aee:	bd70      	pop	{r4, r5, r6, pc}
 8003af0:	20000448 	.word	0x20000448

08003af4 <_malloc_r>:
 8003af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	1ccd      	adds	r5, r1, #3
 8003afa:	f025 0503 	bic.w	r5, r5, #3
 8003afe:	3508      	adds	r5, #8
 8003b00:	2d0c      	cmp	r5, #12
 8003b02:	bf38      	it	cc
 8003b04:	250c      	movcc	r5, #12
 8003b06:	2d00      	cmp	r5, #0
 8003b08:	4607      	mov	r7, r0
 8003b0a:	db01      	blt.n	8003b10 <_malloc_r+0x1c>
 8003b0c:	42a9      	cmp	r1, r5
 8003b0e:	d905      	bls.n	8003b1c <_malloc_r+0x28>
 8003b10:	230c      	movs	r3, #12
 8003b12:	2600      	movs	r6, #0
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4630      	mov	r0, r6
 8003b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b1c:	4e2e      	ldr	r6, [pc, #184]	; (8003bd8 <_malloc_r+0xe4>)
 8003b1e:	f000 f8b1 	bl	8003c84 <__malloc_lock>
 8003b22:	6833      	ldr	r3, [r6, #0]
 8003b24:	461c      	mov	r4, r3
 8003b26:	bb34      	cbnz	r4, 8003b76 <_malloc_r+0x82>
 8003b28:	4629      	mov	r1, r5
 8003b2a:	4638      	mov	r0, r7
 8003b2c:	f7ff ffc2 	bl	8003ab4 <sbrk_aligned>
 8003b30:	1c43      	adds	r3, r0, #1
 8003b32:	4604      	mov	r4, r0
 8003b34:	d14d      	bne.n	8003bd2 <_malloc_r+0xde>
 8003b36:	6834      	ldr	r4, [r6, #0]
 8003b38:	4626      	mov	r6, r4
 8003b3a:	2e00      	cmp	r6, #0
 8003b3c:	d140      	bne.n	8003bc0 <_malloc_r+0xcc>
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	4631      	mov	r1, r6
 8003b42:	4638      	mov	r0, r7
 8003b44:	eb04 0803 	add.w	r8, r4, r3
 8003b48:	f000 f848 	bl	8003bdc <_sbrk_r>
 8003b4c:	4580      	cmp	r8, r0
 8003b4e:	d13a      	bne.n	8003bc6 <_malloc_r+0xd2>
 8003b50:	6821      	ldr	r1, [r4, #0]
 8003b52:	3503      	adds	r5, #3
 8003b54:	1a6d      	subs	r5, r5, r1
 8003b56:	f025 0503 	bic.w	r5, r5, #3
 8003b5a:	3508      	adds	r5, #8
 8003b5c:	2d0c      	cmp	r5, #12
 8003b5e:	bf38      	it	cc
 8003b60:	250c      	movcc	r5, #12
 8003b62:	4638      	mov	r0, r7
 8003b64:	4629      	mov	r1, r5
 8003b66:	f7ff ffa5 	bl	8003ab4 <sbrk_aligned>
 8003b6a:	3001      	adds	r0, #1
 8003b6c:	d02b      	beq.n	8003bc6 <_malloc_r+0xd2>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	442b      	add	r3, r5
 8003b72:	6023      	str	r3, [r4, #0]
 8003b74:	e00e      	b.n	8003b94 <_malloc_r+0xa0>
 8003b76:	6822      	ldr	r2, [r4, #0]
 8003b78:	1b52      	subs	r2, r2, r5
 8003b7a:	d41e      	bmi.n	8003bba <_malloc_r+0xc6>
 8003b7c:	2a0b      	cmp	r2, #11
 8003b7e:	d916      	bls.n	8003bae <_malloc_r+0xba>
 8003b80:	1961      	adds	r1, r4, r5
 8003b82:	42a3      	cmp	r3, r4
 8003b84:	6025      	str	r5, [r4, #0]
 8003b86:	bf18      	it	ne
 8003b88:	6059      	strne	r1, [r3, #4]
 8003b8a:	6863      	ldr	r3, [r4, #4]
 8003b8c:	bf08      	it	eq
 8003b8e:	6031      	streq	r1, [r6, #0]
 8003b90:	5162      	str	r2, [r4, r5]
 8003b92:	604b      	str	r3, [r1, #4]
 8003b94:	4638      	mov	r0, r7
 8003b96:	f104 060b 	add.w	r6, r4, #11
 8003b9a:	f000 f879 	bl	8003c90 <__malloc_unlock>
 8003b9e:	f026 0607 	bic.w	r6, r6, #7
 8003ba2:	1d23      	adds	r3, r4, #4
 8003ba4:	1af2      	subs	r2, r6, r3
 8003ba6:	d0b6      	beq.n	8003b16 <_malloc_r+0x22>
 8003ba8:	1b9b      	subs	r3, r3, r6
 8003baa:	50a3      	str	r3, [r4, r2]
 8003bac:	e7b3      	b.n	8003b16 <_malloc_r+0x22>
 8003bae:	6862      	ldr	r2, [r4, #4]
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	bf0c      	ite	eq
 8003bb4:	6032      	streq	r2, [r6, #0]
 8003bb6:	605a      	strne	r2, [r3, #4]
 8003bb8:	e7ec      	b.n	8003b94 <_malloc_r+0xa0>
 8003bba:	4623      	mov	r3, r4
 8003bbc:	6864      	ldr	r4, [r4, #4]
 8003bbe:	e7b2      	b.n	8003b26 <_malloc_r+0x32>
 8003bc0:	4634      	mov	r4, r6
 8003bc2:	6876      	ldr	r6, [r6, #4]
 8003bc4:	e7b9      	b.n	8003b3a <_malloc_r+0x46>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	4638      	mov	r0, r7
 8003bca:	603b      	str	r3, [r7, #0]
 8003bcc:	f000 f860 	bl	8003c90 <__malloc_unlock>
 8003bd0:	e7a1      	b.n	8003b16 <_malloc_r+0x22>
 8003bd2:	6025      	str	r5, [r4, #0]
 8003bd4:	e7de      	b.n	8003b94 <_malloc_r+0xa0>
 8003bd6:	bf00      	nop
 8003bd8:	20000444 	.word	0x20000444

08003bdc <_sbrk_r>:
 8003bdc:	b538      	push	{r3, r4, r5, lr}
 8003bde:	2300      	movs	r3, #0
 8003be0:	4d05      	ldr	r5, [pc, #20]	; (8003bf8 <_sbrk_r+0x1c>)
 8003be2:	4604      	mov	r4, r0
 8003be4:	4608      	mov	r0, r1
 8003be6:	602b      	str	r3, [r5, #0]
 8003be8:	f7fd ffb0 	bl	8001b4c <_sbrk>
 8003bec:	1c43      	adds	r3, r0, #1
 8003bee:	d102      	bne.n	8003bf6 <_sbrk_r+0x1a>
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <_sbrk_r+0x1a>
 8003bf4:	6023      	str	r3, [r4, #0]
 8003bf6:	bd38      	pop	{r3, r4, r5, pc}
 8003bf8:	2000044c 	.word	0x2000044c

08003bfc <_raise_r>:
 8003bfc:	291f      	cmp	r1, #31
 8003bfe:	b538      	push	{r3, r4, r5, lr}
 8003c00:	4604      	mov	r4, r0
 8003c02:	460d      	mov	r5, r1
 8003c04:	d904      	bls.n	8003c10 <_raise_r+0x14>
 8003c06:	2316      	movs	r3, #22
 8003c08:	6003      	str	r3, [r0, #0]
 8003c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c0e:	bd38      	pop	{r3, r4, r5, pc}
 8003c10:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003c12:	b112      	cbz	r2, 8003c1a <_raise_r+0x1e>
 8003c14:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003c18:	b94b      	cbnz	r3, 8003c2e <_raise_r+0x32>
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f000 f830 	bl	8003c80 <_getpid_r>
 8003c20:	462a      	mov	r2, r5
 8003c22:	4601      	mov	r1, r0
 8003c24:	4620      	mov	r0, r4
 8003c26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c2a:	f000 b817 	b.w	8003c5c <_kill_r>
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d00a      	beq.n	8003c48 <_raise_r+0x4c>
 8003c32:	1c59      	adds	r1, r3, #1
 8003c34:	d103      	bne.n	8003c3e <_raise_r+0x42>
 8003c36:	2316      	movs	r3, #22
 8003c38:	6003      	str	r3, [r0, #0]
 8003c3a:	2001      	movs	r0, #1
 8003c3c:	e7e7      	b.n	8003c0e <_raise_r+0x12>
 8003c3e:	2400      	movs	r4, #0
 8003c40:	4628      	mov	r0, r5
 8003c42:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003c46:	4798      	blx	r3
 8003c48:	2000      	movs	r0, #0
 8003c4a:	e7e0      	b.n	8003c0e <_raise_r+0x12>

08003c4c <raise>:
 8003c4c:	4b02      	ldr	r3, [pc, #8]	; (8003c58 <raise+0xc>)
 8003c4e:	4601      	mov	r1, r0
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	f7ff bfd3 	b.w	8003bfc <_raise_r>
 8003c56:	bf00      	nop
 8003c58:	20000014 	.word	0x20000014

08003c5c <_kill_r>:
 8003c5c:	b538      	push	{r3, r4, r5, lr}
 8003c5e:	2300      	movs	r3, #0
 8003c60:	4d06      	ldr	r5, [pc, #24]	; (8003c7c <_kill_r+0x20>)
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	602b      	str	r3, [r5, #0]
 8003c6a:	f7fd ff61 	bl	8001b30 <_kill>
 8003c6e:	1c43      	adds	r3, r0, #1
 8003c70:	d102      	bne.n	8003c78 <_kill_r+0x1c>
 8003c72:	682b      	ldr	r3, [r5, #0]
 8003c74:	b103      	cbz	r3, 8003c78 <_kill_r+0x1c>
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	bd38      	pop	{r3, r4, r5, pc}
 8003c7a:	bf00      	nop
 8003c7c:	2000044c 	.word	0x2000044c

08003c80 <_getpid_r>:
 8003c80:	f7fd bf54 	b.w	8001b2c <_getpid>

08003c84 <__malloc_lock>:
 8003c84:	4801      	ldr	r0, [pc, #4]	; (8003c8c <__malloc_lock+0x8>)
 8003c86:	f000 b809 	b.w	8003c9c <__retarget_lock_acquire_recursive>
 8003c8a:	bf00      	nop
 8003c8c:	20000450 	.word	0x20000450

08003c90 <__malloc_unlock>:
 8003c90:	4801      	ldr	r0, [pc, #4]	; (8003c98 <__malloc_unlock+0x8>)
 8003c92:	f000 b804 	b.w	8003c9e <__retarget_lock_release_recursive>
 8003c96:	bf00      	nop
 8003c98:	20000450 	.word	0x20000450

08003c9c <__retarget_lock_acquire_recursive>:
 8003c9c:	4770      	bx	lr

08003c9e <__retarget_lock_release_recursive>:
 8003c9e:	4770      	bx	lr

08003ca0 <_Unwind_GetDataRelBase>:
 8003ca0:	b508      	push	{r3, lr}
 8003ca2:	f7ff fe4d 	bl	8003940 <abort>

08003ca6 <_Unwind_GetTextRelBase>:
 8003ca6:	b508      	push	{r3, lr}
 8003ca8:	f7ff fffa 	bl	8003ca0 <_Unwind_GetDataRelBase>

08003cac <_init>:
 8003cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cae:	bf00      	nop
 8003cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cb2:	bc08      	pop	{r3}
 8003cb4:	469e      	mov	lr, r3
 8003cb6:	4770      	bx	lr

08003cb8 <_fini>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr
