
SteppingMD_on_BaseBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000693c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000710  08006a48  08006a48  00016a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000140  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000220  08007298  08007298  00017298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074b8  080074b8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000018  080074b8  080074b8  000174b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000010  080074d0  080074d0  000174d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080074e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000007c  0800755c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004bc  0800755c  000204bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0007639c  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007390  00000000  00000000  00096441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00022b7a  00000000  00000000  0009d7d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  000c0350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00005920  00000000  00000000  000c10e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000099e4  00000000  00000000  000c6a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001eb20  00000000  00000000  000d03ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd61d  00000000  00000000  000eef0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001cc529  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b00  00000000  00000000  001cc57c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08006a30 	.word	0x08006a30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08006a30 	.word	0x08006a30

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <__aeabi_frsub>:
 8000170:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__addsf3>
 8000176:	bf00      	nop

08000178 <__aeabi_fsub>:
 8000178:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800017c <__addsf3>:
 800017c:	0042      	lsls	r2, r0, #1
 800017e:	bf1f      	itttt	ne
 8000180:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000184:	ea92 0f03 	teqne	r2, r3
 8000188:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800018c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000190:	d06a      	beq.n	8000268 <__addsf3+0xec>
 8000192:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000196:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800019a:	bfc1      	itttt	gt
 800019c:	18d2      	addgt	r2, r2, r3
 800019e:	4041      	eorgt	r1, r0
 80001a0:	4048      	eorgt	r0, r1
 80001a2:	4041      	eorgt	r1, r0
 80001a4:	bfb8      	it	lt
 80001a6:	425b      	neglt	r3, r3
 80001a8:	2b19      	cmp	r3, #25
 80001aa:	bf88      	it	hi
 80001ac:	4770      	bxhi	lr
 80001ae:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001b2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001ba:	bf18      	it	ne
 80001bc:	4240      	negne	r0, r0
 80001be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001c6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001ca:	bf18      	it	ne
 80001cc:	4249      	negne	r1, r1
 80001ce:	ea92 0f03 	teq	r2, r3
 80001d2:	d03f      	beq.n	8000254 <__addsf3+0xd8>
 80001d4:	f1a2 0201 	sub.w	r2, r2, #1
 80001d8:	fa41 fc03 	asr.w	ip, r1, r3
 80001dc:	eb10 000c 	adds.w	r0, r0, ip
 80001e0:	f1c3 0320 	rsb	r3, r3, #32
 80001e4:	fa01 f103 	lsl.w	r1, r1, r3
 80001e8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001ec:	d502      	bpl.n	80001f4 <__addsf3+0x78>
 80001ee:	4249      	negs	r1, r1
 80001f0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001f4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001f8:	d313      	bcc.n	8000222 <__addsf3+0xa6>
 80001fa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001fe:	d306      	bcc.n	800020e <__addsf3+0x92>
 8000200:	0840      	lsrs	r0, r0, #1
 8000202:	ea4f 0131 	mov.w	r1, r1, rrx
 8000206:	f102 0201 	add.w	r2, r2, #1
 800020a:	2afe      	cmp	r2, #254	; 0xfe
 800020c:	d251      	bcs.n	80002b2 <__addsf3+0x136>
 800020e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000212:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000216:	bf08      	it	eq
 8000218:	f020 0001 	biceq.w	r0, r0, #1
 800021c:	ea40 0003 	orr.w	r0, r0, r3
 8000220:	4770      	bx	lr
 8000222:	0049      	lsls	r1, r1, #1
 8000224:	eb40 0000 	adc.w	r0, r0, r0
 8000228:	3a01      	subs	r2, #1
 800022a:	bf28      	it	cs
 800022c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000230:	d2ed      	bcs.n	800020e <__addsf3+0x92>
 8000232:	fab0 fc80 	clz	ip, r0
 8000236:	f1ac 0c08 	sub.w	ip, ip, #8
 800023a:	ebb2 020c 	subs.w	r2, r2, ip
 800023e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000242:	bfaa      	itet	ge
 8000244:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000248:	4252      	neglt	r2, r2
 800024a:	4318      	orrge	r0, r3
 800024c:	bfbc      	itt	lt
 800024e:	40d0      	lsrlt	r0, r2
 8000250:	4318      	orrlt	r0, r3
 8000252:	4770      	bx	lr
 8000254:	f092 0f00 	teq	r2, #0
 8000258:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800025c:	bf06      	itte	eq
 800025e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000262:	3201      	addeq	r2, #1
 8000264:	3b01      	subne	r3, #1
 8000266:	e7b5      	b.n	80001d4 <__addsf3+0x58>
 8000268:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800026c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000270:	bf18      	it	ne
 8000272:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000276:	d021      	beq.n	80002bc <__addsf3+0x140>
 8000278:	ea92 0f03 	teq	r2, r3
 800027c:	d004      	beq.n	8000288 <__addsf3+0x10c>
 800027e:	f092 0f00 	teq	r2, #0
 8000282:	bf08      	it	eq
 8000284:	4608      	moveq	r0, r1
 8000286:	4770      	bx	lr
 8000288:	ea90 0f01 	teq	r0, r1
 800028c:	bf1c      	itt	ne
 800028e:	2000      	movne	r0, #0
 8000290:	4770      	bxne	lr
 8000292:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000296:	d104      	bne.n	80002a2 <__addsf3+0x126>
 8000298:	0040      	lsls	r0, r0, #1
 800029a:	bf28      	it	cs
 800029c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002a0:	4770      	bx	lr
 80002a2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002a6:	bf3c      	itt	cc
 80002a8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002ac:	4770      	bxcc	lr
 80002ae:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002b2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002b6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002ba:	4770      	bx	lr
 80002bc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002c0:	bf16      	itet	ne
 80002c2:	4608      	movne	r0, r1
 80002c4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002c8:	4601      	movne	r1, r0
 80002ca:	0242      	lsls	r2, r0, #9
 80002cc:	bf06      	itte	eq
 80002ce:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002d2:	ea90 0f01 	teqeq	r0, r1
 80002d6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002da:	4770      	bx	lr

080002dc <__aeabi_ui2f>:
 80002dc:	f04f 0300 	mov.w	r3, #0
 80002e0:	e004      	b.n	80002ec <__aeabi_i2f+0x8>
 80002e2:	bf00      	nop

080002e4 <__aeabi_i2f>:
 80002e4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002e8:	bf48      	it	mi
 80002ea:	4240      	negmi	r0, r0
 80002ec:	ea5f 0c00 	movs.w	ip, r0
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002f8:	4601      	mov	r1, r0
 80002fa:	f04f 0000 	mov.w	r0, #0
 80002fe:	e01c      	b.n	800033a <__aeabi_l2f+0x2a>

08000300 <__aeabi_ul2f>:
 8000300:	ea50 0201 	orrs.w	r2, r0, r1
 8000304:	bf08      	it	eq
 8000306:	4770      	bxeq	lr
 8000308:	f04f 0300 	mov.w	r3, #0
 800030c:	e00a      	b.n	8000324 <__aeabi_l2f+0x14>
 800030e:	bf00      	nop

08000310 <__aeabi_l2f>:
 8000310:	ea50 0201 	orrs.w	r2, r0, r1
 8000314:	bf08      	it	eq
 8000316:	4770      	bxeq	lr
 8000318:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800031c:	d502      	bpl.n	8000324 <__aeabi_l2f+0x14>
 800031e:	4240      	negs	r0, r0
 8000320:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000324:	ea5f 0c01 	movs.w	ip, r1
 8000328:	bf02      	ittt	eq
 800032a:	4684      	moveq	ip, r0
 800032c:	4601      	moveq	r1, r0
 800032e:	2000      	moveq	r0, #0
 8000330:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000334:	bf08      	it	eq
 8000336:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800033a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800033e:	fabc f28c 	clz	r2, ip
 8000342:	3a08      	subs	r2, #8
 8000344:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000348:	db10      	blt.n	800036c <__aeabi_l2f+0x5c>
 800034a:	fa01 fc02 	lsl.w	ip, r1, r2
 800034e:	4463      	add	r3, ip
 8000350:	fa00 fc02 	lsl.w	ip, r0, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800035c:	fa20 f202 	lsr.w	r2, r0, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	f020 0001 	biceq.w	r0, r0, #1
 800036a:	4770      	bx	lr
 800036c:	f102 0220 	add.w	r2, r2, #32
 8000370:	fa01 fc02 	lsl.w	ip, r1, r2
 8000374:	f1c2 0220 	rsb	r2, r2, #32
 8000378:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800037c:	fa21 f202 	lsr.w	r2, r1, r2
 8000380:	eb43 0002 	adc.w	r0, r3, r2
 8000384:	bf08      	it	eq
 8000386:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800038a:	4770      	bx	lr

0800038c <__aeabi_fmul>:
 800038c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000390:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000394:	bf1e      	ittt	ne
 8000396:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800039a:	ea92 0f0c 	teqne	r2, ip
 800039e:	ea93 0f0c 	teqne	r3, ip
 80003a2:	d06f      	beq.n	8000484 <__aeabi_fmul+0xf8>
 80003a4:	441a      	add	r2, r3
 80003a6:	ea80 0c01 	eor.w	ip, r0, r1
 80003aa:	0240      	lsls	r0, r0, #9
 80003ac:	bf18      	it	ne
 80003ae:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003b2:	d01e      	beq.n	80003f2 <__aeabi_fmul+0x66>
 80003b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003b8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003bc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003c0:	fba0 3101 	umull	r3, r1, r0, r1
 80003c4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003c8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003cc:	bf3e      	ittt	cc
 80003ce:	0049      	lslcc	r1, r1, #1
 80003d0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003d4:	005b      	lslcc	r3, r3, #1
 80003d6:	ea40 0001 	orr.w	r0, r0, r1
 80003da:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003de:	2afd      	cmp	r2, #253	; 0xfd
 80003e0:	d81d      	bhi.n	800041e <__aeabi_fmul+0x92>
 80003e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003e6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ea:	bf08      	it	eq
 80003ec:	f020 0001 	biceq.w	r0, r0, #1
 80003f0:	4770      	bx	lr
 80003f2:	f090 0f00 	teq	r0, #0
 80003f6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003fa:	bf08      	it	eq
 80003fc:	0249      	lsleq	r1, r1, #9
 80003fe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000402:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000406:	3a7f      	subs	r2, #127	; 0x7f
 8000408:	bfc2      	ittt	gt
 800040a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800040e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000412:	4770      	bxgt	lr
 8000414:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000418:	f04f 0300 	mov.w	r3, #0
 800041c:	3a01      	subs	r2, #1
 800041e:	dc5d      	bgt.n	80004dc <__aeabi_fmul+0x150>
 8000420:	f112 0f19 	cmn.w	r2, #25
 8000424:	bfdc      	itt	le
 8000426:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800042a:	4770      	bxle	lr
 800042c:	f1c2 0200 	rsb	r2, r2, #0
 8000430:	0041      	lsls	r1, r0, #1
 8000432:	fa21 f102 	lsr.w	r1, r1, r2
 8000436:	f1c2 0220 	rsb	r2, r2, #32
 800043a:	fa00 fc02 	lsl.w	ip, r0, r2
 800043e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000442:	f140 0000 	adc.w	r0, r0, #0
 8000446:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800044a:	bf08      	it	eq
 800044c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000450:	4770      	bx	lr
 8000452:	f092 0f00 	teq	r2, #0
 8000456:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800045a:	bf02      	ittt	eq
 800045c:	0040      	lsleq	r0, r0, #1
 800045e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000462:	3a01      	subeq	r2, #1
 8000464:	d0f9      	beq.n	800045a <__aeabi_fmul+0xce>
 8000466:	ea40 000c 	orr.w	r0, r0, ip
 800046a:	f093 0f00 	teq	r3, #0
 800046e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000472:	bf02      	ittt	eq
 8000474:	0049      	lsleq	r1, r1, #1
 8000476:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800047a:	3b01      	subeq	r3, #1
 800047c:	d0f9      	beq.n	8000472 <__aeabi_fmul+0xe6>
 800047e:	ea41 010c 	orr.w	r1, r1, ip
 8000482:	e78f      	b.n	80003a4 <__aeabi_fmul+0x18>
 8000484:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000488:	ea92 0f0c 	teq	r2, ip
 800048c:	bf18      	it	ne
 800048e:	ea93 0f0c 	teqne	r3, ip
 8000492:	d00a      	beq.n	80004aa <__aeabi_fmul+0x11e>
 8000494:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000498:	bf18      	it	ne
 800049a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800049e:	d1d8      	bne.n	8000452 <__aeabi_fmul+0xc6>
 80004a0:	ea80 0001 	eor.w	r0, r0, r1
 80004a4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004a8:	4770      	bx	lr
 80004aa:	f090 0f00 	teq	r0, #0
 80004ae:	bf17      	itett	ne
 80004b0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004b4:	4608      	moveq	r0, r1
 80004b6:	f091 0f00 	teqne	r1, #0
 80004ba:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004be:	d014      	beq.n	80004ea <__aeabi_fmul+0x15e>
 80004c0:	ea92 0f0c 	teq	r2, ip
 80004c4:	d101      	bne.n	80004ca <__aeabi_fmul+0x13e>
 80004c6:	0242      	lsls	r2, r0, #9
 80004c8:	d10f      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004ca:	ea93 0f0c 	teq	r3, ip
 80004ce:	d103      	bne.n	80004d8 <__aeabi_fmul+0x14c>
 80004d0:	024b      	lsls	r3, r1, #9
 80004d2:	bf18      	it	ne
 80004d4:	4608      	movne	r0, r1
 80004d6:	d108      	bne.n	80004ea <__aeabi_fmul+0x15e>
 80004d8:	ea80 0001 	eor.w	r0, r0, r1
 80004dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004e8:	4770      	bx	lr
 80004ea:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ee:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_fdiv>:
 80004f4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004f8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004fc:	bf1e      	ittt	ne
 80004fe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000502:	ea92 0f0c 	teqne	r2, ip
 8000506:	ea93 0f0c 	teqne	r3, ip
 800050a:	d069      	beq.n	80005e0 <__aeabi_fdiv+0xec>
 800050c:	eba2 0203 	sub.w	r2, r2, r3
 8000510:	ea80 0c01 	eor.w	ip, r0, r1
 8000514:	0249      	lsls	r1, r1, #9
 8000516:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800051a:	d037      	beq.n	800058c <__aeabi_fdiv+0x98>
 800051c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000520:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000524:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000528:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800052c:	428b      	cmp	r3, r1
 800052e:	bf38      	it	cc
 8000530:	005b      	lslcc	r3, r3, #1
 8000532:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000536:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 800053a:	428b      	cmp	r3, r1
 800053c:	bf24      	itt	cs
 800053e:	1a5b      	subcs	r3, r3, r1
 8000540:	ea40 000c 	orrcs.w	r0, r0, ip
 8000544:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000548:	bf24      	itt	cs
 800054a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800054e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000552:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000556:	bf24      	itt	cs
 8000558:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800055c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000560:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000564:	bf24      	itt	cs
 8000566:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800056a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800056e:	011b      	lsls	r3, r3, #4
 8000570:	bf18      	it	ne
 8000572:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000576:	d1e0      	bne.n	800053a <__aeabi_fdiv+0x46>
 8000578:	2afd      	cmp	r2, #253	; 0xfd
 800057a:	f63f af50 	bhi.w	800041e <__aeabi_fmul+0x92>
 800057e:	428b      	cmp	r3, r1
 8000580:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000584:	bf08      	it	eq
 8000586:	f020 0001 	biceq.w	r0, r0, #1
 800058a:	4770      	bx	lr
 800058c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000590:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000594:	327f      	adds	r2, #127	; 0x7f
 8000596:	bfc2      	ittt	gt
 8000598:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800059c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80005a0:	4770      	bxgt	lr
 80005a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005a6:	f04f 0300 	mov.w	r3, #0
 80005aa:	3a01      	subs	r2, #1
 80005ac:	e737      	b.n	800041e <__aeabi_fmul+0x92>
 80005ae:	f092 0f00 	teq	r2, #0
 80005b2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005b6:	bf02      	ittt	eq
 80005b8:	0040      	lsleq	r0, r0, #1
 80005ba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005be:	3a01      	subeq	r2, #1
 80005c0:	d0f9      	beq.n	80005b6 <__aeabi_fdiv+0xc2>
 80005c2:	ea40 000c 	orr.w	r0, r0, ip
 80005c6:	f093 0f00 	teq	r3, #0
 80005ca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ce:	bf02      	ittt	eq
 80005d0:	0049      	lsleq	r1, r1, #1
 80005d2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005d6:	3b01      	subeq	r3, #1
 80005d8:	d0f9      	beq.n	80005ce <__aeabi_fdiv+0xda>
 80005da:	ea41 010c 	orr.w	r1, r1, ip
 80005de:	e795      	b.n	800050c <__aeabi_fdiv+0x18>
 80005e0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005e4:	ea92 0f0c 	teq	r2, ip
 80005e8:	d108      	bne.n	80005fc <__aeabi_fdiv+0x108>
 80005ea:	0242      	lsls	r2, r0, #9
 80005ec:	f47f af7d 	bne.w	80004ea <__aeabi_fmul+0x15e>
 80005f0:	ea93 0f0c 	teq	r3, ip
 80005f4:	f47f af70 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 80005f8:	4608      	mov	r0, r1
 80005fa:	e776      	b.n	80004ea <__aeabi_fmul+0x15e>
 80005fc:	ea93 0f0c 	teq	r3, ip
 8000600:	d104      	bne.n	800060c <__aeabi_fdiv+0x118>
 8000602:	024b      	lsls	r3, r1, #9
 8000604:	f43f af4c 	beq.w	80004a0 <__aeabi_fmul+0x114>
 8000608:	4608      	mov	r0, r1
 800060a:	e76e      	b.n	80004ea <__aeabi_fmul+0x15e>
 800060c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000610:	bf18      	it	ne
 8000612:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000616:	d1ca      	bne.n	80005ae <__aeabi_fdiv+0xba>
 8000618:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800061c:	f47f af5c 	bne.w	80004d8 <__aeabi_fmul+0x14c>
 8000620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000624:	f47f af3c 	bne.w	80004a0 <__aeabi_fmul+0x114>
 8000628:	e75f      	b.n	80004ea <__aeabi_fmul+0x15e>
 800062a:	bf00      	nop

0800062c <__gesf2>:
 800062c:	f04f 3cff 	mov.w	ip, #4294967295
 8000630:	e006      	b.n	8000640 <__cmpsf2+0x4>
 8000632:	bf00      	nop

08000634 <__lesf2>:
 8000634:	f04f 0c01 	mov.w	ip, #1
 8000638:	e002      	b.n	8000640 <__cmpsf2+0x4>
 800063a:	bf00      	nop

0800063c <__cmpsf2>:
 800063c:	f04f 0c01 	mov.w	ip, #1
 8000640:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000644:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000648:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800064c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000650:	bf18      	it	ne
 8000652:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000656:	d011      	beq.n	800067c <__cmpsf2+0x40>
 8000658:	b001      	add	sp, #4
 800065a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800065e:	bf18      	it	ne
 8000660:	ea90 0f01 	teqne	r0, r1
 8000664:	bf58      	it	pl
 8000666:	ebb2 0003 	subspl.w	r0, r2, r3
 800066a:	bf88      	it	hi
 800066c:	17c8      	asrhi	r0, r1, #31
 800066e:	bf38      	it	cc
 8000670:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000674:	bf18      	it	ne
 8000676:	f040 0001 	orrne.w	r0, r0, #1
 800067a:	4770      	bx	lr
 800067c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000680:	d102      	bne.n	8000688 <__cmpsf2+0x4c>
 8000682:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000686:	d105      	bne.n	8000694 <__cmpsf2+0x58>
 8000688:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800068c:	d1e4      	bne.n	8000658 <__cmpsf2+0x1c>
 800068e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000692:	d0e1      	beq.n	8000658 <__cmpsf2+0x1c>
 8000694:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <__aeabi_cfrcmple>:
 800069c:	4684      	mov	ip, r0
 800069e:	4608      	mov	r0, r1
 80006a0:	4661      	mov	r1, ip
 80006a2:	e7ff      	b.n	80006a4 <__aeabi_cfcmpeq>

080006a4 <__aeabi_cfcmpeq>:
 80006a4:	b50f      	push	{r0, r1, r2, r3, lr}
 80006a6:	f7ff ffc9 	bl	800063c <__cmpsf2>
 80006aa:	2800      	cmp	r0, #0
 80006ac:	bf48      	it	mi
 80006ae:	f110 0f00 	cmnmi.w	r0, #0
 80006b2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080006b4 <__aeabi_fcmpeq>:
 80006b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006b8:	f7ff fff4 	bl	80006a4 <__aeabi_cfcmpeq>
 80006bc:	bf0c      	ite	eq
 80006be:	2001      	moveq	r0, #1
 80006c0:	2000      	movne	r0, #0
 80006c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006c6:	bf00      	nop

080006c8 <__aeabi_fcmplt>:
 80006c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006cc:	f7ff ffea 	bl	80006a4 <__aeabi_cfcmpeq>
 80006d0:	bf34      	ite	cc
 80006d2:	2001      	movcc	r0, #1
 80006d4:	2000      	movcs	r0, #0
 80006d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006da:	bf00      	nop

080006dc <__aeabi_fcmple>:
 80006dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e0:	f7ff ffe0 	bl	80006a4 <__aeabi_cfcmpeq>
 80006e4:	bf94      	ite	ls
 80006e6:	2001      	movls	r0, #1
 80006e8:	2000      	movhi	r0, #0
 80006ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ee:	bf00      	nop

080006f0 <__aeabi_fcmpge>:
 80006f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006f4:	f7ff ffd2 	bl	800069c <__aeabi_cfrcmple>
 80006f8:	bf94      	ite	ls
 80006fa:	2001      	movls	r0, #1
 80006fc:	2000      	movhi	r0, #0
 80006fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000702:	bf00      	nop

08000704 <__aeabi_fcmpgt>:
 8000704:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000708:	f7ff ffc8 	bl	800069c <__aeabi_cfrcmple>
 800070c:	bf34      	ite	cc
 800070e:	2001      	movcc	r0, #1
 8000710:	2000      	movcs	r0, #0
 8000712:	f85d fb08 	ldr.w	pc, [sp], #8
 8000716:	bf00      	nop

08000718 <__aeabi_f2iz>:
 8000718:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800071c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000720:	d30f      	bcc.n	8000742 <__aeabi_f2iz+0x2a>
 8000722:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000726:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800072a:	d90d      	bls.n	8000748 <__aeabi_f2iz+0x30>
 800072c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000738:	fa23 f002 	lsr.w	r0, r3, r2
 800073c:	bf18      	it	ne
 800073e:	4240      	negne	r0, r0
 8000740:	4770      	bx	lr
 8000742:	f04f 0000 	mov.w	r0, #0
 8000746:	4770      	bx	lr
 8000748:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800074c:	d101      	bne.n	8000752 <__aeabi_f2iz+0x3a>
 800074e:	0242      	lsls	r2, r0, #9
 8000750:	d105      	bne.n	800075e <__aeabi_f2iz+0x46>
 8000752:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000756:	bf08      	it	eq
 8000758:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800075c:	4770      	bx	lr
 800075e:	f04f 0000 	mov.w	r0, #0
 8000762:	4770      	bx	lr

08000764 <__aeabi_f2uiz>:
 8000764:	0042      	lsls	r2, r0, #1
 8000766:	d20e      	bcs.n	8000786 <__aeabi_f2uiz+0x22>
 8000768:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800076c:	d30b      	bcc.n	8000786 <__aeabi_f2uiz+0x22>
 800076e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000772:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000776:	d409      	bmi.n	800078c <__aeabi_f2uiz+0x28>
 8000778:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800077c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000780:	fa23 f002 	lsr.w	r0, r3, r2
 8000784:	4770      	bx	lr
 8000786:	f04f 0000 	mov.w	r0, #0
 800078a:	4770      	bx	lr
 800078c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000790:	d101      	bne.n	8000796 <__aeabi_f2uiz+0x32>
 8000792:	0242      	lsls	r2, r0, #9
 8000794:	d102      	bne.n	800079c <__aeabi_f2uiz+0x38>
 8000796:	f04f 30ff 	mov.w	r0, #4294967295
 800079a:	4770      	bx	lr
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop

080007a4 <selfrel_offset31>:
 80007a4:	6803      	ldr	r3, [r0, #0]
 80007a6:	005a      	lsls	r2, r3, #1
 80007a8:	bf4c      	ite	mi
 80007aa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80007ae:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	4418      	add	r0, r3
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <search_EIT_table>:
 80007b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007bc:	b339      	cbz	r1, 800080e <search_EIT_table+0x56>
 80007be:	1e4f      	subs	r7, r1, #1
 80007c0:	4604      	mov	r4, r0
 80007c2:	4615      	mov	r5, r2
 80007c4:	463e      	mov	r6, r7
 80007c6:	f04f 0800 	mov.w	r8, #0
 80007ca:	eb08 0106 	add.w	r1, r8, r6
 80007ce:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 80007d2:	1049      	asrs	r1, r1, #1
 80007d4:	eb04 09c1 	add.w	r9, r4, r1, lsl #3
 80007d8:	4648      	mov	r0, r9
 80007da:	f7ff ffe3 	bl	80007a4 <selfrel_offset31>
 80007de:	4603      	mov	r3, r0
 80007e0:	00c8      	lsls	r0, r1, #3
 80007e2:	3008      	adds	r0, #8
 80007e4:	428f      	cmp	r7, r1
 80007e6:	4420      	add	r0, r4
 80007e8:	d00b      	beq.n	8000802 <search_EIT_table+0x4a>
 80007ea:	42ab      	cmp	r3, r5
 80007ec:	d80b      	bhi.n	8000806 <search_EIT_table+0x4e>
 80007ee:	f7ff ffd9 	bl	80007a4 <selfrel_offset31>
 80007f2:	3801      	subs	r0, #1
 80007f4:	42a8      	cmp	r0, r5
 80007f6:	f101 0801 	add.w	r8, r1, #1
 80007fa:	d3e6      	bcc.n	80007ca <search_EIT_table+0x12>
 80007fc:	4648      	mov	r0, r9
 80007fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000802:	42ab      	cmp	r3, r5
 8000804:	d9fa      	bls.n	80007fc <search_EIT_table+0x44>
 8000806:	4588      	cmp	r8, r1
 8000808:	d001      	beq.n	800080e <search_EIT_table+0x56>
 800080a:	1e4e      	subs	r6, r1, #1
 800080c:	e7dd      	b.n	80007ca <search_EIT_table+0x12>
 800080e:	f04f 0900 	mov.w	r9, #0
 8000812:	4648      	mov	r0, r9
 8000814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000818 <__gnu_unwind_get_pr_addr>:
 8000818:	2801      	cmp	r0, #1
 800081a:	d007      	beq.n	800082c <__gnu_unwind_get_pr_addr+0x14>
 800081c:	2802      	cmp	r0, #2
 800081e:	d007      	beq.n	8000830 <__gnu_unwind_get_pr_addr+0x18>
 8000820:	4b04      	ldr	r3, [pc, #16]	; (8000834 <__gnu_unwind_get_pr_addr+0x1c>)
 8000822:	2800      	cmp	r0, #0
 8000824:	bf0c      	ite	eq
 8000826:	4618      	moveq	r0, r3
 8000828:	2000      	movne	r0, #0
 800082a:	4770      	bx	lr
 800082c:	4802      	ldr	r0, [pc, #8]	; (8000838 <__gnu_unwind_get_pr_addr+0x20>)
 800082e:	4770      	bx	lr
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <__gnu_unwind_get_pr_addr+0x24>)
 8000832:	4770      	bx	lr
 8000834:	08000f09 	.word	0x08000f09
 8000838:	08000f0d 	.word	0x08000f0d
 800083c:	08000f11 	.word	0x08000f11

08000840 <get_eit_entry>:
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <get_eit_entry+0x94>)
 8000844:	4604      	mov	r4, r0
 8000846:	b083      	sub	sp, #12
 8000848:	1e8d      	subs	r5, r1, #2
 800084a:	b33b      	cbz	r3, 800089c <get_eit_entry+0x5c>
 800084c:	4628      	mov	r0, r5
 800084e:	a901      	add	r1, sp, #4
 8000850:	f3af 8000 	nop.w
 8000854:	b1e8      	cbz	r0, 8000892 <get_eit_entry+0x52>
 8000856:	9901      	ldr	r1, [sp, #4]
 8000858:	462a      	mov	r2, r5
 800085a:	f7ff ffad 	bl	80007b8 <search_EIT_table>
 800085e:	4601      	mov	r1, r0
 8000860:	b1b8      	cbz	r0, 8000892 <get_eit_entry+0x52>
 8000862:	f7ff ff9f 	bl	80007a4 <selfrel_offset31>
 8000866:	684b      	ldr	r3, [r1, #4]
 8000868:	64a0      	str	r0, [r4, #72]	; 0x48
 800086a:	2b01      	cmp	r3, #1
 800086c:	d02e      	beq.n	80008cc <get_eit_entry+0x8c>
 800086e:	2b00      	cmp	r3, #0
 8000870:	db27      	blt.n	80008c2 <get_eit_entry+0x82>
 8000872:	1d08      	adds	r0, r1, #4
 8000874:	f7ff ff96 	bl	80007a4 <selfrel_offset31>
 8000878:	2300      	movs	r3, #0
 800087a:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 800087e:	6803      	ldr	r3, [r0, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	db12      	blt.n	80008aa <get_eit_entry+0x6a>
 8000884:	f7ff ff8e 	bl	80007a4 <selfrel_offset31>
 8000888:	4603      	mov	r3, r0
 800088a:	2000      	movs	r0, #0
 800088c:	6123      	str	r3, [r4, #16]
 800088e:	b003      	add	sp, #12
 8000890:	bd30      	pop	{r4, r5, pc}
 8000892:	2300      	movs	r3, #0
 8000894:	2009      	movs	r0, #9
 8000896:	6123      	str	r3, [r4, #16]
 8000898:	b003      	add	sp, #12
 800089a:	bd30      	pop	{r4, r5, pc}
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <get_eit_entry+0x98>)
 800089e:	490f      	ldr	r1, [pc, #60]	; (80008dc <get_eit_entry+0x9c>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	1ac9      	subs	r1, r1, r3
 80008a4:	10c9      	asrs	r1, r1, #3
 80008a6:	9101      	str	r1, [sp, #4]
 80008a8:	e7d6      	b.n	8000858 <get_eit_entry+0x18>
 80008aa:	f3c3 6003 	ubfx	r0, r3, #24, #4
 80008ae:	f7ff ffb3 	bl	8000818 <__gnu_unwind_get_pr_addr>
 80008b2:	2800      	cmp	r0, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	bf14      	ite	ne
 80008b8:	2000      	movne	r0, #0
 80008ba:	2009      	moveq	r0, #9
 80008bc:	6123      	str	r3, [r4, #16]
 80008be:	b003      	add	sp, #12
 80008c0:	bd30      	pop	{r4, r5, pc}
 80008c2:	2301      	movs	r3, #1
 80008c4:	1d08      	adds	r0, r1, #4
 80008c6:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
 80008ca:	e7d8      	b.n	800087e <get_eit_entry+0x3e>
 80008cc:	2300      	movs	r3, #0
 80008ce:	2005      	movs	r0, #5
 80008d0:	6123      	str	r3, [r4, #16]
 80008d2:	e7dc      	b.n	800088e <get_eit_entry+0x4e>
 80008d4:	00000000 	.word	0x00000000
 80008d8:	08007298 	.word	0x08007298
 80008dc:	080074b8 	.word	0x080074b8

080008e0 <restore_non_core_regs>:
 80008e0:	6803      	ldr	r3, [r0, #0]
 80008e2:	b510      	push	{r4, lr}
 80008e4:	07da      	lsls	r2, r3, #31
 80008e6:	4604      	mov	r4, r0
 80008e8:	d406      	bmi.n	80008f8 <restore_non_core_regs+0x18>
 80008ea:	079b      	lsls	r3, r3, #30
 80008ec:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80008f0:	d509      	bpl.n	8000906 <restore_non_core_regs+0x26>
 80008f2:	f000 fc5d 	bl	80011b0 <__gnu_Unwind_Restore_VFP_D>
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	0759      	lsls	r1, r3, #29
 80008fa:	d509      	bpl.n	8000910 <restore_non_core_regs+0x30>
 80008fc:	071a      	lsls	r2, r3, #28
 80008fe:	d50e      	bpl.n	800091e <restore_non_core_regs+0x3e>
 8000900:	06db      	lsls	r3, r3, #27
 8000902:	d513      	bpl.n	800092c <restore_non_core_regs+0x4c>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	f000 fc4b 	bl	80011a0 <__gnu_Unwind_Restore_VFP>
 800090a:	6823      	ldr	r3, [r4, #0]
 800090c:	0759      	lsls	r1, r3, #29
 800090e:	d4f5      	bmi.n	80008fc <restore_non_core_regs+0x1c>
 8000910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000914:	f000 fc54 	bl	80011c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000918:	6823      	ldr	r3, [r4, #0]
 800091a:	071a      	lsls	r2, r3, #28
 800091c:	d4f0      	bmi.n	8000900 <restore_non_core_regs+0x20>
 800091e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000922:	f000 fc55 	bl	80011d0 <__gnu_Unwind_Restore_WMMXD>
 8000926:	6823      	ldr	r3, [r4, #0]
 8000928:	06db      	lsls	r3, r3, #27
 800092a:	d4eb      	bmi.n	8000904 <restore_non_core_regs+0x24>
 800092c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000934:	f000 bc90 	b.w	8001258 <__gnu_Unwind_Restore_WMMXC>

08000938 <__gnu_unwind_24bit.constprop.0>:
 8000938:	2009      	movs	r0, #9
 800093a:	4770      	bx	lr

0800093c <_Unwind_decode_typeinfo_ptr.constprop.0>:
 800093c:	4603      	mov	r3, r0
 800093e:	6800      	ldr	r0, [r0, #0]
 8000940:	b100      	cbz	r0, 8000944 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 8000942:	4418      	add	r0, r3
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <_Unwind_DebugHook>:
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <unwind_phase2>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4604      	mov	r4, r0
 8000950:	460e      	mov	r6, r1
 8000952:	4620      	mov	r0, r4
 8000954:	6c31      	ldr	r1, [r6, #64]	; 0x40
 8000956:	f7ff ff73 	bl	8000840 <get_eit_entry>
 800095a:	4605      	mov	r5, r0
 800095c:	b998      	cbnz	r0, 8000986 <unwind_phase2+0x3a>
 800095e:	f8d6 c040 	ldr.w	ip, [r6, #64]	; 0x40
 8000962:	4632      	mov	r2, r6
 8000964:	4621      	mov	r1, r4
 8000966:	2001      	movs	r0, #1
 8000968:	6923      	ldr	r3, [r4, #16]
 800096a:	f8c4 c014 	str.w	ip, [r4, #20]
 800096e:	4798      	blx	r3
 8000970:	2808      	cmp	r0, #8
 8000972:	d0ee      	beq.n	8000952 <unwind_phase2+0x6>
 8000974:	2807      	cmp	r0, #7
 8000976:	d106      	bne.n	8000986 <unwind_phase2+0x3a>
 8000978:	4628      	mov	r0, r5
 800097a:	6c31      	ldr	r1, [r6, #64]	; 0x40
 800097c:	f7ff ffe4 	bl	8000948 <_Unwind_DebugHook>
 8000980:	1d30      	adds	r0, r6, #4
 8000982:	f000 fc01 	bl	8001188 <__restore_core_regs>
 8000986:	f005 fe9d 	bl	80066c4 <abort>
 800098a:	bf00      	nop

0800098c <unwind_phase2_forced>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	f04f 0a00 	mov.w	sl, #0
 8000994:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000998:	f10d 0e0c 	add.w	lr, sp, #12
 800099c:	f101 0c04 	add.w	ip, r1, #4
 80009a0:	68c7      	ldr	r7, [r0, #12]
 80009a2:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80009a6:	4606      	mov	r6, r0
 80009a8:	4614      	mov	r4, r2
 80009aa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009ae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009b2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009b6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80009be:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80009c2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80009c6:	ad02      	add	r5, sp, #8
 80009c8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80009cc:	f8c5 a000 	str.w	sl, [r5]
 80009d0:	e021      	b.n	8000a16 <unwind_phase2_forced+0x8a>
 80009d2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80009d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80009d8:	4629      	mov	r1, r5
 80009da:	6173      	str	r3, [r6, #20]
 80009dc:	a87a      	add	r0, sp, #488	; 0x1e8
 80009de:	f005 feb3 	bl	8006748 <memcpy>
 80009e2:	4631      	mov	r1, r6
 80009e4:	4650      	mov	r0, sl
 80009e6:	6933      	ldr	r3, [r6, #16]
 80009e8:	aa7a      	add	r2, sp, #488	; 0x1e8
 80009ea:	4798      	blx	r3
 80009ec:	9c88      	ldr	r4, [sp, #544]	; 0x220
 80009ee:	4682      	mov	sl, r0
 80009f0:	646c      	str	r4, [r5, #68]	; 0x44
 80009f2:	4633      	mov	r3, r6
 80009f4:	4632      	mov	r2, r6
 80009f6:	4649      	mov	r1, r9
 80009f8:	2001      	movs	r0, #1
 80009fa:	e9cd 5800 	strd	r5, r8, [sp]
 80009fe:	47b8      	blx	r7
 8000a00:	4604      	mov	r4, r0
 8000a02:	b9f0      	cbnz	r0, 8000a42 <unwind_phase2_forced+0xb6>
 8000a04:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000a08:	4628      	mov	r0, r5
 8000a0a:	a97a      	add	r1, sp, #488	; 0x1e8
 8000a0c:	f005 fe9c 	bl	8006748 <memcpy>
 8000a10:	f1ba 0f08 	cmp.w	sl, #8
 8000a14:	d11b      	bne.n	8000a4e <unwind_phase2_forced+0xc2>
 8000a16:	4630      	mov	r0, r6
 8000a18:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a1a:	f7ff ff11 	bl	8000840 <get_eit_entry>
 8000a1e:	f104 0909 	add.w	r9, r4, #9
 8000a22:	fa5f fa89 	uxtb.w	sl, r9
 8000a26:	4604      	mov	r4, r0
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d0d2      	beq.n	80009d2 <unwind_phase2_forced+0x46>
 8000a2c:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8000a2e:	4633      	mov	r3, r6
 8000a30:	6469      	str	r1, [r5, #68]	; 0x44
 8000a32:	4632      	mov	r2, r6
 8000a34:	2001      	movs	r0, #1
 8000a36:	e9cd 5800 	strd	r5, r8, [sp]
 8000a3a:	f04a 0110 	orr.w	r1, sl, #16
 8000a3e:	47b8      	blx	r7
 8000a40:	b100      	cbz	r0, 8000a44 <unwind_phase2_forced+0xb8>
 8000a42:	2409      	movs	r4, #9
 8000a44:	4620      	mov	r0, r4
 8000a46:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a4e:	f1ba 0f07 	cmp.w	sl, #7
 8000a52:	d1f6      	bne.n	8000a42 <unwind_phase2_forced+0xb6>
 8000a54:	4620      	mov	r0, r4
 8000a56:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000a58:	f7ff ff76 	bl	8000948 <_Unwind_DebugHook>
 8000a5c:	a803      	add	r0, sp, #12
 8000a5e:	f000 fb93 	bl	8001188 <__restore_core_regs>
 8000a62:	bf00      	nop

08000a64 <_Unwind_GetCFA>:
 8000a64:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000a66:	4770      	bx	lr

08000a68 <__gnu_Unwind_RaiseException>:
 8000a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a6a:	f04f 37ff 	mov.w	r7, #4294967295
 8000a6e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000a70:	b0f9      	sub	sp, #484	; 0x1e4
 8000a72:	640b      	str	r3, [r1, #64]	; 0x40
 8000a74:	ac01      	add	r4, sp, #4
 8000a76:	f101 0c04 	add.w	ip, r1, #4
 8000a7a:	460e      	mov	r6, r1
 8000a7c:	4605      	mov	r5, r0
 8000a7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a84:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a90:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a98:	9700      	str	r7, [sp, #0]
 8000a9a:	e006      	b.n	8000aaa <__gnu_Unwind_RaiseException+0x42>
 8000a9c:	466a      	mov	r2, sp
 8000a9e:	4629      	mov	r1, r5
 8000aa0:	692b      	ldr	r3, [r5, #16]
 8000aa2:	4798      	blx	r3
 8000aa4:	2808      	cmp	r0, #8
 8000aa6:	4604      	mov	r4, r0
 8000aa8:	d108      	bne.n	8000abc <__gnu_Unwind_RaiseException+0x54>
 8000aaa:	4628      	mov	r0, r5
 8000aac:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000aae:	f7ff fec7 	bl	8000840 <get_eit_entry>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d0f2      	beq.n	8000a9c <__gnu_Unwind_RaiseException+0x34>
 8000ab6:	2009      	movs	r0, #9
 8000ab8:	b079      	add	sp, #484	; 0x1e4
 8000aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000abc:	4668      	mov	r0, sp
 8000abe:	f7ff ff0f 	bl	80008e0 <restore_non_core_regs>
 8000ac2:	2c06      	cmp	r4, #6
 8000ac4:	d1f7      	bne.n	8000ab6 <__gnu_Unwind_RaiseException+0x4e>
 8000ac6:	4631      	mov	r1, r6
 8000ac8:	4628      	mov	r0, r5
 8000aca:	f7ff ff3f 	bl	800094c <unwind_phase2>
 8000ace:	bf00      	nop

08000ad0 <__gnu_Unwind_ForcedUnwind>:
 8000ad0:	b410      	push	{r4}
 8000ad2:	4614      	mov	r4, r2
 8000ad4:	6184      	str	r4, [r0, #24]
 8000ad6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8000ad8:	60c1      	str	r1, [r0, #12]
 8000ada:	2200      	movs	r2, #0
 8000adc:	641c      	str	r4, [r3, #64]	; 0x40
 8000ade:	4619      	mov	r1, r3
 8000ae0:	bc10      	pop	{r4}
 8000ae2:	e753      	b.n	800098c <unwind_phase2_forced>

08000ae4 <__gnu_Unwind_Resume>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	6943      	ldr	r3, [r0, #20]
 8000ae8:	68c6      	ldr	r6, [r0, #12]
 8000aea:	640b      	str	r3, [r1, #64]	; 0x40
 8000aec:	b9ae      	cbnz	r6, 8000b1a <__gnu_Unwind_Resume+0x36>
 8000aee:	460a      	mov	r2, r1
 8000af0:	6903      	ldr	r3, [r0, #16]
 8000af2:	4604      	mov	r4, r0
 8000af4:	460d      	mov	r5, r1
 8000af6:	4601      	mov	r1, r0
 8000af8:	2002      	movs	r0, #2
 8000afa:	4798      	blx	r3
 8000afc:	2807      	cmp	r0, #7
 8000afe:	d005      	beq.n	8000b0c <__gnu_Unwind_Resume+0x28>
 8000b00:	2808      	cmp	r0, #8
 8000b02:	d10f      	bne.n	8000b24 <__gnu_Unwind_Resume+0x40>
 8000b04:	4629      	mov	r1, r5
 8000b06:	4620      	mov	r0, r4
 8000b08:	f7ff ff20 	bl	800094c <unwind_phase2>
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000b10:	f7ff ff1a 	bl	8000948 <_Unwind_DebugHook>
 8000b14:	1d28      	adds	r0, r5, #4
 8000b16:	f000 fb37 	bl	8001188 <__restore_core_regs>
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	f7ff ff36 	bl	800098c <unwind_phase2_forced>
 8000b20:	f005 fdd0 	bl	80066c4 <abort>
 8000b24:	f005 fdce 	bl	80066c4 <abort>

08000b28 <__gnu_Unwind_Resume_or_Rethrow>:
 8000b28:	68c2      	ldr	r2, [r0, #12]
 8000b2a:	b12a      	cbz	r2, 8000b38 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000b2c:	f8d1 c03c 	ldr.w	ip, [r1, #60]	; 0x3c
 8000b30:	2200      	movs	r2, #0
 8000b32:	f8c1 c040 	str.w	ip, [r1, #64]	; 0x40
 8000b36:	e729      	b.n	800098c <unwind_phase2_forced>
 8000b38:	e796      	b.n	8000a68 <__gnu_Unwind_RaiseException>
 8000b3a:	bf00      	nop

08000b3c <_Unwind_Complete>:
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <_Unwind_DeleteException>:
 8000b40:	6883      	ldr	r3, [r0, #8]
 8000b42:	4601      	mov	r1, r0
 8000b44:	b10b      	cbz	r3, 8000b4a <_Unwind_DeleteException+0xa>
 8000b46:	2001      	movs	r0, #1
 8000b48:	4718      	bx	r3
 8000b4a:	4770      	bx	lr

08000b4c <_Unwind_VRS_Get>:
 8000b4c:	2901      	cmp	r1, #1
 8000b4e:	d012      	beq.n	8000b76 <_Unwind_VRS_Get+0x2a>
 8000b50:	d809      	bhi.n	8000b66 <_Unwind_VRS_Get+0x1a>
 8000b52:	b973      	cbnz	r3, 8000b72 <_Unwind_VRS_Get+0x26>
 8000b54:	2a0f      	cmp	r2, #15
 8000b56:	d80c      	bhi.n	8000b72 <_Unwind_VRS_Get+0x26>
 8000b58:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8000b5c:	6842      	ldr	r2, [r0, #4]
 8000b5e:	4618      	mov	r0, r3
 8000b60:	9b00      	ldr	r3, [sp, #0]
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	4770      	bx	lr
 8000b66:	3903      	subs	r1, #3
 8000b68:	2901      	cmp	r1, #1
 8000b6a:	bf94      	ite	ls
 8000b6c:	2001      	movls	r0, #1
 8000b6e:	2002      	movhi	r0, #2
 8000b70:	4770      	bx	lr
 8000b72:	2002      	movs	r0, #2
 8000b74:	4770      	bx	lr
 8000b76:	4608      	mov	r0, r1
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <_Unwind_GetGR>:
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	b500      	push	{lr}
 8000b80:	b085      	sub	sp, #20
 8000b82:	460a      	mov	r2, r1
 8000b84:	a903      	add	r1, sp, #12
 8000b86:	9100      	str	r1, [sp, #0]
 8000b88:	4619      	mov	r1, r3
 8000b8a:	f7ff ffdf 	bl	8000b4c <_Unwind_VRS_Get>
 8000b8e:	9803      	ldr	r0, [sp, #12]
 8000b90:	b005      	add	sp, #20
 8000b92:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b96:	bf00      	nop

08000b98 <_Unwind_VRS_Set>:
 8000b98:	2901      	cmp	r1, #1
 8000b9a:	d012      	beq.n	8000bc2 <_Unwind_VRS_Set+0x2a>
 8000b9c:	d809      	bhi.n	8000bb2 <_Unwind_VRS_Set+0x1a>
 8000b9e:	b973      	cbnz	r3, 8000bbe <_Unwind_VRS_Set+0x26>
 8000ba0:	2a0f      	cmp	r2, #15
 8000ba2:	d80c      	bhi.n	8000bbe <_Unwind_VRS_Set+0x26>
 8000ba4:	9900      	ldr	r1, [sp, #0]
 8000ba6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000baa:	6809      	ldr	r1, [r1, #0]
 8000bac:	4618      	mov	r0, r3
 8000bae:	6051      	str	r1, [r2, #4]
 8000bb0:	4770      	bx	lr
 8000bb2:	3903      	subs	r1, #3
 8000bb4:	2901      	cmp	r1, #1
 8000bb6:	bf94      	ite	ls
 8000bb8:	2001      	movls	r0, #1
 8000bba:	2002      	movhi	r0, #2
 8000bbc:	4770      	bx	lr
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	4770      	bx	lr
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <_Unwind_SetGR>:
 8000bc8:	2300      	movs	r3, #0
 8000bca:	b510      	push	{r4, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	ac03      	add	r4, sp, #12
 8000bd0:	9203      	str	r2, [sp, #12]
 8000bd2:	9400      	str	r4, [sp, #0]
 8000bd4:	460a      	mov	r2, r1
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	f7ff ffde 	bl	8000b98 <_Unwind_VRS_Set>
 8000bdc:	b004      	add	sp, #16
 8000bde:	bd10      	pop	{r4, pc}

08000be0 <__gnu_Unwind_Backtrace>:
 8000be0:	b570      	push	{r4, r5, r6, lr}
 8000be2:	f04f 36ff 	mov.w	r6, #4294967295
 8000be6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 8000be8:	f5ad 7d0e 	sub.w	sp, sp, #568	; 0x238
 8000bec:	6413      	str	r3, [r2, #64]	; 0x40
 8000bee:	f10d 0e5c 	add.w	lr, sp, #92	; 0x5c
 8000bf2:	f102 0c04 	add.w	ip, r2, #4
 8000bf6:	4605      	mov	r5, r0
 8000bf8:	460c      	mov	r4, r1
 8000bfa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bfe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000c02:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c06:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000c0a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000c0e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000c12:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000c16:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000c1a:	9616      	str	r6, [sp, #88]	; 0x58
 8000c1c:	e012      	b.n	8000c44 <__gnu_Unwind_Backtrace+0x64>
 8000c1e:	210c      	movs	r1, #12
 8000c20:	a816      	add	r0, sp, #88	; 0x58
 8000c22:	466a      	mov	r2, sp
 8000c24:	f7ff ffd0 	bl	8000bc8 <_Unwind_SetGR>
 8000c28:	4621      	mov	r1, r4
 8000c2a:	a816      	add	r0, sp, #88	; 0x58
 8000c2c:	47a8      	blx	r5
 8000c2e:	b978      	cbnz	r0, 8000c50 <__gnu_Unwind_Backtrace+0x70>
 8000c30:	4669      	mov	r1, sp
 8000c32:	2008      	movs	r0, #8
 8000c34:	9b04      	ldr	r3, [sp, #16]
 8000c36:	aa16      	add	r2, sp, #88	; 0x58
 8000c38:	4798      	blx	r3
 8000c3a:	2805      	cmp	r0, #5
 8000c3c:	4606      	mov	r6, r0
 8000c3e:	d008      	beq.n	8000c52 <__gnu_Unwind_Backtrace+0x72>
 8000c40:	2809      	cmp	r0, #9
 8000c42:	d005      	beq.n	8000c50 <__gnu_Unwind_Backtrace+0x70>
 8000c44:	4668      	mov	r0, sp
 8000c46:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000c48:	f7ff fdfa 	bl	8000840 <get_eit_entry>
 8000c4c:	2800      	cmp	r0, #0
 8000c4e:	d0e6      	beq.n	8000c1e <__gnu_Unwind_Backtrace+0x3e>
 8000c50:	2609      	movs	r6, #9
 8000c52:	a816      	add	r0, sp, #88	; 0x58
 8000c54:	f7ff fe44 	bl	80008e0 <restore_non_core_regs>
 8000c58:	4630      	mov	r0, r6
 8000c5a:	f50d 7d0e 	add.w	sp, sp, #568	; 0x238
 8000c5e:	bd70      	pop	{r4, r5, r6, pc}

08000c60 <__gnu_unwind_pr_common>:
 8000c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c64:	461e      	mov	r6, r3
 8000c66:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8000c68:	b089      	sub	sp, #36	; 0x24
 8000c6a:	f854 3b04 	ldr.w	r3, [r4], #4
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4617      	mov	r7, r2
 8000c72:	f000 0803 	and.w	r8, r0, #3
 8000c76:	9406      	str	r4, [sp, #24]
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d079      	beq.n	8000d70 <__gnu_unwind_pr_common+0x110>
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	f88d 201c 	strb.w	r2, [sp, #28]
 8000c82:	0c1a      	lsrs	r2, r3, #16
 8000c84:	f88d 201d 	strb.w	r2, [sp, #29]
 8000c88:	041b      	lsls	r3, r3, #16
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	9305      	str	r3, [sp, #20]
 8000c8e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000c92:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000c94:	f1b8 0f02 	cmp.w	r8, #2
 8000c98:	bf08      	it	eq
 8000c9a:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000c9c:	f013 0301 	ands.w	r3, r3, #1
 8000ca0:	d00c      	beq.n	8000cbc <__gnu_unwind_pr_common+0x5c>
 8000ca2:	4638      	mov	r0, r7
 8000ca4:	a905      	add	r1, sp, #20
 8000ca6:	f000 fb71 	bl	800138c <__gnu_unwind_execute>
 8000caa:	b918      	cbnz	r0, 8000cb4 <__gnu_unwind_pr_common+0x54>
 8000cac:	2008      	movs	r0, #8
 8000cae:	b009      	add	sp, #36	; 0x24
 8000cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb4:	2009      	movs	r0, #9
 8000cb6:	b009      	add	sp, #36	; 0x24
 8000cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cbc:	f8d4 a000 	ldr.w	sl, [r4]
 8000cc0:	f1ba 0f00 	cmp.w	sl, #0
 8000cc4:	d0ed      	beq.n	8000ca2 <__gnu_unwind_pr_common+0x42>
 8000cc6:	9301      	str	r3, [sp, #4]
 8000cc8:	f000 0308 	and.w	r3, r0, #8
 8000ccc:	9302      	str	r3, [sp, #8]
 8000cce:	2e02      	cmp	r6, #2
 8000cd0:	d04a      	beq.n	8000d68 <__gnu_unwind_pr_common+0x108>
 8000cd2:	f8b4 a000 	ldrh.w	sl, [r4]
 8000cd6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
 8000cda:	3404      	adds	r4, #4
 8000cdc:	6caa      	ldr	r2, [r5, #72]	; 0x48
 8000cde:	210f      	movs	r1, #15
 8000ce0:	4638      	mov	r0, r7
 8000ce2:	f029 0b01 	bic.w	fp, r9, #1
 8000ce6:	4493      	add	fp, r2
 8000ce8:	f7ff ff48 	bl	8000b7c <_Unwind_GetGR>
 8000cec:	4583      	cmp	fp, r0
 8000cee:	d839      	bhi.n	8000d64 <__gnu_unwind_pr_common+0x104>
 8000cf0:	f02a 0201 	bic.w	r2, sl, #1
 8000cf4:	445a      	add	r2, fp
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	bf94      	ite	ls
 8000cfa:	2000      	movls	r0, #0
 8000cfc:	2001      	movhi	r0, #1
 8000cfe:	ea4f 0349 	mov.w	r3, r9, lsl #1
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	f00a 0a01 	and.w	sl, sl, #1
 8000d0a:	ea43 030a 	orr.w	r3, r3, sl
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d049      	beq.n	8000da6 <__gnu_unwind_pr_common+0x146>
 8000d12:	2b02      	cmp	r3, #2
 8000d14:	d032      	beq.n	8000d7c <__gnu_unwind_pr_common+0x11c>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1cc      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000d1a:	f1b8 0f00 	cmp.w	r8, #0
 8000d1e:	d002      	beq.n	8000d26 <__gnu_unwind_pr_common+0xc6>
 8000d20:	2800      	cmp	r0, #0
 8000d22:	f040 80ce 	bne.w	8000ec2 <__gnu_unwind_pr_common+0x262>
 8000d26:	3404      	adds	r4, #4
 8000d28:	f8d4 a000 	ldr.w	sl, [r4]
 8000d2c:	f1ba 0f00 	cmp.w	sl, #0
 8000d30:	d1cd      	bne.n	8000cce <__gnu_unwind_pr_common+0x6e>
 8000d32:	4638      	mov	r0, r7
 8000d34:	a905      	add	r1, sp, #20
 8000d36:	f000 fb29 	bl	800138c <__gnu_unwind_execute>
 8000d3a:	2800      	cmp	r0, #0
 8000d3c:	d1ba      	bne.n	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000d3e:	9b01      	ldr	r3, [sp, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0b3      	beq.n	8000cac <__gnu_unwind_pr_common+0x4c>
 8000d44:	210f      	movs	r1, #15
 8000d46:	4638      	mov	r0, r7
 8000d48:	f7ff ff18 	bl	8000b7c <_Unwind_GetGR>
 8000d4c:	210e      	movs	r1, #14
 8000d4e:	4602      	mov	r2, r0
 8000d50:	4638      	mov	r0, r7
 8000d52:	f7ff ff39 	bl	8000bc8 <_Unwind_SetGR>
 8000d56:	4638      	mov	r0, r7
 8000d58:	210f      	movs	r1, #15
 8000d5a:	4a6a      	ldr	r2, [pc, #424]	; (8000f04 <__gnu_unwind_pr_common+0x2a4>)
 8000d5c:	f7ff ff34 	bl	8000bc8 <_Unwind_SetGR>
 8000d60:	2007      	movs	r0, #7
 8000d62:	e7a8      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000d64:	2000      	movs	r0, #0
 8000d66:	e7ca      	b.n	8000cfe <__gnu_unwind_pr_common+0x9e>
 8000d68:	f8d4 9004 	ldr.w	r9, [r4, #4]
 8000d6c:	3408      	adds	r4, #8
 8000d6e:	e7b5      	b.n	8000cdc <__gnu_unwind_pr_common+0x7c>
 8000d70:	021b      	lsls	r3, r3, #8
 8000d72:	9305      	str	r3, [sp, #20]
 8000d74:	2303      	movs	r3, #3
 8000d76:	f8ad 301c 	strh.w	r3, [sp, #28]
 8000d7a:	e78a      	b.n	8000c92 <__gnu_unwind_pr_common+0x32>
 8000d7c:	6823      	ldr	r3, [r4, #0]
 8000d7e:	f023 4b00 	bic.w	fp, r3, #2147483648	; 0x80000000
 8000d82:	f1b8 0f00 	cmp.w	r8, #0
 8000d86:	d145      	bne.n	8000e14 <__gnu_unwind_pr_common+0x1b4>
 8000d88:	b128      	cbz	r0, 8000d96 <__gnu_unwind_pr_common+0x136>
 8000d8a:	9a02      	ldr	r2, [sp, #8]
 8000d8c:	2a00      	cmp	r2, #0
 8000d8e:	d05c      	beq.n	8000e4a <__gnu_unwind_pr_common+0x1ea>
 8000d90:	f1bb 0f00 	cmp.w	fp, #0
 8000d94:	d074      	beq.n	8000e80 <__gnu_unwind_pr_common+0x220>
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da00      	bge.n	8000d9c <__gnu_unwind_pr_common+0x13c>
 8000d9a:	3404      	adds	r4, #4
 8000d9c:	f10b 0b01 	add.w	fp, fp, #1
 8000da0:	eb04 048b 	add.w	r4, r4, fp, lsl #2
 8000da4:	e7c0      	b.n	8000d28 <__gnu_unwind_pr_common+0xc8>
 8000da6:	f1b8 0f00 	cmp.w	r8, #0
 8000daa:	d119      	bne.n	8000de0 <__gnu_unwind_pr_common+0x180>
 8000dac:	b1b0      	cbz	r0, 8000ddc <__gnu_unwind_pr_common+0x17c>
 8000dae:	6863      	ldr	r3, [r4, #4]
 8000db0:	6822      	ldr	r2, [r4, #0]
 8000db2:	1c99      	adds	r1, r3, #2
 8000db4:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000db8:	f43f af7c 	beq.w	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000dbc:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	9104      	str	r1, [sp, #16]
 8000dc4:	f000 8091 	beq.w	8000eea <__gnu_unwind_pr_common+0x28a>
 8000dc8:	1d20      	adds	r0, r4, #4
 8000dca:	f7ff fdb7 	bl	800093c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000dce:	ab04      	add	r3, sp, #16
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4628      	mov	r0, r5
 8000dd4:	f004 fc9a 	bl	800570c <__cxa_type_match>
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d15c      	bne.n	8000e96 <__gnu_unwind_pr_common+0x236>
 8000ddc:	3408      	adds	r4, #8
 8000dde:	e7a3      	b.n	8000d28 <__gnu_unwind_pr_common+0xc8>
 8000de0:	210d      	movs	r1, #13
 8000de2:	4638      	mov	r0, r7
 8000de4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000de8:	f7ff fec8 	bl	8000b7c <_Unwind_GetGR>
 8000dec:	4581      	cmp	r9, r0
 8000dee:	d1f5      	bne.n	8000ddc <__gnu_unwind_pr_common+0x17c>
 8000df0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000df2:	429c      	cmp	r4, r3
 8000df4:	d1f2      	bne.n	8000ddc <__gnu_unwind_pr_common+0x17c>
 8000df6:	4620      	mov	r0, r4
 8000df8:	f7ff fcd4 	bl	80007a4 <selfrel_offset31>
 8000dfc:	210f      	movs	r1, #15
 8000dfe:	4602      	mov	r2, r0
 8000e00:	4638      	mov	r0, r7
 8000e02:	f7ff fee1 	bl	8000bc8 <_Unwind_SetGR>
 8000e06:	4638      	mov	r0, r7
 8000e08:	462a      	mov	r2, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	f7ff fedc 	bl	8000bc8 <_Unwind_SetGR>
 8000e10:	2007      	movs	r0, #7
 8000e12:	e750      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000e14:	210d      	movs	r1, #13
 8000e16:	4638      	mov	r0, r7
 8000e18:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8000e1c:	f7ff feae 	bl	8000b7c <_Unwind_GetGR>
 8000e20:	4581      	cmp	r9, r0
 8000e22:	d001      	beq.n	8000e28 <__gnu_unwind_pr_common+0x1c8>
 8000e24:	6823      	ldr	r3, [r4, #0]
 8000e26:	e7b6      	b.n	8000d96 <__gnu_unwind_pr_common+0x136>
 8000e28:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000e2a:	429c      	cmp	r4, r3
 8000e2c:	d1fa      	bne.n	8000e24 <__gnu_unwind_pr_common+0x1c4>
 8000e2e:	2304      	movs	r3, #4
 8000e30:	2200      	movs	r2, #0
 8000e32:	e9c5 230b 	strd	r2, r3, [r5, #44]	; 0x2c
 8000e36:	18e3      	adds	r3, r4, r3
 8000e38:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
 8000e3c:	636b      	str	r3, [r5, #52]	; 0x34
 8000e3e:	6823      	ldr	r3, [r4, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	db5a      	blt.n	8000efa <__gnu_unwind_pr_common+0x29a>
 8000e44:	2301      	movs	r3, #1
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	e7a8      	b.n	8000d9c <__gnu_unwind_pr_common+0x13c>
 8000e4a:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000e4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e52:	4691      	mov	r9, r2
 8000e54:	46b0      	mov	r8, r6
 8000e56:	f104 0a04 	add.w	sl, r4, #4
 8000e5a:	461e      	mov	r6, r3
 8000e5c:	e00e      	b.n	8000e7c <__gnu_unwind_pr_common+0x21c>
 8000e5e:	4650      	mov	r0, sl
 8000e60:	9604      	str	r6, [sp, #16]
 8000e62:	f7ff fd6b 	bl	800093c <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000e66:	2200      	movs	r2, #0
 8000e68:	4601      	mov	r1, r0
 8000e6a:	ab04      	add	r3, sp, #16
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	f109 0901 	add.w	r9, r9, #1
 8000e72:	f10a 0a04 	add.w	sl, sl, #4
 8000e76:	f004 fc49 	bl	800570c <__cxa_type_match>
 8000e7a:	b9e8      	cbnz	r0, 8000eb8 <__gnu_unwind_pr_common+0x258>
 8000e7c:	45d9      	cmp	r9, fp
 8000e7e:	d1ee      	bne.n	8000e5e <__gnu_unwind_pr_common+0x1fe>
 8000e80:	210d      	movs	r1, #13
 8000e82:	4638      	mov	r0, r7
 8000e84:	f7ff fe7a 	bl	8000b7c <_Unwind_GetGR>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	9a04      	ldr	r2, [sp, #16]
 8000e8c:	2006      	movs	r0, #6
 8000e8e:	e9c5 2409 	strd	r2, r4, [r5, #36]	; 0x24
 8000e92:	622b      	str	r3, [r5, #32]
 8000e94:	e70f      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000e96:	4681      	mov	r9, r0
 8000e98:	210d      	movs	r1, #13
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff fe6e 	bl	8000b7c <_Unwind_GetGR>
 8000ea0:	f1b9 0f02 	cmp.w	r9, #2
 8000ea4:	6228      	str	r0, [r5, #32]
 8000ea6:	d125      	bne.n	8000ef4 <__gnu_unwind_pr_common+0x294>
 8000ea8:	462b      	mov	r3, r5
 8000eaa:	9a04      	ldr	r2, [sp, #16]
 8000eac:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000eb0:	626b      	str	r3, [r5, #36]	; 0x24
 8000eb2:	2006      	movs	r0, #6
 8000eb4:	62ac      	str	r4, [r5, #40]	; 0x28
 8000eb6:	e6fe      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	6823      	ldr	r3, [r4, #0]
 8000ebc:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000ec0:	e769      	b.n	8000d96 <__gnu_unwind_pr_common+0x136>
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f7ff fc6e 	bl	80007a4 <selfrel_offset31>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	3404      	adds	r4, #4
 8000ecc:	63ac      	str	r4, [r5, #56]	; 0x38
 8000ece:	4628      	mov	r0, r5
 8000ed0:	4614      	mov	r4, r2
 8000ed2:	f004 fc79 	bl	80057c8 <__cxa_begin_cleanup>
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	f43f aeec 	beq.w	8000cb4 <__gnu_unwind_pr_common+0x54>
 8000edc:	4638      	mov	r0, r7
 8000ede:	4622      	mov	r2, r4
 8000ee0:	210f      	movs	r1, #15
 8000ee2:	f7ff fe71 	bl	8000bc8 <_Unwind_SetGR>
 8000ee6:	2007      	movs	r0, #7
 8000ee8:	e6e5      	b.n	8000cb6 <__gnu_unwind_pr_common+0x56>
 8000eea:	210d      	movs	r1, #13
 8000eec:	4638      	mov	r0, r7
 8000eee:	f7ff fe45 	bl	8000b7c <_Unwind_GetGR>
 8000ef2:	6228      	str	r0, [r5, #32]
 8000ef4:	9b04      	ldr	r3, [sp, #16]
 8000ef6:	626b      	str	r3, [r5, #36]	; 0x24
 8000ef8:	e7db      	b.n	8000eb2 <__gnu_unwind_pr_common+0x252>
 8000efa:	f10b 0001 	add.w	r0, fp, #1
 8000efe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000f02:	e779      	b.n	8000df8 <__gnu_unwind_pr_common+0x198>
 8000f04:	08006601 	.word	0x08006601

08000f08 <__aeabi_unwind_cpp_pr0>:
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e6a9      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f0c <__aeabi_unwind_cpp_pr1>:
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	e6a7      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f10 <__aeabi_unwind_cpp_pr2>:
 8000f10:	2302      	movs	r3, #2
 8000f12:	e6a5      	b.n	8000c60 <__gnu_unwind_pr_common>

08000f14 <_Unwind_VRS_Pop>:
 8000f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f18:	4606      	mov	r6, r0
 8000f1a:	4615      	mov	r5, r2
 8000f1c:	461c      	mov	r4, r3
 8000f1e:	b0c3      	sub	sp, #268	; 0x10c
 8000f20:	2904      	cmp	r1, #4
 8000f22:	f200 80b8 	bhi.w	8001096 <_Unwind_VRS_Pop+0x182>
 8000f26:	e8df f001 	tbb	[pc, r1]
 8000f2a:	569c      	.short	0x569c
 8000f2c:	2db6      	.short	0x2db6
 8000f2e:	03          	.byte	0x03
 8000f2f:	00          	.byte	0x00
 8000f30:	2c00      	cmp	r4, #0
 8000f32:	f040 80b0 	bne.w	8001096 <_Unwind_VRS_Pop+0x182>
 8000f36:	2a10      	cmp	r2, #16
 8000f38:	f200 80ad 	bhi.w	8001096 <_Unwind_VRS_Pop+0x182>
 8000f3c:	6803      	ldr	r3, [r0, #0]
 8000f3e:	06d8      	lsls	r0, r3, #27
 8000f40:	f100 80f1 	bmi.w	8001126 <_Unwind_VRS_Pop+0x212>
 8000f44:	af20      	add	r7, sp, #128	; 0x80
 8000f46:	4638      	mov	r0, r7
 8000f48:	f000 f990 	bl	800126c <__gnu_Unwind_Save_WMMXC>
 8000f4c:	2401      	movs	r4, #1
 8000f4e:	4638      	mov	r0, r7
 8000f50:	2300      	movs	r3, #0
 8000f52:	6bb1      	ldr	r1, [r6, #56]	; 0x38
 8000f54:	fa04 f203 	lsl.w	r2, r4, r3
 8000f58:	422a      	tst	r2, r5
 8000f5a:	f103 0301 	add.w	r3, r3, #1
 8000f5e:	d005      	beq.n	8000f6c <_Unwind_VRS_Pop+0x58>
 8000f60:	460a      	mov	r2, r1
 8000f62:	f852 cb04 	ldr.w	ip, [r2], #4
 8000f66:	4611      	mov	r1, r2
 8000f68:	f8c0 c000 	str.w	ip, [r0]
 8000f6c:	2b04      	cmp	r3, #4
 8000f6e:	f100 0004 	add.w	r0, r0, #4
 8000f72:	d1ef      	bne.n	8000f54 <_Unwind_VRS_Pop+0x40>
 8000f74:	4638      	mov	r0, r7
 8000f76:	63b1      	str	r1, [r6, #56]	; 0x38
 8000f78:	f000 f96e 	bl	8001258 <__gnu_Unwind_Restore_WMMXC>
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	b043      	add	sp, #268	; 0x10c
 8000f80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f84:	2c03      	cmp	r4, #3
 8000f86:	f040 8086 	bne.w	8001096 <_Unwind_VRS_Pop+0x182>
 8000f8a:	b294      	uxth	r4, r2
 8000f8c:	eb04 4312 	add.w	r3, r4, r2, lsr #16
 8000f90:	2b10      	cmp	r3, #16
 8000f92:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8000f96:	d87e      	bhi.n	8001096 <_Unwind_VRS_Pop+0x182>
 8000f98:	6803      	ldr	r3, [r0, #0]
 8000f9a:	071f      	lsls	r7, r3, #28
 8000f9c:	f100 80cb 	bmi.w	8001136 <_Unwind_VRS_Pop+0x222>
 8000fa0:	af20      	add	r7, sp, #128	; 0x80
 8000fa2:	4638      	mov	r0, r7
 8000fa4:	f000 f936 	bl	8001214 <__gnu_Unwind_Save_WMMXD>
 8000fa8:	6bb2      	ldr	r2, [r6, #56]	; 0x38
 8000faa:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
 8000fae:	b154      	cbz	r4, 8000fc6 <_Unwind_VRS_Pop+0xb2>
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8000fb6:	1ad0      	subs	r0, r2, r3
 8000fb8:	00e4      	lsls	r4, r4, #3
 8000fba:	581d      	ldr	r5, [r3, r0]
 8000fbc:	f843 5b04 	str.w	r5, [r3], #4
 8000fc0:	428b      	cmp	r3, r1
 8000fc2:	d1fa      	bne.n	8000fba <_Unwind_VRS_Pop+0xa6>
 8000fc4:	4422      	add	r2, r4
 8000fc6:	4638      	mov	r0, r7
 8000fc8:	63b2      	str	r2, [r6, #56]	; 0x38
 8000fca:	f000 f901 	bl	80011d0 <__gnu_Unwind_Restore_WMMXD>
 8000fce:	2000      	movs	r0, #0
 8000fd0:	b043      	add	sp, #268	; 0x10c
 8000fd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000fd6:	2c01      	cmp	r4, #1
 8000fd8:	ea4f 4812 	mov.w	r8, r2, lsr #16
 8000fdc:	b295      	uxth	r5, r2
 8000fde:	d056      	beq.n	800108e <_Unwind_VRS_Pop+0x17a>
 8000fe0:	2c05      	cmp	r4, #5
 8000fe2:	d158      	bne.n	8001096 <_Unwind_VRS_Pop+0x182>
 8000fe4:	eb08 0905 	add.w	r9, r8, r5
 8000fe8:	f1b9 0f20 	cmp.w	r9, #32
 8000fec:	d853      	bhi.n	8001096 <_Unwind_VRS_Pop+0x182>
 8000fee:	f1b8 0f0f 	cmp.w	r8, #15
 8000ff2:	d973      	bls.n	80010dc <_Unwind_VRS_Pop+0x1c8>
 8000ff4:	46a9      	mov	r9, r5
 8000ff6:	2d00      	cmp	r5, #0
 8000ff8:	f040 8084 	bne.w	8001104 <_Unwind_VRS_Pop+0x1f0>
 8000ffc:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8000ffe:	b365      	cbz	r5, 800105a <_Unwind_VRS_Pop+0x146>
 8001000:	af20      	add	r7, sp, #128	; 0x80
 8001002:	f04f 0900 	mov.w	r9, #0
 8001006:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 800100a:	3f04      	subs	r7, #4
 800100c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8001010:	f853 1b04 	ldr.w	r1, [r3], #4
 8001014:	42ab      	cmp	r3, r5
 8001016:	f847 1f04 	str.w	r1, [r7, #4]!
 800101a:	d1f9      	bne.n	8001010 <_Unwind_VRS_Pop+0xfc>
 800101c:	f1b9 0f00 	cmp.w	r9, #0
 8001020:	d00f      	beq.n	8001042 <_Unwind_VRS_Pop+0x12e>
 8001022:	466f      	mov	r7, sp
 8001024:	4641      	mov	r1, r8
 8001026:	2910      	cmp	r1, #16
 8001028:	bf38      	it	cc
 800102a:	2110      	movcc	r1, #16
 800102c:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8001030:	3984      	subs	r1, #132	; 0x84
 8001032:	eb03 05c9 	add.w	r5, r3, r9, lsl #3
 8001036:	f853 0b04 	ldr.w	r0, [r3], #4
 800103a:	42ab      	cmp	r3, r5
 800103c:	f841 0f04 	str.w	r0, [r1, #4]!
 8001040:	d1f9      	bne.n	8001036 <_Unwind_VRS_Pop+0x122>
 8001042:	2c01      	cmp	r4, #1
 8001044:	d07f      	beq.n	8001146 <_Unwind_VRS_Pop+0x232>
 8001046:	f1b8 0f0f 	cmp.w	r8, #15
 800104a:	63b5      	str	r5, [r6, #56]	; 0x38
 800104c:	d942      	bls.n	80010d4 <_Unwind_VRS_Pop+0x1c0>
 800104e:	f1b9 0f00 	cmp.w	r9, #0
 8001052:	d002      	beq.n	800105a <_Unwind_VRS_Pop+0x146>
 8001054:	4668      	mov	r0, sp
 8001056:	f000 f8b3 	bl	80011c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800105a:	2000      	movs	r0, #0
 800105c:	b043      	add	sp, #268	; 0x10c
 800105e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001062:	b9c4      	cbnz	r4, 8001096 <_Unwind_VRS_Pop+0x182>
 8001064:	4623      	mov	r3, r4
 8001066:	2401      	movs	r4, #1
 8001068:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800106a:	1d37      	adds	r7, r6, #4
 800106c:	b2a8      	uxth	r0, r5
 800106e:	fa04 f103 	lsl.w	r1, r4, r3
 8001072:	4201      	tst	r1, r0
 8001074:	bf1c      	itt	ne
 8001076:	f852 1b04 	ldrne.w	r1, [r2], #4
 800107a:	f847 1023 	strne.w	r1, [r7, r3, lsl #2]
 800107e:	3301      	adds	r3, #1
 8001080:	2b10      	cmp	r3, #16
 8001082:	d1f4      	bne.n	800106e <_Unwind_VRS_Pop+0x15a>
 8001084:	f415 5000 	ands.w	r0, r5, #8192	; 0x2000
 8001088:	d1e7      	bne.n	800105a <_Unwind_VRS_Pop+0x146>
 800108a:	63b2      	str	r2, [r6, #56]	; 0x38
 800108c:	e004      	b.n	8001098 <_Unwind_VRS_Pop+0x184>
 800108e:	eb08 0305 	add.w	r3, r8, r5
 8001092:	2b10      	cmp	r3, #16
 8001094:	d903      	bls.n	800109e <_Unwind_VRS_Pop+0x18a>
 8001096:	2002      	movs	r0, #2
 8001098:	b043      	add	sp, #268	; 0x10c
 800109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800109e:	f1b8 0f0f 	cmp.w	r8, #15
 80010a2:	d8f8      	bhi.n	8001096 <_Unwind_VRS_Pop+0x182>
 80010a4:	6833      	ldr	r3, [r6, #0]
 80010a6:	07da      	lsls	r2, r3, #31
 80010a8:	d506      	bpl.n	80010b8 <_Unwind_VRS_Pop+0x1a4>
 80010aa:	4630      	mov	r0, r6
 80010ac:	f023 0303 	bic.w	r3, r3, #3
 80010b0:	f840 3b48 	str.w	r3, [r0], #72
 80010b4:	f000 f878 	bl	80011a8 <__gnu_Unwind_Save_VFP>
 80010b8:	af20      	add	r7, sp, #128	; 0x80
 80010ba:	4638      	mov	r0, r7
 80010bc:	f000 f874 	bl	80011a8 <__gnu_Unwind_Save_VFP>
 80010c0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80010c2:	2d00      	cmp	r5, #0
 80010c4:	d19d      	bne.n	8001002 <_Unwind_VRS_Pop+0xee>
 80010c6:	461d      	mov	r5, r3
 80010c8:	3504      	adds	r5, #4
 80010ca:	4638      	mov	r0, r7
 80010cc:	63b5      	str	r5, [r6, #56]	; 0x38
 80010ce:	f000 f867 	bl	80011a0 <__gnu_Unwind_Restore_VFP>
 80010d2:	e7c2      	b.n	800105a <_Unwind_VRS_Pop+0x146>
 80010d4:	a820      	add	r0, sp, #128	; 0x80
 80010d6:	f000 f86b 	bl	80011b0 <__gnu_Unwind_Restore_VFP_D>
 80010da:	e7b8      	b.n	800104e <_Unwind_VRS_Pop+0x13a>
 80010dc:	f1b9 0f10 	cmp.w	r9, #16
 80010e0:	d93f      	bls.n	8001162 <_Unwind_VRS_Pop+0x24e>
 80010e2:	f1a9 0910 	sub.w	r9, r9, #16
 80010e6:	6833      	ldr	r3, [r6, #0]
 80010e8:	07d9      	lsls	r1, r3, #31
 80010ea:	d508      	bpl.n	80010fe <_Unwind_VRS_Pop+0x1ea>
 80010ec:	4630      	mov	r0, r6
 80010ee:	f023 0301 	bic.w	r3, r3, #1
 80010f2:	f043 0302 	orr.w	r3, r3, #2
 80010f6:	f840 3b48 	str.w	r3, [r0], #72
 80010fa:	f000 f85d 	bl	80011b8 <__gnu_Unwind_Save_VFP_D>
 80010fe:	f1b9 0f00 	cmp.w	r9, #0
 8001102:	d031      	beq.n	8001168 <_Unwind_VRS_Pop+0x254>
 8001104:	6833      	ldr	r3, [r6, #0]
 8001106:	075a      	lsls	r2, r3, #29
 8001108:	d41f      	bmi.n	800114a <_Unwind_VRS_Pop+0x236>
 800110a:	f1b8 0f0f 	cmp.w	r8, #15
 800110e:	d924      	bls.n	800115a <_Unwind_VRS_Pop+0x246>
 8001110:	466f      	mov	r7, sp
 8001112:	f1c8 0510 	rsb	r5, r8, #16
 8001116:	4638      	mov	r0, r7
 8001118:	f000 f856 	bl	80011c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 800111c:	2d00      	cmp	r5, #0
 800111e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8001120:	dd80      	ble.n	8001024 <_Unwind_VRS_Pop+0x110>
 8001122:	af20      	add	r7, sp, #128	; 0x80
 8001124:	e76f      	b.n	8001006 <_Unwind_VRS_Pop+0xf2>
 8001126:	f023 0310 	bic.w	r3, r3, #16
 800112a:	6033      	str	r3, [r6, #0]
 800112c:	f506 70e8 	add.w	r0, r6, #464	; 0x1d0
 8001130:	f000 f89c 	bl	800126c <__gnu_Unwind_Save_WMMXC>
 8001134:	e706      	b.n	8000f44 <_Unwind_VRS_Pop+0x30>
 8001136:	f023 0308 	bic.w	r3, r3, #8
 800113a:	6003      	str	r3, [r0, #0]
 800113c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8001140:	f000 f868 	bl	8001214 <__gnu_Unwind_Save_WMMXD>
 8001144:	e72c      	b.n	8000fa0 <_Unwind_VRS_Pop+0x8c>
 8001146:	af20      	add	r7, sp, #128	; 0x80
 8001148:	e7be      	b.n	80010c8 <_Unwind_VRS_Pop+0x1b4>
 800114a:	4630      	mov	r0, r6
 800114c:	f023 0304 	bic.w	r3, r3, #4
 8001150:	f840 3bd0 	str.w	r3, [r0], #208
 8001154:	f000 f838 	bl	80011c8 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001158:	e7d7      	b.n	800110a <_Unwind_VRS_Pop+0x1f6>
 800115a:	a820      	add	r0, sp, #128	; 0x80
 800115c:	f000 f82c 	bl	80011b8 <__gnu_Unwind_Save_VFP_D>
 8001160:	e7d6      	b.n	8001110 <_Unwind_VRS_Pop+0x1fc>
 8001162:	f04f 0900 	mov.w	r9, #0
 8001166:	e7be      	b.n	80010e6 <_Unwind_VRS_Pop+0x1d2>
 8001168:	f1b8 0f0f 	cmp.w	r8, #15
 800116c:	f63f af46 	bhi.w	8000ffc <_Unwind_VRS_Pop+0xe8>
 8001170:	af20      	add	r7, sp, #128	; 0x80
 8001172:	4638      	mov	r0, r7
 8001174:	f000 f820 	bl	80011b8 <__gnu_Unwind_Save_VFP_D>
 8001178:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 800117a:	2d00      	cmp	r5, #0
 800117c:	f47f af41 	bne.w	8001002 <_Unwind_VRS_Pop+0xee>
 8001180:	4638      	mov	r0, r7
 8001182:	f000 f815 	bl	80011b0 <__gnu_Unwind_Restore_VFP_D>
 8001186:	e768      	b.n	800105a <_Unwind_VRS_Pop+0x146>

08001188 <__restore_core_regs>:
 8001188:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800118c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001190:	469c      	mov	ip, r3
 8001192:	46a6      	mov	lr, r4
 8001194:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8001198:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800119c:	46e5      	mov	sp, ip
 800119e:	bd00      	pop	{pc}

080011a0 <__gnu_Unwind_Restore_VFP>:
 80011a0:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop

080011a8 <__gnu_Unwind_Save_VFP>:
 80011a8:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop

080011b0 <__gnu_Unwind_Restore_VFP_D>:
 80011b0:	ec90 0b20 	vldmia	r0, {d0-d15}
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop

080011b8 <__gnu_Unwind_Save_VFP_D>:
 80011b8:	ec80 0b20 	vstmia	r0, {d0-d15}
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop

080011c0 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80011c0:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop

080011c8 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80011c8:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop

080011d0 <__gnu_Unwind_Restore_WMMXD>:
 80011d0:	ecf0 0102 	ldfe	f0, [r0], #8
 80011d4:	ecf0 1102 	ldfe	f1, [r0], #8
 80011d8:	ecf0 2102 	ldfe	f2, [r0], #8
 80011dc:	ecf0 3102 	ldfe	f3, [r0], #8
 80011e0:	ecf0 4102 	ldfe	f4, [r0], #8
 80011e4:	ecf0 5102 	ldfe	f5, [r0], #8
 80011e8:	ecf0 6102 	ldfe	f6, [r0], #8
 80011ec:	ecf0 7102 	ldfe	f7, [r0], #8
 80011f0:	ecf0 8102 	ldfp	f0, [r0], #8
 80011f4:	ecf0 9102 	ldfp	f1, [r0], #8
 80011f8:	ecf0 a102 	ldfp	f2, [r0], #8
 80011fc:	ecf0 b102 	ldfp	f3, [r0], #8
 8001200:	ecf0 c102 	ldfp	f4, [r0], #8
 8001204:	ecf0 d102 	ldfp	f5, [r0], #8
 8001208:	ecf0 e102 	ldfp	f6, [r0], #8
 800120c:	ecf0 f102 	ldfp	f7, [r0], #8
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop

08001214 <__gnu_Unwind_Save_WMMXD>:
 8001214:	ece0 0102 	stfe	f0, [r0], #8
 8001218:	ece0 1102 	stfe	f1, [r0], #8
 800121c:	ece0 2102 	stfe	f2, [r0], #8
 8001220:	ece0 3102 	stfe	f3, [r0], #8
 8001224:	ece0 4102 	stfe	f4, [r0], #8
 8001228:	ece0 5102 	stfe	f5, [r0], #8
 800122c:	ece0 6102 	stfe	f6, [r0], #8
 8001230:	ece0 7102 	stfe	f7, [r0], #8
 8001234:	ece0 8102 	stfp	f0, [r0], #8
 8001238:	ece0 9102 	stfp	f1, [r0], #8
 800123c:	ece0 a102 	stfp	f2, [r0], #8
 8001240:	ece0 b102 	stfp	f3, [r0], #8
 8001244:	ece0 c102 	stfp	f4, [r0], #8
 8001248:	ece0 d102 	stfp	f5, [r0], #8
 800124c:	ece0 e102 	stfp	f6, [r0], #8
 8001250:	ece0 f102 	stfp	f7, [r0], #8
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop

08001258 <__gnu_Unwind_Restore_WMMXC>:
 8001258:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800125c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001260:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001264:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop

0800126c <__gnu_Unwind_Save_WMMXC>:
 800126c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001270:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001274:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001278:	fca0 b101 	stc2	1, cr11, [r0], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop

08001280 <_Unwind_RaiseException>:
 8001280:	46ec      	mov	ip, sp
 8001282:	b500      	push	{lr}
 8001284:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001288:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800128c:	f04f 0300 	mov.w	r3, #0
 8001290:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001294:	a901      	add	r1, sp, #4
 8001296:	f7ff fbe7 	bl	8000a68 <__gnu_Unwind_RaiseException>
 800129a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800129e:	b012      	add	sp, #72	; 0x48
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop

080012a4 <_Unwind_Resume>:
 80012a4:	46ec      	mov	ip, sp
 80012a6:	b500      	push	{lr}
 80012a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012b8:	a901      	add	r1, sp, #4
 80012ba:	f7ff fc13 	bl	8000ae4 <__gnu_Unwind_Resume>
 80012be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012c2:	b012      	add	sp, #72	; 0x48
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <_Unwind_Resume_or_Rethrow>:
 80012c8:	46ec      	mov	ip, sp
 80012ca:	b500      	push	{lr}
 80012cc:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012d0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012dc:	a901      	add	r1, sp, #4
 80012de:	f7ff fc23 	bl	8000b28 <__gnu_Unwind_Resume_or_Rethrow>
 80012e2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80012e6:	b012      	add	sp, #72	; 0x48
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop

080012ec <_Unwind_ForcedUnwind>:
 80012ec:	46ec      	mov	ip, sp
 80012ee:	b500      	push	{lr}
 80012f0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012f4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001300:	ab01      	add	r3, sp, #4
 8001302:	f7ff fbe5 	bl	8000ad0 <__gnu_Unwind_ForcedUnwind>
 8001306:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800130a:	b012      	add	sp, #72	; 0x48
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <_Unwind_Backtrace>:
 8001310:	46ec      	mov	ip, sp
 8001312:	b500      	push	{lr}
 8001314:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001318:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800131c:	f04f 0300 	mov.w	r3, #0
 8001320:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001324:	aa01      	add	r2, sp, #4
 8001326:	f7ff fc5b 	bl	8000be0 <__gnu_Unwind_Backtrace>
 800132a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800132e:	b012      	add	sp, #72	; 0x48
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop

08001334 <next_unwind_byte>:
 8001334:	7a02      	ldrb	r2, [r0, #8]
 8001336:	4603      	mov	r3, r0
 8001338:	b97a      	cbnz	r2, 800135a <next_unwind_byte+0x26>
 800133a:	7a42      	ldrb	r2, [r0, #9]
 800133c:	b1a2      	cbz	r2, 8001368 <next_unwind_byte+0x34>
 800133e:	f04f 0c03 	mov.w	ip, #3
 8001342:	6841      	ldr	r1, [r0, #4]
 8001344:	3a01      	subs	r2, #1
 8001346:	7242      	strb	r2, [r0, #9]
 8001348:	6808      	ldr	r0, [r1, #0]
 800134a:	1d0a      	adds	r2, r1, #4
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	0202      	lsls	r2, r0, #8
 8001350:	f883 c008 	strb.w	ip, [r3, #8]
 8001354:	0e00      	lsrs	r0, r0, #24
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	4770      	bx	lr
 800135a:	6800      	ldr	r0, [r0, #0]
 800135c:	3a01      	subs	r2, #1
 800135e:	721a      	strb	r2, [r3, #8]
 8001360:	0202      	lsls	r2, r0, #8
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	0e00      	lsrs	r0, r0, #24
 8001366:	4770      	bx	lr
 8001368:	20b0      	movs	r0, #176	; 0xb0
 800136a:	4770      	bx	lr

0800136c <_Unwind_GetGR.constprop.0>:
 800136c:	2300      	movs	r3, #0
 800136e:	b500      	push	{lr}
 8001370:	b085      	sub	sp, #20
 8001372:	a903      	add	r1, sp, #12
 8001374:	9100      	str	r1, [sp, #0]
 8001376:	220c      	movs	r2, #12
 8001378:	4619      	mov	r1, r3
 800137a:	f7ff fbe7 	bl	8000b4c <_Unwind_VRS_Get>
 800137e:	9803      	ldr	r0, [sp, #12]
 8001380:	b005      	add	sp, #20
 8001382:	f85d fb04 	ldr.w	pc, [sp], #4
 8001386:	bf00      	nop

08001388 <unwind_UCB_from_context>:
 8001388:	e7f0      	b.n	800136c <_Unwind_GetGR.constprop.0>
 800138a:	bf00      	nop

0800138c <__gnu_unwind_execute>:
 800138c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001390:	f04f 0800 	mov.w	r8, #0
 8001394:	4605      	mov	r5, r0
 8001396:	460e      	mov	r6, r1
 8001398:	b085      	sub	sp, #20
 800139a:	4630      	mov	r0, r6
 800139c:	f7ff ffca 	bl	8001334 <next_unwind_byte>
 80013a0:	28b0      	cmp	r0, #176	; 0xb0
 80013a2:	4604      	mov	r4, r0
 80013a4:	f000 80ba 	beq.w	800151c <__gnu_unwind_execute+0x190>
 80013a8:	0607      	lsls	r7, r0, #24
 80013aa:	d520      	bpl.n	80013ee <__gnu_unwind_execute+0x62>
 80013ac:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80013b0:	2b80      	cmp	r3, #128	; 0x80
 80013b2:	d04d      	beq.n	8001450 <__gnu_unwind_execute+0xc4>
 80013b4:	2b90      	cmp	r3, #144	; 0x90
 80013b6:	d036      	beq.n	8001426 <__gnu_unwind_execute+0x9a>
 80013b8:	2ba0      	cmp	r3, #160	; 0xa0
 80013ba:	d060      	beq.n	800147e <__gnu_unwind_execute+0xf2>
 80013bc:	2bb0      	cmp	r3, #176	; 0xb0
 80013be:	d073      	beq.n	80014a8 <__gnu_unwind_execute+0x11c>
 80013c0:	2bc0      	cmp	r3, #192	; 0xc0
 80013c2:	f000 808a 	beq.w	80014da <__gnu_unwind_execute+0x14e>
 80013c6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80013ca:	2bd0      	cmp	r3, #208	; 0xd0
 80013cc:	d10b      	bne.n	80013e6 <__gnu_unwind_execute+0x5a>
 80013ce:	f000 0207 	and.w	r2, r0, #7
 80013d2:	3201      	adds	r2, #1
 80013d4:	2305      	movs	r3, #5
 80013d6:	2101      	movs	r1, #1
 80013d8:	4628      	mov	r0, r5
 80013da:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013de:	f7ff fd99 	bl	8000f14 <_Unwind_VRS_Pop>
 80013e2:	2800      	cmp	r0, #0
 80013e4:	d0d9      	beq.n	800139a <__gnu_unwind_execute+0xe>
 80013e6:	2009      	movs	r0, #9
 80013e8:	b005      	add	sp, #20
 80013ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ee:	0083      	lsls	r3, r0, #2
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	1d1f      	adds	r7, r3, #4
 80013f4:	2300      	movs	r3, #0
 80013f6:	f10d 090c 	add.w	r9, sp, #12
 80013fa:	4619      	mov	r1, r3
 80013fc:	220d      	movs	r2, #13
 80013fe:	4628      	mov	r0, r5
 8001400:	f8cd 9000 	str.w	r9, [sp]
 8001404:	f7ff fba2 	bl	8000b4c <_Unwind_VRS_Get>
 8001408:	9b03      	ldr	r3, [sp, #12]
 800140a:	0660      	lsls	r0, r4, #25
 800140c:	bf4c      	ite	mi
 800140e:	1bdf      	submi	r7, r3, r7
 8001410:	18ff      	addpl	r7, r7, r3
 8001412:	2300      	movs	r3, #0
 8001414:	220d      	movs	r2, #13
 8001416:	4628      	mov	r0, r5
 8001418:	4619      	mov	r1, r3
 800141a:	f8cd 9000 	str.w	r9, [sp]
 800141e:	9703      	str	r7, [sp, #12]
 8001420:	f7ff fbba 	bl	8000b98 <_Unwind_VRS_Set>
 8001424:	e7b9      	b.n	800139a <__gnu_unwind_execute+0xe>
 8001426:	f000 030d 	and.w	r3, r0, #13
 800142a:	2b0d      	cmp	r3, #13
 800142c:	d0db      	beq.n	80013e6 <__gnu_unwind_execute+0x5a>
 800142e:	2300      	movs	r3, #0
 8001430:	af03      	add	r7, sp, #12
 8001432:	4619      	mov	r1, r3
 8001434:	f000 020f 	and.w	r2, r0, #15
 8001438:	9700      	str	r7, [sp, #0]
 800143a:	4628      	mov	r0, r5
 800143c:	f7ff fb86 	bl	8000b4c <_Unwind_VRS_Get>
 8001440:	2300      	movs	r3, #0
 8001442:	220d      	movs	r2, #13
 8001444:	4628      	mov	r0, r5
 8001446:	4619      	mov	r1, r3
 8001448:	9700      	str	r7, [sp, #0]
 800144a:	f7ff fba5 	bl	8000b98 <_Unwind_VRS_Set>
 800144e:	e7a4      	b.n	800139a <__gnu_unwind_execute+0xe>
 8001450:	4630      	mov	r0, r6
 8001452:	f7ff ff6f 	bl	8001334 <next_unwind_byte>
 8001456:	0224      	lsls	r4, r4, #8
 8001458:	4320      	orrs	r0, r4
 800145a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800145e:	d0c2      	beq.n	80013e6 <__gnu_unwind_execute+0x5a>
 8001460:	2300      	movs	r3, #0
 8001462:	0104      	lsls	r4, r0, #4
 8001464:	4619      	mov	r1, r3
 8001466:	4628      	mov	r0, r5
 8001468:	b2a2      	uxth	r2, r4
 800146a:	f7ff fd53 	bl	8000f14 <_Unwind_VRS_Pop>
 800146e:	2800      	cmp	r0, #0
 8001470:	d1b9      	bne.n	80013e6 <__gnu_unwind_execute+0x5a>
 8001472:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001476:	bf18      	it	ne
 8001478:	f04f 0801 	movne.w	r8, #1
 800147c:	e78d      	b.n	800139a <__gnu_unwind_execute+0xe>
 800147e:	43c3      	mvns	r3, r0
 8001480:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	411a      	asrs	r2, r3
 800148a:	2300      	movs	r3, #0
 800148c:	0701      	lsls	r1, r0, #28
 800148e:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001492:	bf48      	it	mi
 8001494:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001498:	4628      	mov	r0, r5
 800149a:	4619      	mov	r1, r3
 800149c:	f7ff fd3a 	bl	8000f14 <_Unwind_VRS_Pop>
 80014a0:	2800      	cmp	r0, #0
 80014a2:	f43f af7a 	beq.w	800139a <__gnu_unwind_execute+0xe>
 80014a6:	e79e      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 80014a8:	28b1      	cmp	r0, #177	; 0xb1
 80014aa:	d03c      	beq.n	8001526 <__gnu_unwind_execute+0x19a>
 80014ac:	28b2      	cmp	r0, #178	; 0xb2
 80014ae:	f000 80b0 	beq.w	8001612 <__gnu_unwind_execute+0x286>
 80014b2:	28b3      	cmp	r0, #179	; 0xb3
 80014b4:	d04a      	beq.n	800154c <__gnu_unwind_execute+0x1c0>
 80014b6:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 80014ba:	2bb4      	cmp	r3, #180	; 0xb4
 80014bc:	d093      	beq.n	80013e6 <__gnu_unwind_execute+0x5a>
 80014be:	2301      	movs	r3, #1
 80014c0:	f000 0207 	and.w	r2, r0, #7
 80014c4:	441a      	add	r2, r3
 80014c6:	4628      	mov	r0, r5
 80014c8:	4619      	mov	r1, r3
 80014ca:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014ce:	f7ff fd21 	bl	8000f14 <_Unwind_VRS_Pop>
 80014d2:	2800      	cmp	r0, #0
 80014d4:	f43f af61 	beq.w	800139a <__gnu_unwind_execute+0xe>
 80014d8:	e785      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 80014da:	28c6      	cmp	r0, #198	; 0xc6
 80014dc:	d04f      	beq.n	800157e <__gnu_unwind_execute+0x1f2>
 80014de:	28c7      	cmp	r0, #199	; 0xc7
 80014e0:	d061      	beq.n	80015a6 <__gnu_unwind_execute+0x21a>
 80014e2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80014e6:	2bc0      	cmp	r3, #192	; 0xc0
 80014e8:	d070      	beq.n	80015cc <__gnu_unwind_execute+0x240>
 80014ea:	28c8      	cmp	r0, #200	; 0xc8
 80014ec:	d07c      	beq.n	80015e8 <__gnu_unwind_execute+0x25c>
 80014ee:	28c9      	cmp	r0, #201	; 0xc9
 80014f0:	f47f af79 	bne.w	80013e6 <__gnu_unwind_execute+0x5a>
 80014f4:	4630      	mov	r0, r6
 80014f6:	f7ff ff1d 	bl	8001334 <next_unwind_byte>
 80014fa:	2305      	movs	r3, #5
 80014fc:	4602      	mov	r2, r0
 80014fe:	2101      	movs	r1, #1
 8001500:	4628      	mov	r0, r5
 8001502:	0314      	lsls	r4, r2, #12
 8001504:	f002 020f 	and.w	r2, r2, #15
 8001508:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 800150c:	440a      	add	r2, r1
 800150e:	4322      	orrs	r2, r4
 8001510:	f7ff fd00 	bl	8000f14 <_Unwind_VRS_Pop>
 8001514:	2800      	cmp	r0, #0
 8001516:	f43f af40 	beq.w	800139a <__gnu_unwind_execute+0xe>
 800151a:	e764      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 800151c:	f1b8 0f00 	cmp.w	r8, #0
 8001520:	d01c      	beq.n	800155c <__gnu_unwind_execute+0x1d0>
 8001522:	2000      	movs	r0, #0
 8001524:	e760      	b.n	80013e8 <__gnu_unwind_execute+0x5c>
 8001526:	4630      	mov	r0, r6
 8001528:	f7ff ff04 	bl	8001334 <next_unwind_byte>
 800152c:	4602      	mov	r2, r0
 800152e:	2800      	cmp	r0, #0
 8001530:	f43f af59 	beq.w	80013e6 <__gnu_unwind_execute+0x5a>
 8001534:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001538:	f47f af55 	bne.w	80013e6 <__gnu_unwind_execute+0x5a>
 800153c:	4619      	mov	r1, r3
 800153e:	4628      	mov	r0, r5
 8001540:	f7ff fce8 	bl	8000f14 <_Unwind_VRS_Pop>
 8001544:	2800      	cmp	r0, #0
 8001546:	f43f af28 	beq.w	800139a <__gnu_unwind_execute+0xe>
 800154a:	e74c      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 800154c:	4630      	mov	r0, r6
 800154e:	f7ff fef1 	bl	8001334 <next_unwind_byte>
 8001552:	2301      	movs	r3, #1
 8001554:	4602      	mov	r2, r0
 8001556:	4619      	mov	r1, r3
 8001558:	4628      	mov	r0, r5
 800155a:	e7d2      	b.n	8001502 <__gnu_unwind_execute+0x176>
 800155c:	ac03      	add	r4, sp, #12
 800155e:	4643      	mov	r3, r8
 8001560:	220e      	movs	r2, #14
 8001562:	4641      	mov	r1, r8
 8001564:	4628      	mov	r0, r5
 8001566:	9400      	str	r4, [sp, #0]
 8001568:	f7ff faf0 	bl	8000b4c <_Unwind_VRS_Get>
 800156c:	4643      	mov	r3, r8
 800156e:	220f      	movs	r2, #15
 8001570:	4628      	mov	r0, r5
 8001572:	4641      	mov	r1, r8
 8001574:	9400      	str	r4, [sp, #0]
 8001576:	f7ff fb0f 	bl	8000b98 <_Unwind_VRS_Set>
 800157a:	4640      	mov	r0, r8
 800157c:	e734      	b.n	80013e8 <__gnu_unwind_execute+0x5c>
 800157e:	4630      	mov	r0, r6
 8001580:	f7ff fed8 	bl	8001334 <next_unwind_byte>
 8001584:	4602      	mov	r2, r0
 8001586:	2303      	movs	r3, #3
 8001588:	0314      	lsls	r4, r2, #12
 800158a:	f002 020f 	and.w	r2, r2, #15
 800158e:	f404 2470 	and.w	r4, r4, #983040	; 0xf0000
 8001592:	3201      	adds	r2, #1
 8001594:	4628      	mov	r0, r5
 8001596:	4619      	mov	r1, r3
 8001598:	4322      	orrs	r2, r4
 800159a:	f7ff fcbb 	bl	8000f14 <_Unwind_VRS_Pop>
 800159e:	2800      	cmp	r0, #0
 80015a0:	f43f aefb 	beq.w	800139a <__gnu_unwind_execute+0xe>
 80015a4:	e71f      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 80015a6:	4630      	mov	r0, r6
 80015a8:	f7ff fec4 	bl	8001334 <next_unwind_byte>
 80015ac:	4602      	mov	r2, r0
 80015ae:	2800      	cmp	r0, #0
 80015b0:	f43f af19 	beq.w	80013e6 <__gnu_unwind_execute+0x5a>
 80015b4:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80015b8:	f47f af15 	bne.w	80013e6 <__gnu_unwind_execute+0x5a>
 80015bc:	2104      	movs	r1, #4
 80015be:	4628      	mov	r0, r5
 80015c0:	f7ff fca8 	bl	8000f14 <_Unwind_VRS_Pop>
 80015c4:	2800      	cmp	r0, #0
 80015c6:	f43f aee8 	beq.w	800139a <__gnu_unwind_execute+0xe>
 80015ca:	e70c      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 80015cc:	2303      	movs	r3, #3
 80015ce:	f000 020f 	and.w	r2, r0, #15
 80015d2:	3201      	adds	r2, #1
 80015d4:	4628      	mov	r0, r5
 80015d6:	4619      	mov	r1, r3
 80015d8:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80015dc:	f7ff fc9a 	bl	8000f14 <_Unwind_VRS_Pop>
 80015e0:	2800      	cmp	r0, #0
 80015e2:	f43f aeda 	beq.w	800139a <__gnu_unwind_execute+0xe>
 80015e6:	e6fe      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 80015e8:	4630      	mov	r0, r6
 80015ea:	f7ff fea3 	bl	8001334 <next_unwind_byte>
 80015ee:	4602      	mov	r2, r0
 80015f0:	2101      	movs	r1, #1
 80015f2:	f002 04f0 	and.w	r4, r2, #240	; 0xf0
 80015f6:	f002 020f 	and.w	r2, r2, #15
 80015fa:	3410      	adds	r4, #16
 80015fc:	440a      	add	r2, r1
 80015fe:	2305      	movs	r3, #5
 8001600:	4628      	mov	r0, r5
 8001602:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001606:	f7ff fc85 	bl	8000f14 <_Unwind_VRS_Pop>
 800160a:	2800      	cmp	r0, #0
 800160c:	f43f aec5 	beq.w	800139a <__gnu_unwind_execute+0xe>
 8001610:	e6e9      	b.n	80013e6 <__gnu_unwind_execute+0x5a>
 8001612:	2300      	movs	r3, #0
 8001614:	f10d 090c 	add.w	r9, sp, #12
 8001618:	220d      	movs	r2, #13
 800161a:	4619      	mov	r1, r3
 800161c:	4628      	mov	r0, r5
 800161e:	f8cd 9000 	str.w	r9, [sp]
 8001622:	f7ff fa93 	bl	8000b4c <_Unwind_VRS_Get>
 8001626:	4630      	mov	r0, r6
 8001628:	f7ff fe84 	bl	8001334 <next_unwind_byte>
 800162c:	0602      	lsls	r2, r0, #24
 800162e:	f04f 0402 	mov.w	r4, #2
 8001632:	d50c      	bpl.n	800164e <__gnu_unwind_execute+0x2c2>
 8001634:	9b03      	ldr	r3, [sp, #12]
 8001636:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800163a:	40a0      	lsls	r0, r4
 800163c:	4418      	add	r0, r3
 800163e:	9003      	str	r0, [sp, #12]
 8001640:	4630      	mov	r0, r6
 8001642:	f7ff fe77 	bl	8001334 <next_unwind_byte>
 8001646:	0603      	lsls	r3, r0, #24
 8001648:	f104 0407 	add.w	r4, r4, #7
 800164c:	d4f2      	bmi.n	8001634 <__gnu_unwind_execute+0x2a8>
 800164e:	9b03      	ldr	r3, [sp, #12]
 8001650:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001654:	40a2      	lsls	r2, r4
 8001656:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800165a:	441a      	add	r2, r3
 800165c:	2300      	movs	r3, #0
 800165e:	9203      	str	r2, [sp, #12]
 8001660:	4628      	mov	r0, r5
 8001662:	220d      	movs	r2, #13
 8001664:	4619      	mov	r1, r3
 8001666:	f8cd 9000 	str.w	r9, [sp]
 800166a:	f7ff fa95 	bl	8000b98 <_Unwind_VRS_Set>
 800166e:	e694      	b.n	800139a <__gnu_unwind_execute+0xe>

08001670 <__gnu_unwind_frame>:
 8001670:	460b      	mov	r3, r1
 8001672:	f04f 0c03 	mov.w	ip, #3
 8001676:	b500      	push	{lr}
 8001678:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800167a:	4618      	mov	r0, r3
 800167c:	6853      	ldr	r3, [r2, #4]
 800167e:	b085      	sub	sp, #20
 8001680:	3208      	adds	r2, #8
 8001682:	9202      	str	r2, [sp, #8]
 8001684:	a901      	add	r1, sp, #4
 8001686:	0e1a      	lsrs	r2, r3, #24
 8001688:	021b      	lsls	r3, r3, #8
 800168a:	f88d c00c 	strb.w	ip, [sp, #12]
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	f88d 200d 	strb.w	r2, [sp, #13]
 8001694:	f7ff fe7a 	bl	800138c <__gnu_unwind_execute>
 8001698:	b005      	add	sp, #20
 800169a:	f85d fb04 	ldr.w	pc, [sp], #4
 800169e:	bf00      	nop

080016a0 <_Unwind_GetRegionStart>:
 80016a0:	b508      	push	{r3, lr}
 80016a2:	f7ff fe71 	bl	8001388 <unwind_UCB_from_context>
 80016a6:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80016a8:	bd08      	pop	{r3, pc}
 80016aa:	bf00      	nop

080016ac <_Unwind_GetLanguageSpecificData>:
 80016ac:	b508      	push	{r3, lr}
 80016ae:	f7ff fe6b 	bl	8001388 <unwind_UCB_from_context>
 80016b2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80016b4:	79c3      	ldrb	r3, [r0, #7]
 80016b6:	3302      	adds	r3, #2
 80016b8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80016bc:	bd08      	pop	{r3, pc}
 80016be:	bf00      	nop

080016c0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80016c0:	4613      	mov	r3, r2
	  if (_Num)
 80016c2:	1a0a      	subs	r2, r1, r0
 80016c4:	d003      	beq.n	80016ce <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80016c6:	4601      	mov	r1, r0
 80016c8:	1a98      	subs	r0, r3, r2
 80016ca:	f005 b84b 	b.w	8006764 <memmove>
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<true>(std::__miter_base(__first),
					       std::__miter_base(__last),
					       __result);
    }
 80016ce:	4770      	bx	lr

080016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>:
	{
		// priority: {filter_match_index[7:6] | is_can2[:5] | is_fifo1[:4] | is_bit16[:3] | is_mask[:2] : index[1:0]}
		template<FilterWidth filter_width, FilterMode filter_mode>
		constexpr u8 convert_to_priority(const u8 index, const u8 can2_start, const ConfigFilterArg<filter_width, filter_mode>& filter_arg) noexcept
		{
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 80016d0:	4281      	cmp	r1, r0
 80016d2:	bf94      	ite	ls
 80016d4:	2120      	movls	r1, #32
 80016d6:	2100      	movhi	r1, #0
 80016d8:	2a01      	cmp	r2, #1
 80016da:	bf0c      	ite	eq
 80016dc:	2310      	moveq	r3, #16
 80016de:	2300      	movne	r3, #0
 80016e0:	4308      	orrs	r0, r1
		}
 80016e2:	4318      	orrs	r0, r3
 80016e4:	4770      	bx	lr

080016e6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __insertion_sort(_RandomAccessIterator __first,
 80016e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80016e8:	460e      	mov	r6, r1
 80016ea:	a902      	add	r1, sp, #8
		     _RandomAccessIterator __last, _Compare __comp)
    {
      if (__first == __last) return;
 80016ec:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80016ee:	4604      	mov	r4, r0
 80016f0:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 80016f4:	d018      	beq.n	8001728 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>

      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 80016f6:	1c41      	adds	r1, r0, #1
 80016f8:	42b1      	cmp	r1, r6
 80016fa:	d015      	beq.n	8001728 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	    auto __y = reinterpret_cast<__UINTPTR_TYPE__>(
	      static_cast<const volatile void*>(std::forward<_Up>(__u)));
	    return __x < __y;
	  }
	else
	  return std::forward<_Tp>(__t) < std::forward<_Up>(__u);
 80016fc:	460d      	mov	r5, r1
	{
	  if (__comp(__i, __first))
 80016fe:	7823      	ldrb	r3, [r4, #0]
 8001700:	f815 7b01 	ldrb.w	r7, [r5], #1
 8001704:	42bb      	cmp	r3, r7
 8001706:	d906      	bls.n	8001716 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
	    {
	      typename iterator_traits<_RandomAccessIterator>::value_type
		__val = _GLIBCXX_MOVE(*__i);
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001708:	462a      	mov	r2, r5
 800170a:	4620      	mov	r0, r4
 800170c:	f7ff ffd8 	bl	80016c0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8001710:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001712:	4629      	mov	r1, r5
 8001714:	e7f0      	b.n	80016f8 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x12>
 8001716:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 800171a:	429f      	cmp	r7, r3
 800171c:	d202      	bcs.n	8001724 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x3e>
	  *__last = _GLIBCXX_MOVE(*__next);
 800171e:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001722:	e7f8      	b.n	8001716 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x30>
      *__last = _GLIBCXX_MOVE(__val);
 8001724:	700f      	strb	r7, [r1, #0]
    }
 8001726:	e7f4      	b.n	8001712 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x2c>
	    }
	  else
	    std::__unguarded_linear_insert(__i,
				__gnu_cxx::__ops::__val_comp_iter(__comp));
	}
    }
 8001728:	b003      	add	sp, #12
 800172a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800172c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 800172c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800172e:	460e      	mov	r6, r1
 8001730:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8001732:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8001734:	4604      	mov	r4, r0
 8001736:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 800173a:	d01e      	beq.n	800177a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 800173c:	1c41      	adds	r1, r0, #1
 800173e:	42b1      	cmp	r1, r6
 8001740:	d01b      	beq.n	800177a <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001742:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8001744:	7823      	ldrb	r3, [r4, #0]
 8001746:	f815 7b01 	ldrb.w	r7, [r5], #1
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	f007 0203 	and.w	r2, r7, #3
 8001752:	429a      	cmp	r2, r3
 8001754:	d206      	bcs.n	8001764 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8001756:	462a      	mov	r2, r5
 8001758:	4620      	mov	r0, r4
 800175a:	f7ff ffb1 	bl	80016c0 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 800175e:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8001760:	4629      	mov	r1, r5
 8001762:	e7ec      	b.n	800173e <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8001764:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8001768:	f003 0003 	and.w	r0, r3, #3
 800176c:	4282      	cmp	r2, r0
 800176e:	d202      	bcs.n	8001776 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001770:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8001774:	e7f6      	b.n	8001764 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8001776:	700f      	strb	r7, [r1, #0]
    }
 8001778:	e7f2      	b.n	8001760 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 800177a:	b003      	add	sp, #12
 800177c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800177e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>:

  template<typename _RandomAccessIterator, typename _Distance,
	   typename _Tp, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 800177e:	b5f0      	push	{r4, r5, r6, r7, lr}
		  _Distance __len, _Tp __value, _Compare __comp)
    {
      const _Distance __topIndex = __holeIndex;
      _Distance __secondChild = __holeIndex;
      while (__secondChild < (__len - 1) / 2)
 8001780:	1e54      	subs	r4, r2, #1
 8001782:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001786:	1065      	asrs	r5, r4, #1
 8001788:	460c      	mov	r4, r1
 800178a:	42a5      	cmp	r5, r4
 800178c:	dd0f      	ble.n	80017ae <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x30>
	{
	  __secondChild = 2 * (__secondChild + 1);
 800178e:	1c67      	adds	r7, r4, #1
 8001790:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8001794:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8001796:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 800179a:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 800179e:	45bc      	cmp	ip, r7
		     __first + (__secondChild - 1)))
	    __secondChild--;
 80017a0:	bf88      	it	hi
 80017a2:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 80017a6:	5d87      	ldrb	r7, [r0, r6]
 80017a8:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 80017aa:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 80017ac:	e7ed      	b.n	800178a <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0xc>
	}
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 80017ae:	07d5      	lsls	r5, r2, #31
 80017b0:	d40d      	bmi.n	80017ce <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
 80017b2:	3a02      	subs	r2, #2
 80017b4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80017b8:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 80017bc:	d107      	bne.n	80017ce <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x50>
	{
	  __secondChild = 2 * (__secondChild + 1);
 80017be:	1c62      	adds	r2, r4, #1
 80017c0:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 80017c2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80017c6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80017ca:	5502      	strb	r2, [r0, r4]
						     + (__secondChild - 1)));
	  __holeIndex = __secondChild - 1;
 80017cc:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 80017ce:	1e62      	subs	r2, r4, #1
 80017d0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80017d4:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017d6:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80017d8:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017dc:	da09      	bge.n	80017f2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
 80017de:	5c84      	ldrb	r4, [r0, r2]
 80017e0:	42a3      	cmp	r3, r4
 80017e2:	d906      	bls.n	80017f2 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x74>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80017e4:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80017e6:	1e54      	subs	r4, r2, #1
 80017e8:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80017ec:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80017ee:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80017f0:	e7f1      	b.n	80017d6 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_+0x58>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80017f2:	702b      	strb	r3, [r5, #0]
	}
      __decltype(__gnu_cxx::__ops::__iter_comp_val(_GLIBCXX_MOVE(__comp)))
	__cmp(_GLIBCXX_MOVE(__comp));
      std::__push_heap(__first, __holeIndex, __topIndex,
		       _GLIBCXX_MOVE(__value), __cmp);
    }
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017f6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>:

  /// This is a helper function for the sort routine.
  template<typename _RandomAccessIterator, typename _Size, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    void
    __introsort_loop(_RandomAccessIterator __first,
 80017f6:	b082      	sub	sp, #8
 80017f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017fc:	4604      	mov	r4, r0
 80017fe:	460d      	mov	r5, r1
 8001800:	4617      	mov	r7, r2
 8001802:	b087      	sub	sp, #28
 8001804:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8001806:	f100 0801 	add.w	r8, r0, #1
		     _RandomAccessIterator __last,
		     _Size __depth_limit, _Compare __comp)
    {
      while (__last - __first > int(_S_threshold))
 800180a:	1b2e      	subs	r6, r5, r4
 800180c:	2e10      	cmp	r6, #16
 800180e:	dd29      	ble.n	8001864 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x6e>
	{
	  if (__depth_limit == 0)
 8001810:	bb6f      	cbnz	r7, 800186e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x78>
 8001812:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8001816:	f10d 0808 	add.w	r8, sp, #8
 800181a:	f10d 0910 	add.w	r9, sp, #16
 800181e:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8001822:	e889 0003 	stmia.w	r9, {r0, r1}

      if (__last - __first < 2)
	return;

      const _DistanceType __len = __last - __first;
      _DistanceType __parent = (__len - 2) / 2;
 8001826:	1eb7      	subs	r7, r6, #2
 8001828:	107f      	asrs	r7, r7, #1
      while (true)
	{
	  _ValueType __value = _GLIBCXX_MOVE(*(__first + __parent));
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800182a:	e899 0003 	ldmia.w	r9, {r0, r1}
 800182e:	4632      	mov	r2, r6
 8001830:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001834:	5de3      	ldrb	r3, [r4, r7]
 8001836:	4639      	mov	r1, r7
 8001838:	4620      	mov	r0, r4
 800183a:	f7ff ffa0 	bl	800177e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
			     __comp);
	  if (__parent == 0)
 800183e:	b10f      	cbz	r7, 8001844 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	    return;
	  __parent--;
 8001840:	3f01      	subs	r7, #1
      while (true)
 8001842:	e7f2      	b.n	800182a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8001844:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8001848:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800184a:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 800184c:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8001850:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8001852:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001856:	4632      	mov	r2, r6
 8001858:	2100      	movs	r1, #0
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff ff8f 	bl	800177e <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_SB_SB_T1_T2_>
    _GLIBCXX20_CONSTEXPR
    void
    __sort_heap(_RandomAccessIterator __first, _RandomAccessIterator __last,
		_Compare& __comp)
    {
      while (__last - __first > 1)
 8001860:	2e01      	cmp	r6, #1
 8001862:	dcef      	bgt.n	8001844 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x4e>
	  _RandomAccessIterator __cut =
	    std::__unguarded_partition_pivot(__first, __last, __comp);
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
	  __last = __cut;
	}
    }
 8001864:	b007      	add	sp, #28
 8001866:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800186a:	b002      	add	sp, #8
 800186c:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 800186e:	1076      	asrs	r6, r6, #1
 8001870:	7860      	ldrb	r0, [r4, #1]
 8001872:	5da1      	ldrb	r1, [r4, r6]
 8001874:	f815 2c01 	ldrb.w	r2, [r5, #-1]
      if (__comp(__a, __b))
 8001878:	4288      	cmp	r0, r1
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800187a:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 800187c:	f107 37ff 	add.w	r7, r7, #4294967295
      if (__comp(__a, __b))
 8001880:	d224      	bcs.n	80018cc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xd6>
	  if (__comp(__b, __c))
 8001882:	428a      	cmp	r2, r1
 8001884:	d91c      	bls.n	80018c0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xca>
      __a = _GLIBCXX_MOVE(__b);
 8001886:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001888:	55a3      	strb	r3, [r4, r6]
 800188a:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 800188c:	462b      	mov	r3, r5
 800188e:	4616      	mov	r6, r2
 8001890:	f894 e000 	ldrb.w	lr, [r4]
 8001894:	f812 0b01 	ldrb.w	r0, [r2], #1
	  while (__comp(__first, __pivot))
 8001898:	4570      	cmp	r0, lr
 800189a:	d3f8      	bcc.n	800188e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>
	  --__last;
 800189c:	1e59      	subs	r1, r3, #1
 800189e:	460b      	mov	r3, r1
 80018a0:	f811 c901 	ldrb.w	ip, [r1], #-1
	  while (__comp(__pivot, __last))
 80018a4:	45e6      	cmp	lr, ip
 80018a6:	d3fa      	bcc.n	800189e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xa8>
	  if (!(__first < __last))
 80018a8:	429e      	cmp	r6, r3
 80018aa:	d317      	bcc.n	80018dc <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe6>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80018ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80018ae:	4629      	mov	r1, r5
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	463a      	mov	r2, r7
 80018b4:	4630      	mov	r0, r6
 80018b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80018b8:	f7ff ff9d 	bl	80017f6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
      while (__last - __first > int(_S_threshold))
 80018bc:	4635      	mov	r5, r6
 80018be:	e7a4      	b.n	800180a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x14>
	  else if (__comp(__a, __c))
 80018c0:	4282      	cmp	r2, r0
 80018c2:	d905      	bls.n	80018d0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xda>
      __a = _GLIBCXX_MOVE(__b);
 80018c4:	7022      	strb	r2, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018c6:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 80018ca:	e7de      	b.n	800188a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__a, __c))
 80018cc:	4282      	cmp	r2, r0
 80018ce:	d902      	bls.n	80018d6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xe0>
      __a = _GLIBCXX_MOVE(__b);
 80018d0:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80018d2:	7063      	strb	r3, [r4, #1]
 80018d4:	e7d9      	b.n	800188a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x94>
      else if (__comp(__b, __c))
 80018d6:	428a      	cmp	r2, r1
 80018d8:	d9d5      	bls.n	8001886 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x90>
 80018da:	e7f3      	b.n	80018c4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0xce>
      __a = _GLIBCXX_MOVE(__b);
 80018dc:	f802 cc01 	strb.w	ip, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 80018e0:	7018      	strb	r0, [r3, #0]
	  while (__comp(__first, __pivot))
 80018e2:	e7d4      	b.n	800188e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_+0x98>

080018e4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>:
  // sort

  template<typename _RandomAccessIterator, typename _Compare>
    _GLIBCXX20_CONSTEXPR
    inline void
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80018e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e6:	b087      	sub	sp, #28
 80018e8:	ae02      	add	r6, sp, #8
	   _Compare __comp)
    {
      if (__first != __last)
 80018ea:	4288      	cmp	r0, r1
    __sort(_RandomAccessIterator __first, _RandomAccessIterator __last,
 80018ec:	4604      	mov	r4, r0
 80018ee:	460d      	mov	r5, r1
 80018f0:	e886 000c 	stmia.w	r6, {r2, r3}
      if (__first != __last)
 80018f4:	d02a      	beq.n	800194c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
	{
	  std::__introsort_loop(__first, __last,
				std::__lg(__last - __first) * 2,
 80018f6:	1a0f      	subs	r7, r1, r0

  /// This is a helper function for the sort routines and for random.tcc.
  //  Precondition: __n > 0.
  inline _GLIBCXX_CONSTEXPR int
  __lg(int __n)
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 80018f8:	fab7 f287 	clz	r2, r7
 80018fc:	f1c2 021f 	rsb	r2, r2, #31
	  std::__introsort_loop(__first, __last,
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	0052      	lsls	r2, r2, #1
 8001904:	9b02      	ldr	r3, [sp, #8]
 8001906:	f7ff ff76 	bl	80017f6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_T1_>
 800190a:	e896 0003 	ldmia.w	r6, {r0, r1}
 800190e:	ab04      	add	r3, sp, #16
      if (__last - __first > int(_S_threshold))
 8001910:	2f10      	cmp	r7, #16
 8001912:	e883 0003 	stmia.w	r3, {r0, r1}
 8001916:	dd14      	ble.n	8001942 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x5e>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8001918:	cb0c      	ldmia	r3, {r2, r3}
 800191a:	f104 0610 	add.w	r6, r4, #16
 800191e:	4631      	mov	r1, r6
 8001920:	4620      	mov	r0, r4
 8001922:	f7ff fee0 	bl	80016e6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8001926:	42b5      	cmp	r5, r6
 8001928:	d010      	beq.n	800194c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x68>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 800192a:	4633      	mov	r3, r6
	__val = _GLIBCXX_MOVE(*__last);
 800192c:	7832      	ldrb	r2, [r6, #0]
 800192e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
      while (__comp(__val, __next))
 8001932:	428a      	cmp	r2, r1
 8001934:	d202      	bcs.n	800193c <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x58>
	  *__last = _GLIBCXX_MOVE(*__next);
 8001936:	f803 1901 	strb.w	r1, [r3], #-1
      while (__comp(__val, __next))
 800193a:	e7f8      	b.n	800192e <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x4a>
      *__last = _GLIBCXX_MOVE(__val);
 800193c:	701a      	strb	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800193e:	3601      	adds	r6, #1
 8001940:	e7f1      	b.n	8001926 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_+0x42>
	std::__insertion_sort(__first, __last, __comp);
 8001942:	4629      	mov	r1, r5
 8001944:	cb0c      	ldmia	r3, {r2, r3}
 8001946:	4620      	mov	r0, r4
 8001948:	f7ff fecd 	bl	80016e6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
				__comp);
	  std::__final_insertion_sort(__first, __last, __comp);
	}
    }
 800194c:	b007      	add	sp, #28
 800194e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001950 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8001950:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8001952:	1e54      	subs	r4, r2, #1
 8001954:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8001958:	1065      	asrs	r5, r4, #1
 800195a:	460c      	mov	r4, r1
 800195c:	42a5      	cmp	r5, r4
 800195e:	dd13      	ble.n	8001988 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8001960:	1c67      	adds	r7, r4, #1
 8001962:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8001966:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8001968:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 800196c:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8001970:	f00c 0c03 	and.w	ip, ip, #3
 8001974:	f007 0703 	and.w	r7, r7, #3
 8001978:	45bc      	cmp	ip, r7
	    __secondChild--;
 800197a:	bf88      	it	hi
 800197c:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8001980:	5d87      	ldrb	r7, [r0, r6]
 8001982:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8001984:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8001986:	e7e9      	b.n	800195c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8001988:	07d5      	lsls	r5, r2, #31
 800198a:	d40d      	bmi.n	80019a8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 800198c:	3a02      	subs	r2, #2
 800198e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8001992:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8001996:	d107      	bne.n	80019a8 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 8001998:	1c62      	adds	r2, r4, #1
 800199a:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 800199c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80019a0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80019a4:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 80019a6:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 80019a8:	1e62      	subs	r2, r4, #1
 80019aa:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80019ae:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019b0:	f003 0603 	and.w	r6, r3, #3
 80019b4:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80019b6:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019ba:	da0b      	bge.n	80019d4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 80019bc:	5c84      	ldrb	r4, [r0, r2]
 80019be:	f004 0703 	and.w	r7, r4, #3
 80019c2:	42b7      	cmp	r7, r6
 80019c4:	d206      	bcs.n	80019d4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80019c6:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 80019c8:	1e54      	subs	r4, r2, #1
 80019ca:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80019ce:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80019d0:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80019d2:	e7ef      	b.n	80019b4 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80019d4:	702b      	strb	r3, [r5, #0]
    }
 80019d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019d8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80019d8:	b082      	sub	sp, #8
 80019da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019de:	4604      	mov	r4, r0
 80019e0:	460d      	mov	r5, r1
 80019e2:	4617      	mov	r7, r2
 80019e4:	b087      	sub	sp, #28
 80019e6:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80019e8:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 80019ec:	1b2e      	subs	r6, r5, r4
 80019ee:	2e10      	cmp	r6, #16
 80019f0:	dd29      	ble.n	8001a46 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 80019f2:	bb6f      	cbnz	r7, 8001a50 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 80019f4:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80019f8:	f10d 0808 	add.w	r8, sp, #8
 80019fc:	f10d 0910 	add.w	r9, sp, #16
 8001a00:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8001a04:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8001a08:	1eb7      	subs	r7, r6, #2
 8001a0a:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8001a0c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8001a10:	4632      	mov	r2, r6
 8001a12:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001a16:	5de3      	ldrb	r3, [r4, r7]
 8001a18:	4639      	mov	r1, r7
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f7ff ff98 	bl	8001950 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8001a20:	b10f      	cbz	r7, 8001a26 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8001a22:	3f01      	subs	r7, #1
      while (true)
 8001a24:	e7f2      	b.n	8001a0c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8001a26:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8001a2a:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8001a2c:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8001a2e:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8001a32:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8001a34:	e88d 0003 	stmia.w	sp, {r0, r1}
 8001a38:	4632      	mov	r2, r6
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f7ff ff87 	bl	8001950 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8001a42:	2e01      	cmp	r6, #1
 8001a44:	dcef      	bgt.n	8001a26 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 8001a46:	b007      	add	sp, #28
 8001a48:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a4c:	b002      	add	sp, #8
 8001a4e:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8001a50:	1076      	asrs	r6, r6, #1
 8001a52:	f894 e001 	ldrb.w	lr, [r4, #1]
 8001a56:	5da1      	ldrb	r1, [r4, r6]
 8001a58:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8001a5c:	f00e 0903 	and.w	r9, lr, #3
 8001a60:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8001a64:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8001a66:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8001a68:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001a6c:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8001a70:	d229      	bcs.n	8001ac6 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8001a72:	4594      	cmp	ip, r2
 8001a74:	d221      	bcs.n	8001aba <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 8001a76:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001a78:	55a3      	strb	r3, [r4, r6]
 8001a7a:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8001a7c:	462b      	mov	r3, r5
 8001a7e:	4616      	mov	r6, r2
 8001a80:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001a82:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8001a86:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8001a8a:	f00c 0003 	and.w	r0, ip, #3
 8001a8e:	4288      	cmp	r0, r1
 8001a90:	d3f5      	bcc.n	8001a7e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8001a92:	1e58      	subs	r0, r3, #1
 8001a94:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8001a96:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8001a9a:	f00e 0903 	and.w	r9, lr, #3
 8001a9e:	4549      	cmp	r1, r9
 8001aa0:	d3f8      	bcc.n	8001a94 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8001aa2:	429e      	cmp	r6, r3
 8001aa4:	d318      	bcc.n	8001ad8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8001aa6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001aa8:	4629      	mov	r1, r5
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	463a      	mov	r2, r7
 8001aae:	4630      	mov	r0, r6
 8001ab0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ab2:	f7ff ff91 	bl	80019d8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 8001ab6:	4635      	mov	r5, r6
 8001ab8:	e798      	b.n	80019ec <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8001aba:	4591      	cmp	r9, r2
 8001abc:	d205      	bcs.n	8001aca <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8001abe:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8001ac0:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 8001ac4:	e7d9      	b.n	8001a7a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 8001ac6:	4591      	cmp	r9, r2
 8001ac8:	d203      	bcs.n	8001ad2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8001aca:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8001ace:	7063      	strb	r3, [r4, #1]
 8001ad0:	e7d3      	b.n	8001a7a <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8001ad2:	4594      	cmp	ip, r2
 8001ad4:	d2cf      	bcs.n	8001a76 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 8001ad6:	e7f2      	b.n	8001abe <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8001ad8:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8001adc:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8001ae0:	e7cd      	b.n	8001a7e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08001ae2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:

		template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001ae2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ae6:	4604      	mov	r4, r0
 8001ae8:	b099      	sub	sp, #100	; 0x64
 8001aea:	4617      	mov	r7, r2
 8001aec:	4688      	mov	r8, r1
		{
			std::array<u8, sizeof...(filter_widthes)> priorities;

			[can2_start, &priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001aee:	688a      	ldr	r2, [r1, #8]
 8001af0:	4601      	mov	r1, r0
 8001af2:	2000      	movs	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8001af4:	461e      	mov	r6, r3
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8001af6:	f7ff fdeb 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001afa:	68ba      	ldr	r2, [r7, #8]
 8001afc:	4621      	mov	r1, r4
 8001afe:	9003      	str	r0, [sp, #12]
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff fde5 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b06:	68b2      	ldr	r2, [r6, #8]
 8001b08:	4621      	mov	r1, r4
 8001b0a:	9004      	str	r0, [sp, #16]
 8001b0c:	2002      	movs	r0, #2
 8001b0e:	f7ff fddf 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001b14:	4621      	mov	r1, r4
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	9005      	str	r0, [sp, #20]
 8001b1a:	2003      	movs	r0, #3
 8001b1c:	f7ff fdd8 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b20:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001b22:	4621      	mov	r1, r4
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	9006      	str	r0, [sp, #24]
 8001b28:	2004      	movs	r0, #4
 8001b2a:	f7ff fdd1 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b2e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001b30:	4621      	mov	r1, r4
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	9007      	str	r0, [sp, #28]
 8001b36:	2005      	movs	r0, #5
 8001b38:	f7ff fdca 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b3c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001b3e:	4621      	mov	r1, r4
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	900b      	str	r0, [sp, #44]	; 0x2c
 8001b44:	2006      	movs	r0, #6
 8001b46:	f7ff fdc3 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001b4c:	4683      	mov	fp, r0
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	4621      	mov	r1, r4
 8001b52:	2007      	movs	r0, #7
 8001b54:	f7ff fdbc 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b58:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001b5a:	4682      	mov	sl, r0
 8001b5c:	689a      	ldr	r2, [r3, #8]
 8001b5e:	4621      	mov	r1, r4
 8001b60:	2008      	movs	r0, #8
 8001b62:	f7ff fdb5 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001b68:	4681      	mov	r9, r0
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4621      	mov	r1, r4
 8001b6e:	2009      	movs	r0, #9
 8001b70:	f7ff fdae 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b74:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001b76:	4621      	mov	r1, r4
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	9008      	str	r0, [sp, #32]
 8001b7c:	200a      	movs	r0, #10
 8001b7e:	f7ff fda7 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b82:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001b84:	4621      	mov	r1, r4
 8001b86:	9009      	str	r0, [sp, #36]	; 0x24
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	200b      	movs	r0, #11
 8001b8c:	f7ff fda0 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b90:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001b92:	4621      	mov	r1, r4
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	900a      	str	r0, [sp, #40]	; 0x28
 8001b98:	200c      	movs	r0, #12
 8001b9a:	f7ff fd99 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001b9e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8001ba0:	4605      	mov	r5, r0
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	200d      	movs	r0, #13
 8001ba8:	f7ff fd92 	bl	80016d0 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp19convert_to_priorityILNS0_11FilterWidthE0ELNS0_10FilterModeE1EEEhhhRKNS2_15ConfigFilterArgIXT_EXT0_EEE.isra.0>
 8001bac:	9b03      	ldr	r3, [sp, #12]
 8001bae:	f88d 005d 	strb.w	r0, [sp, #93]	; 0x5d
 8001bb2:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 8001bb6:	9b04      	ldr	r3, [sp, #16]
 8001bb8:	f88d b056 	strb.w	fp, [sp, #86]	; 0x56
 8001bbc:	f88d 3051 	strb.w	r3, [sp, #81]	; 0x51
 8001bc0:	9b05      	ldr	r3, [sp, #20]
 8001bc2:	f88d a057 	strb.w	sl, [sp, #87]	; 0x57
 8001bc6:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
 8001bca:	9b06      	ldr	r3, [sp, #24]
 8001bcc:	f88d 9058 	strb.w	r9, [sp, #88]	; 0x58
 8001bd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001bd4:	9b07      	ldr	r3, [sp, #28]
 8001bd6:	f88d 505c 	strb.w	r5, [sp, #92]	; 0x5c
 8001bda:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 8001bde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	    typename iterator_traits<_RandomAccessIterator>::value_type,
	    typename iterator_traits<_RandomAccessIterator>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);
      __glibcxx_requires_irreflexive_pred(__first, __last, __comp);

      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8001be0:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001be4:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
 8001be8:	9b08      	ldr	r3, [sp, #32]
 8001bea:	a814      	add	r0, sp, #80	; 0x50
 8001bec:	f88d 3059 	strb.w	r3, [sp, #89]	; 0x59
 8001bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001bf2:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
 8001bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001bf8:	f88d 305b 	strb.w	r3, [sp, #91]	; 0x5b
 8001bfc:	f04f 0300 	mov.w	r3, #0
 8001c00:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
 8001c04:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    {
      _Compare _M_comp;

      explicit _GLIBCXX14_CONSTEXPR
      _Iter_comp_iter(_Compare __comp)
	: _M_comp(_GLIBCXX_MOVE(__comp))
 8001c08:	ab12      	add	r3, sp, #72	; 0x48
 8001c0a:	930e      	str	r3, [sp, #56]	; 0x38
 8001c0c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001c0e:	ab10      	add	r3, sp, #64	; 0x40
 8001c10:	930f      	str	r3, [sp, #60]	; 0x3c
 8001c12:	f7ff fe67 	bl	80018e4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
	     typename _Comp = ranges::less, typename _Proj = identity>
      requires sortable<iterator_t<_Range>, _Comp, _Proj>
      constexpr borrowed_iterator_t<_Range>
      operator()(_Range&& __r, _Comp __comp = {}, _Proj __proj = {}) const
      {
	return (*this)(ranges::begin(__r), ranges::end(__r),
 8001c16:	2200      	movs	r2, #0
			
			std::ranges::sort(priorities);

			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
			{
				for(u32 i = 0; auto& priority : priorities)
 8001c18:	2100      	movs	r1, #0
 8001c1a:	a814      	add	r0, sp, #80	; 0x50
				{
					priority |= (i << 6);
 8001c1c:	7803      	ldrb	r3, [r0, #0]
 8001c1e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	f800 3b01 	strb.w	r3, [r0], #1
					++i;

					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8001c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001c2c:	4293      	cmp	r3, r2
					++i;
 8001c2e:	f101 0101 	add.w	r1, r1, #1
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8001c32:	d001      	beq.n	8001c38 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x156>
				for(u32 i = 0; auto& priority : priorities)
 8001c34:	290e      	cmp	r1, #14
 8001c36:	d1f1      	bne.n	8001c1c <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x13a>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8001c38:	3210      	adds	r2, #16
 8001c3a:	2a40      	cmp	r2, #64	; 0x40
 8001c3c:	d1ec      	bne.n	8001c18 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x136>
      _GLIBCXX17_CONSTEXPR const_iterator
      begin() const noexcept
      { return const_iterator(data()); }

      _GLIBCXX17_CONSTEXPR iterator
      end() noexcept
 8001c3e:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8001c42:	ad0d      	add	r5, sp, #52	; 0x34
 8001c44:	ac0c      	add	r4, sp, #48	; 0x30
 8001c46:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8001c4a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 8001c4e:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001c52:	462b      	mov	r3, r5
 8001c54:	a814      	add	r0, sp, #80	; 0x50
 8001c56:	2206      	movs	r2, #6
 8001c58:	9400      	str	r4, [sp, #0]
 8001c5a:	9510      	str	r5, [sp, #64]	; 0x40
 8001c5c:	9411      	str	r4, [sp, #68]	; 0x44
 8001c5e:	f7ff febb 	bl	80019d8 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
	std::__insertion_sort(__first, __last, __comp);
 8001c62:	4623      	mov	r3, r4
 8001c64:	462a      	mov	r2, r5
 8001c66:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
 8001c6a:	a814      	add	r0, sp, #80	; 0x50
 8001c6c:	e9cd 5412 	strd	r5, r4, [sp, #72]	; 0x48
 8001c70:	f7ff fd5c 	bl	800172c <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0ELSF_0EEJLNS9_10FilterModeE1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1ELSG_1EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>

			std::ranges::sort(priorities, {}, [](const auto priority){return priority & 0b11;});

			[&priorities, &filter_args...]<u8 ... indices>(std::integer_sequence<u8, indices ...>) noexcept
			{
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8001c74:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8001c78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8001c7a:	099b      	lsrs	r3, r3, #6
 8001c7c:	f8c8 300c 	str.w	r3, [r8, #12]
 8001c80:	f89d 3051 	ldrb.w	r3, [sp, #81]	; 0x51
 8001c84:	099b      	lsrs	r3, r3, #6
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	f89d 3052 	ldrb.w	r3, [sp, #82]	; 0x52
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	60f3      	str	r3, [r6, #12]
 8001c90:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	60d3      	str	r3, [r2, #12]
 8001c98:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8001c9c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001c9e:	099b      	lsrs	r3, r3, #6
 8001ca0:	60d3      	str	r3, [r2, #12]
 8001ca2:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
 8001ca6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001ca8:	099b      	lsrs	r3, r3, #6
 8001caa:	60d3      	str	r3, [r2, #12]
 8001cac:	f89d 3056 	ldrb.w	r3, [sp, #86]	; 0x56
 8001cb0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001cb2:	099b      	lsrs	r3, r3, #6
 8001cb4:	60d3      	str	r3, [r2, #12]
 8001cb6:	f89d 3057 	ldrb.w	r3, [sp, #87]	; 0x57
 8001cba:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001cbc:	099b      	lsrs	r3, r3, #6
 8001cbe:	60d3      	str	r3, [r2, #12]
 8001cc0:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8001cc4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	60d3      	str	r3, [r2, #12]
 8001cca:	f89d 3059 	ldrb.w	r3, [sp, #89]	; 0x59
 8001cce:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001cd0:	099b      	lsrs	r3, r3, #6
 8001cd2:	60d3      	str	r3, [r2, #12]
 8001cd4:	f89d 305a 	ldrb.w	r3, [sp, #90]	; 0x5a
 8001cd8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	60d3      	str	r3, [r2, #12]
 8001cde:	f89d 305b 	ldrb.w	r3, [sp, #91]	; 0x5b
 8001ce2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 8001ce4:	099b      	lsrs	r3, r3, #6
 8001ce6:	60d3      	str	r3, [r2, #12]
 8001ce8:	f89d 305c 	ldrb.w	r3, [sp, #92]	; 0x5c
 8001cec:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 8001cee:	099b      	lsrs	r3, r3, #6
 8001cf0:	60d3      	str	r3, [r2, #12]
 8001cf2:	f89d 305d 	ldrb.w	r3, [sp, #93]	; 0x5d
 8001cf6:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8001cf8:	099b      	lsrs	r3, r3, #6
 8001cfa:	60d3      	str	r3, [r2, #12]
			}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>());
		}
 8001cfc:	b019      	add	sp, #100	; 0x64
 8001cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001d04 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
			clear_bit(bxcan->FA1R, bit_position);
		}
	}

	template<FilterWidth ... filter_widthes, FilterMode ... filter_modes>
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d08:	460e      	mov	r6, r1
 8001d0a:	b091      	sub	sp, #68	; 0x44
	requires (sizeof...(filter_args) <= Config::filter_bank_total_size)
	{
		// assign FMI.
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d0c:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d10:	9f24      	ldr	r7, [sp, #144]	; 0x90
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d12:	f8cd c014 	str.w	ip, [sp, #20]
 8001d16:	f8dd c078 	ldr.w	ip, [sp, #120]	; 0x78
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d1a:	e9dd ba20 	ldrd	fp, sl, [sp, #128]	; 0x80
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d1e:	f8cd c010 	str.w	ip, [sp, #16]
 8001d22:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d26:	e9dd 9822 	ldrd	r9, r8, [sp, #136]	; 0x88
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d2a:	f8cd c00c 	str.w	ip, [sp, #12]
 8001d2e:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
 8001d32:	e9cd a907 	strd	sl, r9, [sp, #28]
 8001d36:	f8cd c008 	str.w	ip, [sp, #8]
 8001d3a:	f8dd c06c 	ldr.w	ip, [sp, #108]	; 0x6c
 8001d3e:	f8cd b018 	str.w	fp, [sp, #24]
 8001d42:	f8cd c004 	str.w	ip, [sp, #4]
 8001d46:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d4a:	4615      	mov	r5, r2
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d4c:	f8cd c000 	str.w	ip, [sp]
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8001d50:	461c      	mov	r4, r3
 8001d52:	900d      	str	r0, [sp, #52]	; 0x34
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8001d54:	e9cd 8709 	strd	r8, r7, [sp, #36]	; 0x24
 8001d58:	f7ff fec3 	bl	8001ae2 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0ELS6_0EEJLNS0_10FilterModeE1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1ELS7_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		bit &= ~reg;
	}

	inline constexpr void set_bit(volatile auto& bit, const auto reg)
	{
		bit = bit | reg;
 8001d5c:	4bd1      	ldr	r3, [pc, #836]	; (80020a4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a0>)
 8001d5e:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001d62:	f042 0201 	orr.w	r2, r2, #1
 8001d66:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit & ~reg;
 8001d6a:	f8d3 2600 	ldr.w	r2, [r3, #1536]	; 0x600
 8001d6e:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8001d72:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
		bit = bit | reg;
 8001d76:	f8d3 0600 	ldr.w	r0, [r3, #1536]	; 0x600
 8001d7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001d7c:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8001d80:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001d84:	6871      	ldr	r1, [r6, #4]
 8001d86:	6830      	ldr	r0, [r6, #0]
 8001d88:	aa0e      	add	r2, sp, #56	; 0x38
 8001d8a:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001d8c:	4ac6      	ldr	r2, [pc, #792]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001d8e:	f8c2 0240 	str.w	r0, [r2, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001d92:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8001d94:	f8c2 1244 	str.w	r1, [r2, #580]	; 0x244
 8001d98:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001d9c:	f042 0201 	orr.w	r2, r2, #1
 8001da0:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001da4:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001db0:	68b2      	ldr	r2, [r6, #8]
 8001db2:	2a00      	cmp	r2, #0
 8001db4:	f040 827d 	bne.w	80022b2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ae>
		bit = bit & ~reg;
 8001db8:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
		bit = bit | reg;
 8001dc0:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001dc4:	7c32      	ldrb	r2, [r6, #16]
 8001dc6:	2a00      	cmp	r2, #0
 8001dc8:	f000 8278 	beq.w	80022bc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5b8>
 8001dcc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
		bit = bit & ~reg;
 8001dd4:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001dd8:	6828      	ldr	r0, [r5, #0]
 8001dda:	6869      	ldr	r1, [r5, #4]
 8001ddc:	ab0e      	add	r3, sp, #56	; 0x38
 8001dde:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001de0:	4bb1      	ldr	r3, [pc, #708]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001de2:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001de6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001de8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001dec:	f8c3 264c 	str.w	r2, [r3, #1612]	; 0x64c
 8001df0:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001df4:	f042 0202 	orr.w	r2, r2, #2
 8001df8:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001dfc:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001e00:	f042 0202 	orr.w	r2, r2, #2
 8001e04:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001e08:	68aa      	ldr	r2, [r5, #8]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	f040 825b 	bne.w	80022c6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5c2>
		bit = bit & ~reg;
 8001e10:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001e14:	f022 0202 	bic.w	r2, r2, #2
		bit = bit | reg;
 8001e18:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001e1c:	7c2a      	ldrb	r2, [r5, #16]
 8001e1e:	2a00      	cmp	r2, #0
 8001e20:	f000 8256 	beq.w	80022d0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5cc>
 8001e24:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001e28:	f042 0202 	orr.w	r2, r2, #2
		bit = bit & ~reg;
 8001e2c:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001e30:	6820      	ldr	r0, [r4, #0]
 8001e32:	6861      	ldr	r1, [r4, #4]
 8001e34:	ab0e      	add	r3, sp, #56	; 0x38
 8001e36:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001e38:	4b9b      	ldr	r3, [pc, #620]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001e3a:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001e3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001e40:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e44:	f8c3 2654 	str.w	r2, [r3, #1620]	; 0x654
 8001e48:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001e54:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001e58:	f042 0204 	orr.w	r2, r2, #4
 8001e5c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001e60:	68a2      	ldr	r2, [r4, #8]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	f040 8239 	bne.w	80022da <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5d6>
		bit = bit & ~reg;
 8001e68:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001e6c:	f022 0204 	bic.w	r2, r2, #4
		bit = bit | reg;
 8001e70:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001e74:	7c22      	ldrb	r2, [r4, #16]
 8001e76:	2a00      	cmp	r2, #0
 8001e78:	f000 8234 	beq.w	80022e4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5e0>
 8001e7c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001e80:	f042 0204 	orr.w	r2, r2, #4
		bit = bit & ~reg;
 8001e84:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001e88:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001e8a:	ab0e      	add	r3, sp, #56	; 0x38
 8001e8c:	6810      	ldr	r0, [r2, #0]
 8001e8e:	6851      	ldr	r1, [r2, #4]
 8001e90:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001e92:	4b85      	ldr	r3, [pc, #532]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001e94:	f8c3 0258 	str.w	r0, [r3, #600]	; 0x258
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001e98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001e9a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001e9e:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
 8001ea2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001ea6:	f042 0208 	orr.w	r2, r2, #8
 8001eaa:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001eae:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001eb2:	f042 0208 	orr.w	r2, r2, #8
 8001eb6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001eba:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001ebc:	6892      	ldr	r2, [r2, #8]
 8001ebe:	2a00      	cmp	r2, #0
 8001ec0:	f040 8215 	bne.w	80022ee <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5ea>
		bit = bit & ~reg;
 8001ec4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
		bit = bit | reg;
 8001ecc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001ed0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8001ed2:	7c12      	ldrb	r2, [r2, #16]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	f000 820f 	beq.w	80022f8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5f4>
 8001eda:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001ede:	f042 0208 	orr.w	r2, r2, #8
		bit = bit & ~reg;
 8001ee2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001ee6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001ee8:	ab0e      	add	r3, sp, #56	; 0x38
 8001eea:	6810      	ldr	r0, [r2, #0]
 8001eec:	6851      	ldr	r1, [r2, #4]
 8001eee:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001ef0:	4b6d      	ldr	r3, [pc, #436]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001ef2:	f8c3 0260 	str.w	r0, [r3, #608]	; 0x260
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001ef6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001ef8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001efc:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
 8001f00:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001f04:	f042 0210 	orr.w	r2, r2, #16
 8001f08:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001f0c:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001f10:	f042 0210 	orr.w	r2, r2, #16
 8001f14:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001f18:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001f1a:	6892      	ldr	r2, [r2, #8]
 8001f1c:	2a00      	cmp	r2, #0
 8001f1e:	f040 81f0 	bne.w	8002302 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x5fe>
		bit = bit & ~reg;
 8001f22:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001f26:	f022 0210 	bic.w	r2, r2, #16
		bit = bit | reg;
 8001f2a:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001f2e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001f30:	7c12      	ldrb	r2, [r2, #16]
 8001f32:	2a00      	cmp	r2, #0
 8001f34:	f000 81ea 	beq.w	800230c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x608>
 8001f38:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001f3c:	f042 0210 	orr.w	r2, r2, #16
		bit = bit & ~reg;
 8001f40:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001f44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f46:	ab0e      	add	r3, sp, #56	; 0x38
 8001f48:	6810      	ldr	r0, [r2, #0]
 8001f4a:	6851      	ldr	r1, [r2, #4]
 8001f4c:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001f50:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001f54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001f56:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001f5a:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
 8001f5e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001f62:	f042 0220 	orr.w	r2, r2, #32
 8001f66:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001f6a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001f6e:	f042 0220 	orr.w	r2, r2, #32
 8001f72:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001f76:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f78:	6892      	ldr	r2, [r2, #8]
 8001f7a:	2a00      	cmp	r2, #0
 8001f7c:	f040 81cb 	bne.w	8002316 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x612>
		bit = bit & ~reg;
 8001f80:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001f84:	f022 0220 	bic.w	r2, r2, #32
		bit = bit | reg;
 8001f88:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001f8c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001f8e:	7c12      	ldrb	r2, [r2, #16]
 8001f90:	2a00      	cmp	r2, #0
 8001f92:	f000 81c5 	beq.w	8002320 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x61c>
 8001f96:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001f9a:	f042 0220 	orr.w	r2, r2, #32
		bit = bit & ~reg;
 8001f9e:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8001fa2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001fa4:	ab0e      	add	r3, sp, #56	; 0x38
 8001fa6:	6810      	ldr	r0, [r2, #0]
 8001fa8:	6851      	ldr	r1, [r2, #4]
 8001faa:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8001fac:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 8001fae:	f8c3 0270 	str.w	r0, [r3, #624]	; 0x270
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8001fb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8001fb4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001fb8:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
 8001fbc:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8001fc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fc4:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8001fc8:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8001fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd0:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8001fd4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001fd6:	6892      	ldr	r2, [r2, #8]
 8001fd8:	2a00      	cmp	r2, #0
 8001fda:	f040 81a6 	bne.w	800232a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x626>
		bit = bit & ~reg;
 8001fde:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8001fe2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
		bit = bit | reg;
 8001fe6:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8001fea:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001fec:	7c12      	ldrb	r2, [r2, #16]
 8001fee:	2a00      	cmp	r2, #0
 8001ff0:	f000 81a0 	beq.w	8002334 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x630>
 8001ff4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8001ff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		bit = bit & ~reg;
 8001ffc:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002000:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002002:	ab0e      	add	r3, sp, #56	; 0x38
 8002004:	6810      	ldr	r0, [r2, #0]
 8002006:	6851      	ldr	r1, [r2, #4]
 8002008:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800200c:	f8c3 0278 	str.w	r0, [r3, #632]	; 0x278
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002010:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002012:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002016:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
 800201a:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800201e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002022:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002026:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800202a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202e:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002032:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8002034:	6892      	ldr	r2, [r2, #8]
 8002036:	2a00      	cmp	r2, #0
 8002038:	f040 8181 	bne.w	800233e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x63a>
		bit = bit & ~reg;
 800203c:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002040:	f022 0280 	bic.w	r2, r2, #128	; 0x80
		bit = bit | reg;
 8002044:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002048:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800204a:	7c12      	ldrb	r2, [r2, #16]
 800204c:	2a00      	cmp	r2, #0
 800204e:	f000 817b 	beq.w	8002348 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x644>
 8002052:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
		bit = bit & ~reg;
 800205a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 800205e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002060:	ab0e      	add	r3, sp, #56	; 0x38
 8002062:	6810      	ldr	r0, [r2, #0]
 8002064:	6851      	ldr	r1, [r2, #4]
 8002066:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a4>)
 800206a:	f8c3 0280 	str.w	r0, [r3, #640]	; 0x280
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 800206e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002070:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8002074:	f8c3 2684 	str.w	r2, [r3, #1668]	; 0x684
 8002078:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 800207c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002080:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 8002084:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800208c:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002090:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8002092:	6892      	ldr	r2, [r2, #8]
 8002094:	2a00      	cmp	r2, #0
 8002096:	f040 815c 	bne.w	8002352 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x64e>
		bit = bit & ~reg;
 800209a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800209e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020a2:	e003      	b.n	80020ac <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
 80020a4:	40006000 	.word	0x40006000
 80020a8:	40006400 	.word	0x40006400
		bit = bit | reg;
 80020ac:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80020b0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80020b2:	7c12      	ldrb	r2, [r2, #16]
 80020b4:	2a00      	cmp	r2, #0
 80020b6:	f000 8151 	beq.w	800235c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x658>
 80020ba:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80020be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
		bit = bit & ~reg;
 80020c2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80020c6:	f8db 0000 	ldr.w	r0, [fp]
 80020ca:	f8db 1004 	ldr.w	r1, [fp, #4]
 80020ce:	ab0e      	add	r3, sp, #56	; 0x38
 80020d0:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80020d2:	4bbe      	ldr	r3, [pc, #760]	; (80023cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80020d4:	f8c3 0288 	str.w	r0, [r3, #648]	; 0x288
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80020d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80020da:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80020de:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
 80020e2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80020e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ea:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80020ee:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80020fa:	f8db 2008 	ldr.w	r2, [fp, #8]
 80020fe:	2a00      	cmp	r2, #0
 8002100:	f040 8131 	bne.w	8002366 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x662>
		bit = bit & ~reg;
 8002104:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002108:	f422 7200 	bic.w	r2, r2, #512	; 0x200
		bit = bit | reg;
 800210c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002110:	f89b 2010 	ldrb.w	r2, [fp, #16]
 8002114:	2a00      	cmp	r2, #0
 8002116:	f000 812b 	beq.w	8002370 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x66c>
 800211a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
		bit = bit & ~reg;
 8002122:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002126:	f8da 0000 	ldr.w	r0, [sl]
 800212a:	f8da 1004 	ldr.w	r1, [sl, #4]
 800212e:	ab0e      	add	r3, sp, #56	; 0x38
 8002130:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002132:	4ba6      	ldr	r3, [pc, #664]	; (80023cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002134:	f8c3 0290 	str.w	r0, [r3, #656]	; 0x290
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002138:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800213a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800213e:	f8c3 2694 	str.w	r2, [r3, #1684]	; 0x694
 8002142:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002146:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800214a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800214e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002152:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002156:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800215a:	f8da 2008 	ldr.w	r2, [sl, #8]
 800215e:	2a00      	cmp	r2, #0
 8002160:	f040 810b 	bne.w	800237a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x676>
		bit = bit & ~reg;
 8002164:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
		bit = bit | reg;
 800216c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002170:	f89a 2010 	ldrb.w	r2, [sl, #16]
 8002174:	2a00      	cmp	r2, #0
 8002176:	f000 8105 	beq.w	8002384 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x680>
 800217a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800217e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
		bit = bit & ~reg;
 8002182:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002186:	f8d9 0000 	ldr.w	r0, [r9]
 800218a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800218e:	ab0e      	add	r3, sp, #56	; 0x38
 8002190:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8002192:	4b8e      	ldr	r3, [pc, #568]	; (80023cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002194:	f8c3 0298 	str.w	r0, [r3, #664]	; 0x298
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 800219a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800219e:	f8c3 269c 	str.w	r2, [r3, #1692]	; 0x69c
 80021a2:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 80021a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021aa:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 80021ae:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 80021b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021b6:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 80021ba:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80021be:	2a00      	cmp	r2, #0
 80021c0:	f040 80e5 	bne.w	800238e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x68a>
		bit = bit & ~reg;
 80021c4:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80021c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
		bit = bit | reg;
 80021cc:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 80021d0:	f899 2010 	ldrb.w	r2, [r9, #16]
 80021d4:	2a00      	cmp	r2, #0
 80021d6:	f000 80df 	beq.w	8002398 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x694>
 80021da:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80021de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
		bit = bit & ~reg;
 80021e2:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 80021e6:	f8d8 0000 	ldr.w	r0, [r8]
 80021ea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80021ee:	ab0e      	add	r3, sp, #56	; 0x38
 80021f0:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 80021f2:	4b76      	ldr	r3, [pc, #472]	; (80023cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 80021f4:	f8c3 02a0 	str.w	r0, [r3, #672]	; 0x2a0
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 80021f8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 80021fa:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80021fe:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
 8002202:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800220a:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800220e:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 8002212:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002216:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 800221a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 800221e:	2a00      	cmp	r2, #0
 8002220:	f040 80bf 	bne.w	80023a2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x69e>
		bit = bit & ~reg;
 8002224:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002228:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
		bit = bit | reg;
 800222c:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 8002230:	f898 2010 	ldrb.w	r2, [r8, #16]
 8002234:	2a00      	cmp	r2, #0
 8002236:	f000 80b9 	beq.w	80023ac <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6a8>
 800223a:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800223e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
		bit = bit & ~reg;
 8002242:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8002246:	6838      	ldr	r0, [r7, #0]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	ab0e      	add	r3, sp, #56	; 0x38
 800224c:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 800224e:	4b5f      	ldr	r3, [pc, #380]	; (80023cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6c8>)
 8002250:	f8c3 02a8 	str.w	r0, [r3, #680]	; 0x2a8
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8002254:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
		bit = bit | reg;
 8002256:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800225a:	f8c3 26ac 	str.w	r2, [r3, #1708]	; 0x6ac
 800225e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002262:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002266:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
 800226a:	f8d3 2604 	ldr.w	r2, [r3, #1540]	; 0x604
 800226e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002272:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8002276:	68ba      	ldr	r2, [r7, #8]
 8002278:	2a00      	cmp	r2, #0
 800227a:	f040 809c 	bne.w	80023b6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6b2>
		bit = bit & ~reg;
 800227e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
		bit = bit | reg;
 8002286:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
		if(filter_arg.activate)
 800228a:	7c3a      	ldrb	r2, [r7, #16]
 800228c:	2a00      	cmp	r2, #0
 800228e:	f000 8097 	beq.w	80023c0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6bc>
 8002292:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002296:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		bit = bit & ~reg;
 800229a:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 800229e:	4a4c      	ldr	r2, [pc, #304]	; (80023d0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x6cc>)
 80022a0:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
			(per_filter_arg<indices>(bxcan1, filter_args), ...);
		}(std::make_integer_sequence<u8, sizeof...(filter_widthes)>(), filter_args ...);

		// clear FINIT
		clear_bit(bxcan1->FMR, CAN_FMR_FINIT);
	}
 80022ac:	b011      	add	sp, #68	; 0x44
 80022ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		bit = bit | reg;
 80022b2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022b6:	f042 0201 	orr.w	r2, r2, #1
 80022ba:	e581      	b.n	8001dc0 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xbc>
		bit = bit & ~reg;
 80022bc:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022c0:	f022 0201 	bic.w	r2, r2, #1
 80022c4:	e586      	b.n	8001dd4 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd0>
		bit = bit | reg;
 80022c6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022ca:	f042 0202 	orr.w	r2, r2, #2
 80022ce:	e5a3      	b.n	8001e18 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x114>
		bit = bit & ~reg;
 80022d0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022d4:	f022 0202 	bic.w	r2, r2, #2
 80022d8:	e5a8      	b.n	8001e2c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x128>
		bit = bit | reg;
 80022da:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022de:	f042 0204 	orr.w	r2, r2, #4
 80022e2:	e5c5      	b.n	8001e70 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x16c>
		bit = bit & ~reg;
 80022e4:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022e8:	f022 0204 	bic.w	r2, r2, #4
 80022ec:	e5ca      	b.n	8001e84 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x180>
		bit = bit | reg;
 80022ee:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80022f2:	f042 0208 	orr.w	r2, r2, #8
 80022f6:	e5e9      	b.n	8001ecc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1c8>
		bit = bit & ~reg;
 80022f8:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80022fc:	f022 0208 	bic.w	r2, r2, #8
 8002300:	e5ef      	b.n	8001ee2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x1de>
		bit = bit | reg;
 8002302:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002306:	f042 0210 	orr.w	r2, r2, #16
 800230a:	e60e      	b.n	8001f2a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x226>
		bit = bit & ~reg;
 800230c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002310:	f022 0210 	bic.w	r2, r2, #16
 8002314:	e614      	b.n	8001f40 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x23c>
		bit = bit | reg;
 8002316:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800231a:	f042 0220 	orr.w	r2, r2, #32
 800231e:	e633      	b.n	8001f88 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x284>
		bit = bit & ~reg;
 8002320:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002324:	f022 0220 	bic.w	r2, r2, #32
 8002328:	e639      	b.n	8001f9e <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x29a>
		bit = bit | reg;
 800232a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800232e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002332:	e658      	b.n	8001fe6 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2e2>
		bit = bit & ~reg;
 8002334:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800233c:	e65e      	b.n	8001ffc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x2f8>
		bit = bit | reg;
 800233e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002342:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002346:	e67d      	b.n	8002044 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x340>
		bit = bit & ~reg;
 8002348:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	e683      	b.n	800205a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x356>
		bit = bit | reg;
 8002352:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800235a:	e6a7      	b.n	80020ac <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3a8>
		bit = bit & ~reg;
 800235c:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002360:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002364:	e6ad      	b.n	80020c2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x3be>
		bit = bit | reg;
 8002366:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800236a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236e:	e6cd      	b.n	800210c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x408>
		bit = bit & ~reg;
 8002370:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002374:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002378:	e6d3      	b.n	8002122 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x41e>
		bit = bit | reg;
 800237a:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 800237e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002382:	e6f3      	b.n	800216c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x468>
		bit = bit & ~reg;
 8002384:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 8002388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238c:	e6f9      	b.n	8002182 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x47e>
		bit = bit | reg;
 800238e:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 8002392:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002396:	e719      	b.n	80021cc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4c8>
		bit = bit & ~reg;
 8002398:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 800239c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023a0:	e71f      	b.n	80021e2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x4de>
		bit = bit | reg;
 80023a2:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80023a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80023aa:	e73f      	b.n	800222c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x528>
		bit = bit & ~reg;
 80023ac:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80023b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80023b4:	e745      	b.n	8002242 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x53e>
		bit = bit | reg;
 80023b6:	f8d3 2614 	ldr.w	r2, [r3, #1556]	; 0x614
 80023ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023be:	e762      	b.n	8002286 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x582>
		bit = bit & ~reg;
 80023c0:	f8d3 261c 	ldr.w	r2, [r3, #1564]	; 0x61c
 80023c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023c8:	e767      	b.n	800229a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x596>
 80023ca:	bf00      	nop
 80023cc:	40006400 	.word	0x40006400
 80023d0:	40006000 	.word	0x40006000

080023d4 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_>:
				const auto&& expr = (n + end - begin) % n;
				return expr ? expr : n;
			}
		}

		constexpr void push(const Elem& x) noexcept override
 80023d4:	b530      	push	{r4, r5, lr}
		{
			if(end == n) end = begin;
 80023d6:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74

			buffer[end] = x;
 80023da:	240b      	movs	r4, #11
			if(end == n) end = begin;
 80023dc:	2b0a      	cmp	r3, #10
 80023de:	bf08      	it	eq
 80023e0:	6782      	streq	r2, [r0, #120]	; 0x78
			buffer[end] = x;
 80023e2:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80023e4:	680d      	ldr	r5, [r1, #0]
			
			if(end == n - 1) end = 0;
 80023e6:	2b09      	cmp	r3, #9
			buffer[end] = x;
 80023e8:	fb04 0403 	mla	r4, r4, r3, r0
			if(end == n - 1) end = 0;
 80023ec:	bf08      	it	eq
 80023ee:	2300      	moveq	r3, #0
			buffer[end] = x;
 80023f0:	6065      	str	r5, [r4, #4]
 80023f2:	684d      	ldr	r5, [r1, #4]
			else ++end;
 80023f4:	bf18      	it	ne
 80023f6:	3301      	addne	r3, #1
			buffer[end] = x;
 80023f8:	60a5      	str	r5, [r4, #8]
 80023fa:	890d      	ldrh	r5, [r1, #8]

			if(begin == end)
 80023fc:	429a      	cmp	r2, r3
			buffer[end] = x;
 80023fe:	81a5      	strh	r5, [r4, #12]
 8002400:	7a89      	ldrb	r1, [r1, #10]
 8002402:	73a1      	strb	r1, [r4, #14]
 8002404:	6783      	str	r3, [r0, #120]	; 0x78
			if(begin == end)
 8002406:	d105      	bne.n	8002414 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4pushERKS3_+0x40>
			{
				if(begin == n - 1) begin = 0;
 8002408:	2a09      	cmp	r2, #9
 800240a:	bf0b      	itete	eq
 800240c:	2300      	moveq	r3, #0
				else ++begin;
 800240e:	3201      	addne	r2, #1
				if(begin == n - 1) begin = 0;
 8002410:	6743      	streq	r3, [r0, #116]	; 0x74
				else ++begin;
 8002412:	6742      	strne	r2, [r0, #116]	; 0x74
			}
		}
 8002414:	bd30      	pop	{r4, r5, pc}

08002416 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_>:
		constexpr void push(const Elem& x) noexcept override
 8002416:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n) end = begin;
 8002418:	e9d0 c379 	ldrd	ip, r3, [r0, #484]	; 0x1e4
			buffer[end] = x;
 800241c:	2418      	movs	r4, #24
			if(end == n) end = begin;
 800241e:	2b14      	cmp	r3, #20
 8002420:	bf08      	it	eq
 8002422:	f8c0 c1e8 	streq.w	ip, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 8002426:	460d      	mov	r5, r1
			buffer[end] = x;
 8002428:	f8d0 71e8 	ldr.w	r7, [r0, #488]	; 0x1e8
		constexpr void push(const Elem& x) noexcept override
 800242c:	4606      	mov	r6, r0
			if(end == n - 1) end = 0;
 800242e:	2f13      	cmp	r7, #19
			buffer[end] = x;
 8002430:	fb04 0407 	mla	r4, r4, r7, r0
 8002434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
			if(end == n - 1) end = 0;
 8002436:	bf08      	it	eq
 8002438:	2700      	moveq	r7, #0
			buffer[end] = x;
 800243a:	f104 0404 	add.w	r4, r4, #4
 800243e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
			else ++end;
 8002440:	bf18      	it	ne
 8002442:	3701      	addne	r7, #1
			if(begin == end)
 8002444:	45bc      	cmp	ip, r7
			buffer[end] = x;
 8002446:	e895 0003 	ldmia.w	r5, {r0, r1}
 800244a:	e884 0003 	stmia.w	r4, {r0, r1}
 800244e:	f8c6 71e8 	str.w	r7, [r6, #488]	; 0x1e8
			if(begin == end)
 8002452:	d107      	bne.n	8002464 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4pushERKS3_+0x4e>
				if(begin == n - 1) begin = 0;
 8002454:	f1bc 0f13 	cmp.w	ip, #19
 8002458:	bf0c      	ite	eq
 800245a:	2300      	moveq	r3, #0
				else ++begin;
 800245c:	f10c 0301 	addne.w	r3, ip, #1
 8002460:	f8c6 31e4 	str.w	r3, [r6, #484]	; 0x1e4
		}
 8002464:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002466 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv>:
			if(end == n) return 0;
 8002466:	f8d0 31e8 	ldr.w	r3, [r0, #488]	; 0x1e8
 800246a:	2b14      	cmp	r3, #20
 800246c:	d00c      	beq.n	8002488 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE4sizeEv+0x22>
				const auto&& expr = (n + end - begin) % n;
 800246e:	f8d0 01e4 	ldr.w	r0, [r0, #484]	; 0x1e4
 8002472:	3314      	adds	r3, #20
 8002474:	1a18      	subs	r0, r3, r0
 8002476:	2314      	movs	r3, #20
 8002478:	fbb0 f2f3 	udiv	r2, r0, r3
 800247c:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 8002480:	2800      	cmp	r0, #0
 8002482:	bf08      	it	eq
 8002484:	4618      	moveq	r0, r3
 8002486:	4770      	bx	lr
			if(end == n) return 0;
 8002488:	2000      	movs	r0, #0
		}
 800248a:	4770      	bx	lr

0800248c <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE5clearEv>:
		}

		constexpr void clear() noexcept
		{
			begin = 0;
			end = n;
 800248c:	2200      	movs	r2, #0
 800248e:	2314      	movs	r3, #20
 8002490:	e9c0 2379 	strd	r2, r3, [r0, #484]	; 0x1e4
		}
 8002494:	4770      	bx	lr

08002496 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv>:
			if(end == n) return 0;
 8002496:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8002498:	2b0a      	cmp	r3, #10
 800249a:	d00b      	beq.n	80024b4 <_ZNK6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE4sizeEv+0x1e>
				const auto&& expr = (n + end - begin) % n;
 800249c:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800249e:	330a      	adds	r3, #10
 80024a0:	1a18      	subs	r0, r3, r0
 80024a2:	230a      	movs	r3, #10
 80024a4:	fbb0 f2f3 	udiv	r2, r0, r3
 80024a8:	fb03 0012 	mls	r0, r3, r2, r0
				return expr ? expr : n;
 80024ac:	2800      	cmp	r0, #0
 80024ae:	bf08      	it	eq
 80024b0:	4618      	moveq	r0, r3
 80024b2:	4770      	bx	lr
			if(end == n) return 0;
 80024b4:	2000      	movs	r0, #0
		}
 80024b6:	4770      	bx	lr

080024b8 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE5clearEv>:
			end = n;
 80024b8:	2200      	movs	r2, #0
 80024ba:	230a      	movs	r3, #10
 80024bc:	e9c0 231d 	strd	r2, r3, [r0, #116]	; 0x74
		}
 80024c0:	4770      	bx	lr

080024c2 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 80024c2:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 80024c4:	f8d1 e1e8 	ldr.w	lr, [r1, #488]	; 0x1e8
		constexpr std::optional<Elem> pop() noexcept
 80024c8:	4684      	mov	ip, r0
			if(end == n)
 80024ca:	f1be 0f14 	cmp.w	lr, #20
		constexpr std::optional<Elem> pop() noexcept
 80024ce:	460e      	mov	r6, r1
 80024d0:	b087      	sub	sp, #28
			if(end == n)
 80024d2:	d105      	bne.n	80024e0 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x1e>
  template <typename _Tp>
    struct _Optional_payload_base
    {
      using _Stored_type = remove_const_t<_Tp>;

      _Optional_payload_base() = default;
 80024d4:	2300      	movs	r3, #0
		}
 80024d6:	4660      	mov	r0, ip

      template<typename... _Args>
	constexpr
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
	: _M_payload(__tag, std::forward<_Args>(__args)...),
	  _M_engaged(true)
 80024d8:	f88c 3018 	strb.w	r3, [ip, #24]
 80024dc:	b007      	add	sp, #28
 80024de:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 80024e0:	2418      	movs	r4, #24
 80024e2:	466d      	mov	r5, sp
 80024e4:	f8d1 71e4 	ldr.w	r7, [r1, #484]	; 0x1e4
			if(begin == n - 1) begin = 0;
 80024e8:	2f13      	cmp	r7, #19
			Elem ret = buffer[begin];
 80024ea:	fb04 1407 	mla	r4, r4, r7, r1
			if(begin == n - 1) begin = 0;
 80024ee:	bf08      	it	eq
 80024f0:	2700      	moveq	r7, #0
			Elem ret = buffer[begin];
 80024f2:	f104 0404 	add.w	r4, r4, #4
 80024f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fa:	e894 0003 	ldmia.w	r4, {r0, r1}
			else ++begin;
 80024fe:	bf18      	it	ne
 8002500:	3701      	addne	r7, #1
			if(begin == end)
 8002502:	45be      	cmp	lr, r7
			Elem ret = buffer[begin];
 8002504:	e885 0003 	stmia.w	r5, {r0, r1}
				end = n;
 8002508:	bf08      	it	eq
 800250a:	2314      	moveq	r3, #20
	  constexpr _Storage() noexcept : _M_empty() { }

	  template<typename... _Args>
	    constexpr
	    _Storage(in_place_t, _Args&&... __args)
	    : _M_value(std::forward<_Args>(__args)...)
 800250c:	4664      	mov	r4, ip
 800250e:	466d      	mov	r5, sp
 8002510:	bf08      	it	eq
 8002512:	f8c6 31e8 	streq.w	r3, [r6, #488]	; 0x1e8
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	e895 0003 	ldmia.w	r5, {r0, r1}
	  _M_engaged(true)
 800251e:	2301      	movs	r3, #1
	    : _M_value(std::forward<_Args>(__args)...)
 8002520:	e884 0003 	stmia.w	r4, {r0, r1}
 8002524:	f8c6 71e4 	str.w	r7, [r6, #484]	; 0x1e4
 8002528:	e7d5      	b.n	80024d6 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087RxFrameELj20EE3popEv+0x14>

0800252a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>:
		constexpr std::optional<Elem> pop() noexcept
 800252a:	b5f0      	push	{r4, r5, r6, r7, lr}
			if(end == n)
 800252c:	6f8f      	ldr	r7, [r1, #120]	; 0x78
		constexpr std::optional<Elem> pop() noexcept
 800252e:	4603      	mov	r3, r0
			if(end == n)
 8002530:	2f0a      	cmp	r7, #10
		constexpr std::optional<Elem> pop() noexcept
 8002532:	460a      	mov	r2, r1
 8002534:	b085      	sub	sp, #20
			if(end == n)
 8002536:	d104      	bne.n	8002542 <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x18>
      _Optional_payload_base() = default;
 8002538:	2200      	movs	r2, #0
		}
 800253a:	4618      	mov	r0, r3
	  _M_engaged(true)
 800253c:	72da      	strb	r2, [r3, #11]
 800253e:	b005      	add	sp, #20
 8002540:	bdf0      	pop	{r4, r5, r6, r7, pc}
			Elem ret = buffer[begin];
 8002542:	260b      	movs	r6, #11
 8002544:	6f4c      	ldr	r4, [r1, #116]	; 0x74
 8002546:	ad01      	add	r5, sp, #4
			if(begin == n - 1) begin = 0;
 8002548:	2c09      	cmp	r4, #9
			Elem ret = buffer[begin];
 800254a:	fb06 1604 	mla	r6, r6, r4, r1
			if(begin == n - 1) begin = 0;
 800254e:	bf08      	it	eq
 8002550:	2400      	moveq	r4, #0
			Elem ret = buffer[begin];
 8002552:	6870      	ldr	r0, [r6, #4]
 8002554:	68b1      	ldr	r1, [r6, #8]
			else ++begin;
 8002556:	bf18      	it	ne
 8002558:	3401      	addne	r4, #1
			Elem ret = buffer[begin];
 800255a:	c503      	stmia	r5!, {r0, r1}
 800255c:	7bb1      	ldrb	r1, [r6, #14]
			if(begin == end)
 800255e:	42a7      	cmp	r7, r4
			Elem ret = buffer[begin];
 8002560:	70a9      	strb	r1, [r5, #2]
				end = n;
 8002562:	bf08      	it	eq
 8002564:	210a      	moveq	r1, #10
			Elem ret = buffer[begin];
 8002566:	89b0      	ldrh	r0, [r6, #12]
				end = n;
 8002568:	bf08      	it	eq
 800256a:	6791      	streq	r1, [r2, #120]	; 0x78
			Elem ret = buffer[begin];
 800256c:	8028      	strh	r0, [r5, #0]
 800256e:	6754      	str	r4, [r2, #116]	; 0x74
	    : _M_value(std::forward<_Args>(__args)...)
 8002570:	aa01      	add	r2, sp, #4
 8002572:	ca03      	ldmia	r2!, {r0, r1}
 8002574:	6059      	str	r1, [r3, #4]
 8002576:	8811      	ldrh	r1, [r2, #0]
 8002578:	7892      	ldrb	r2, [r2, #2]
 800257a:	6018      	str	r0, [r3, #0]
 800257c:	729a      	strb	r2, [r3, #10]
 800257e:	8119      	strh	r1, [r3, #8]
	  _M_engaged(true)
 8002580:	2201      	movs	r2, #1
 8002582:	e7da      	b.n	800253a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv+0x10>

08002584 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE>:
	public:
		TxUnit(const u32 base_id) noexcept:
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
		{}

		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 8002584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		{
			auto for_body_par_id = [this, &pillarbox]<std::underlying_type_t<OffsetIdsEnum> offset_id, std::underlying_type_t<OffsetIdsEnum> n>(CompileForIndex<offset_id, n>) noexcept
			{
				CompileForIndex<offset_id + 1, n> ret{};

				ret.is_breaked = std::get<offset_id>(tx_ids).transmit(pillarbox, this->base_id);
 8002588:	6885      	ldr	r5, [r0, #8]
		void transmit(MpuSpecific::Pillarbox& pillarbox) noexcept override
 800258a:	460e      	mov	r6, r1
	{
		using Impl = TxIdImplInjectorAdaptor<offset_id>;
		SafeCircularQueue<MpuSpecific::TxFrame, Impl::queue_size()> queue{};

		// Mailboxが満杯になった(あるいはエラーが発生した)らfalse, そうでなければtrueを返す.
		bool transmit(MpuSpecific::Pillarbox& pillarbox, const u32 base_id) noexcept
 800258c:	ea5f 28d5 	movs.w	r8, r5, lsr #11
 8002590:	bf14      	ite	ne
 8002592:	2704      	movne	r7, #4
 8002594:	2700      	moveq	r7, #0
 8002596:	b08a      	sub	sp, #40	; 0x28
		{
			while(true)
			{
				if(pillarbox.not_full())
				{
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 8002598:	f100 040c 	add.w	r4, r0, #12

		void post(const u32 id, TxFrame& frame) noexcept
		{
			CAN_TxHeaderTypeDef tx_header
			{
				.StdId = id & max_std_id,
 800259c:	f3c5 050a 	ubfx	r5, r5, #0, #11
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
		}

		bool not_full() const noexcept
		{
			return HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 0;
 80025a0:	6830      	ldr	r0, [r6, #0]
 80025a2:	f002 f802 	bl	80045aa <HAL_CAN_GetTxMailboxesFreeLevel>
				if(pillarbox.not_full())
 80025a6:	b308      	cbz	r0, 80025ec <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
					if(auto opt_tx_frame = queue.pop(); !opt_tx_frame)
 80025a8:	4621      	mov	r1, r4
 80025aa:	a801      	add	r0, sp, #4
 80025ac:	f7ff ffbd 	bl	800252a <_ZN6CRSLib17SafeCircularQueueINS_3Can6RM00087TxFrameELj10EE3popEv>
 80025b0:	f89d 300f 	ldrb.w	r3, [sp, #15]
 80025b4:	b1d3      	cbz	r3, 80025ec <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x68>
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80025b6:	f89d 3005 	ldrb.w	r3, [sp, #5]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025ba:	6830      	ldr	r0, [r6, #0]
				.RTR = frame.header.rtr ? CAN_RTR_REMOTE : CAN_RTR_DATA,
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf14      	ite	ne
 80025c0:	2302      	movne	r3, #2
 80025c2:	2300      	moveq	r3, #0
			};
 80025c4:	9307      	str	r3, [sp, #28]
				.DLC = frame.header.dlc,
 80025c6:	f89d 3004 	ldrb.w	r3, [sp, #4]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025ca:	f10d 0207 	add.w	r2, sp, #7
				.DLC = frame.header.dlc,
 80025ce:	9308      	str	r3, [sp, #32]
			};
 80025d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025d4:	a904      	add	r1, sp, #16
			};
 80025d6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			u32 mailbox{};
 80025da:	2300      	movs	r3, #0
 80025dc:	9300      	str	r3, [sp, #0]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025de:	466b      	mov	r3, sp
			};
 80025e0:	e9cd 5804 	strd	r5, r8, [sp, #16]
 80025e4:	9706      	str	r7, [sp, #24]
			HAL_CAN_AddTxMessage(hcan, &tx_header, frame.data.data(), &mailbox);
 80025e6:	f001 ff92 	bl	800450e <HAL_CAN_AddTxMessage>
 80025ea:	e7d9      	b.n	80025a0 <_ZN6CRSLib3Can9Implement6TxUnitIN13Chibarobo20228SampleTxEE8transmitERNS0_6RM00089PillarboxE+0x1c>
				return ret;
			};

			compile_for(for_body_par_id, CompileForIndex<static_cast<std::underlying_type_t<OffsetIdsEnum>>(0), to_underlying(OffsetIdsEnum::n)>{});
		}
 80025ec:	b00a      	add	sp, #40	; 0x28
 80025ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080025f2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>:
    __insertion_sort(_RandomAccessIterator __first,
 80025f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025f4:	460e      	mov	r6, r1
 80025f6:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 80025f8:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 80025fa:	4604      	mov	r4, r0
 80025fc:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8002600:	d01d      	beq.n	800263e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002602:	1d05      	adds	r5, r0, #4
 8002604:	42b5      	cmp	r5, r6
 8002606:	d01a      	beq.n	800263e <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x4c>
 8002608:	682f      	ldr	r7, [r5, #0]
			}
		}

		void sort_tx_unit() noexcept
		{
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 800260a:	6823      	ldr	r3, [r4, #0]
 800260c:	68b9      	ldr	r1, [r7, #8]
	  if (__comp(__i, __first))
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	4299      	cmp	r1, r3
 8002612:	d209      	bcs.n	8002628 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x36>
	  if (_Num)
 8002614:	42a5      	cmp	r5, r4
 8002616:	d004      	beq.n	8002622 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x30>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8002618:	4621      	mov	r1, r4
 800261a:	1b2a      	subs	r2, r5, r4
 800261c:	1d20      	adds	r0, r4, #4
 800261e:	f004 f8a1 	bl	8006764 <memmove>
	      *__first = _GLIBCXX_MOVE(__val);
 8002622:	6027      	str	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8002624:	3504      	adds	r5, #4
 8002626:	e7ed      	b.n	8002604 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x12>
	  if (__comp(__i, __first))
 8002628:	462b      	mov	r3, r5
 800262a:	f853 2c04 	ldr.w	r2, [r3, #-4]
      while (__comp(__val, __next))
 800262e:	6890      	ldr	r0, [r2, #8]
 8002630:	4281      	cmp	r1, r0
 8002632:	d202      	bcs.n	800263a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x48>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002634:	f843 2904 	str.w	r2, [r3], #-4
      while (__comp(__val, __next))
 8002638:	e7f7      	b.n	800262a <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 800263a:	601f      	str	r7, [r3, #0]
    }
 800263c:	e7f2      	b.n	8002624 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_+0x32>
    }
 800263e:	b003      	add	sp, #12
 8002640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002642 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8002642:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8002644:	1e54      	subs	r4, r2, #1
 8002646:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 800264a:	1066      	asrs	r6, r4, #1
		     __first + (__secondChild - 1)))
 800264c:	f06f 4c40 	mvn.w	ip, #3221225472	; 0xc0000000
      while (__secondChild < (__len - 1) / 2)
 8002650:	460c      	mov	r4, r1
 8002652:	42a6      	cmp	r6, r4
 8002654:	dd14      	ble.n	8002680 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x3e>
	  __secondChild = 2 * (__secondChild + 1);
 8002656:	1c65      	adds	r5, r4, #1
 8002658:	006f      	lsls	r7, r5, #1
		     __first + (__secondChild - 1)))
 800265a:	eb0c 0545 	add.w	r5, ip, r5, lsl #1
 800265e:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
	  if (__comp(__first + __secondChild,
 8002662:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8002666:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 800266a:	68ad      	ldr	r5, [r5, #8]
 800266c:	45ae      	cmp	lr, r5
	    __secondChild--;
 800266e:	bf88      	it	hi
 8002670:	f107 37ff 	addhi.w	r7, r7, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8002674:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 8002678:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	  __holeIndex = __secondChild;
 800267c:	463c      	mov	r4, r7
      while (__secondChild < (__len - 1) / 2)
 800267e:	e7e8      	b.n	8002652 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x10>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8002680:	07d5      	lsls	r5, r2, #31
 8002682:	d40e      	bmi.n	80026a2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
 8002684:	3a02      	subs	r2, #2
 8002686:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 800268a:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 800268e:	d108      	bne.n	80026a2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x60>
	  __secondChild = 2 * (__secondChild + 1);
 8002690:	1c62      	adds	r2, r4, #1
 8002692:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8002694:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8002698:	f852 2c04 	ldr.w	r2, [r2, #-4]
 800269c:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
	  __holeIndex = __secondChild - 1;
 80026a0:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 80026a2:	1e62      	subs	r2, r4, #1
 80026a4:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 80026a8:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80026aa:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80026ac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80026b0:	eb00 0584 	add.w	r5, r0, r4, lsl #2
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80026b4:	da0d      	bge.n	80026d2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
 80026b6:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
 80026ba:	689e      	ldr	r6, [r3, #8]
 80026bc:	68a7      	ldr	r7, [r4, #8]
 80026be:	42b7      	cmp	r7, r6
 80026c0:	d207      	bcs.n	80026d2 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x90>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 80026c2:	f840 400c 	str.w	r4, [r0, ip]
	  __parent = (__holeIndex - 1) / 2;
 80026c6:	1e54      	subs	r4, r2, #1
 80026c8:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 80026cc:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 80026ce:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 80026d0:	e7eb      	b.n	80026aa <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_+0x68>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 80026d2:	602b      	str	r3, [r5, #0]
    }
 80026d4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026d6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 80026d6:	b082      	sub	sp, #8
 80026d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026dc:	4604      	mov	r4, r0
 80026de:	460d      	mov	r5, r1
 80026e0:	4616      	mov	r6, r2
 80026e2:	b087      	sub	sp, #28
 80026e4:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 80026e6:	1d07      	adds	r7, r0, #4
      while (__last - __first > int(_S_threshold))
 80026e8:	1b2b      	subs	r3, r5, r4
 80026ea:	2b40      	cmp	r3, #64	; 0x40
 80026ec:	dd2c      	ble.n	8002748 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x72>
      const _DistanceType __len = __last - __first;
 80026ee:	ea4f 08a3 	mov.w	r8, r3, asr #2
	  if (__depth_limit == 0)
 80026f2:	bb76      	cbnz	r6, 8002752 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x7c>
 80026f4:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 80026f8:	af02      	add	r7, sp, #8
 80026fa:	f10d 0910 	add.w	r9, sp, #16
 80026fe:	e887 0003 	stmia.w	r7, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8002702:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8002706:	f1a8 0602 	sub.w	r6, r8, #2
 800270a:	1076      	asrs	r6, r6, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 800270c:	e899 0003 	ldmia.w	r9, {r0, r1}
 8002710:	4642      	mov	r2, r8
 8002712:	e88d 0003 	stmia.w	sp, {r0, r1}
 8002716:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 800271a:	4631      	mov	r1, r6
 800271c:	4620      	mov	r0, r4
 800271e:	f7ff ff90 	bl	8002642 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
	  if (__parent == 0)
 8002722:	b10e      	cbz	r6, 8002728 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
	  __parent--;
 8002724:	3e01      	subs	r6, #1
      while (true)
 8002726:	e7f1      	b.n	800270c <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x36>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8002728:	f855 3d04 	ldr.w	r3, [r5, #-4]!
      *__result = _GLIBCXX_MOVE(*__first);
 800272c:	6822      	ldr	r2, [r4, #0]
			 _DistanceType(__last - __first),
 800272e:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8002730:	e897 0003 	ldmia.w	r7, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8002734:	602a      	str	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8002736:	e88d 0003 	stmia.w	sp, {r0, r1}
 800273a:	10b2      	asrs	r2, r6, #2
 800273c:	2100      	movs	r1, #0
 800273e:	4620      	mov	r0, r4
 8002740:	f7ff ff7f 	bl	8002642 <_ZSt13__adjust_heapIPPN6CRSLib3Can9Implement10TxUnitBaseEiS4_N9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SM_SM_T1_T2_>
      while (__last - __first > 1)
 8002744:	2e04      	cmp	r6, #4
 8002746:	dcef      	bgt.n	8002728 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x52>
    }
 8002748:	b007      	add	sp, #28
 800274a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800274e:	b002      	add	sp, #8
 8002750:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8002758:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 800275c:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8002760:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8002764:	f855 cc04 	ldr.w	ip, [r5, #-4]
      if (__comp(__a, __b))
 8002768:	45f1      	cmp	r9, lr
 800276a:	f8dc 1008 	ldr.w	r1, [ip, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800276e:	6822      	ldr	r2, [r4, #0]
	  --__depth_limit;
 8002770:	f106 36ff 	add.w	r6, r6, #4294967295
      if (__comp(__a, __b))
 8002774:	d22a      	bcs.n	80027cc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xf6>
	  if (__comp(__b, __c))
 8002776:	458e      	cmp	lr, r1
 8002778:	d221      	bcs.n	80027be <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xe8>
      __a = _GLIBCXX_MOVE(__b);
 800277a:	6020      	str	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 800277c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
 8002780:	463a      	mov	r2, r7
      while (__last - __first > int(_S_threshold))
 8002782:	462b      	mov	r3, r5
 8002784:	6820      	ldr	r0, [r4, #0]
 8002786:	4690      	mov	r8, r2
 8002788:	f852 1b04 	ldr.w	r1, [r2], #4
 800278c:	f8d0 9008 	ldr.w	r9, [r0, #8]
	  while (__comp(__first, __pivot))
 8002790:	6888      	ldr	r0, [r1, #8]
 8002792:	4548      	cmp	r0, r9
 8002794:	d3f6      	bcc.n	8002784 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>
	  --__last;
 8002796:	1f18      	subs	r0, r3, #4
 8002798:	4603      	mov	r3, r0
 800279a:	f850 e904 	ldr.w	lr, [r0], #-4
	  while (__comp(__pivot, __last))
 800279e:	f8de c008 	ldr.w	ip, [lr, #8]
 80027a2:	45e1      	cmp	r9, ip
 80027a4:	d3f8      	bcc.n	8002798 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xc2>
	  if (!(__first < __last))
 80027a6:	4598      	cmp	r8, r3
 80027a8:	d318      	bcc.n	80027dc <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x106>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 80027aa:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80027ac:	4629      	mov	r1, r5
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	4632      	mov	r2, r6
 80027b2:	4640      	mov	r0, r8
 80027b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80027b6:	f7ff ff8e 	bl	80026d6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      while (__last - __first > int(_S_threshold))
 80027ba:	4645      	mov	r5, r8
 80027bc:	e794      	b.n	80026e8 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x12>
	  else if (__comp(__a, __c))
 80027be:	4589      	cmp	r9, r1
 80027c0:	d206      	bcs.n	80027d0 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 80027c2:	f8c4 c000 	str.w	ip, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 80027c6:	f845 2c04 	str.w	r2, [r5, #-4]
    }
 80027ca:	e7d9      	b.n	8002780 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__a, __c))
 80027cc:	4589      	cmp	r9, r1
 80027ce:	d202      	bcs.n	80027d6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0x100>
 80027d0:	e9c4 8200 	strd	r8, r2, [r4]
 80027d4:	e7d4      	b.n	8002780 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xaa>
      else if (__comp(__b, __c))
 80027d6:	458e      	cmp	lr, r1
 80027d8:	d2cf      	bcs.n	800277a <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xa4>
 80027da:	e7f2      	b.n	80027c2 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xec>
      __a = _GLIBCXX_MOVE(__b);
 80027dc:	f842 ec04 	str.w	lr, [r2, #-4]
      __b = _GLIBCXX_MOVE(__tmp);
 80027e0:	6019      	str	r1, [r3, #0]
	  while (__comp(__first, __pivot))
 80027e2:	e7cf      	b.n	8002784 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_+0xae>

080027e4 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>:
		u32 base_id;

	public:
		UnitBase(const u32 id_num, const u32 base_id) noexcept:
			id_num{id_num},
			base_id{base_id}
 80027e4:	2301      	movs	r3, #1
		Transmitter(const std::same_as<u32> auto ... args) noexcept:
 80027e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027ea:	4604      	mov	r4, r0
 80027ec:	e9c0 3101 	strd	r3, r1, [r0, #4]
			TxUnitBase{to_underlying(OffsetIdsEnum::n), base_id}
 80027f0:	4b2e      	ldr	r3, [pc, #184]	; (80028ac <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xc8>)
 80027f2:	b089      	sub	sp, #36	; 0x24

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
 80027f4:	227c      	movs	r2, #124	; 0x7c
 80027f6:	2100      	movs	r1, #0
 80027f8:	f840 3b0c 	str.w	r3, [r0], #12
 80027fc:	f003 ffcc 	bl	8006798 <memset>
	class SafeCircularQueue final : SafeCircularQueueEraseN<Elem>
 8002800:	4b2b      	ldr	r3, [pc, #172]	; (80028b0 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xcc>)
 8002802:	226e      	movs	r2, #110	; 0x6e
 8002804:	2100      	movs	r1, #0
 8002806:	60e3      	str	r3, [r4, #12]
 8002808:	f104 0010 	add.w	r0, r4, #16
 800280c:	f003 ffc4 	bl	8006798 <memset>
 8002810:	230a      	movs	r3, #10
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
      { return _AT_Type::_S_ptr(_M_elems); }
 8002812:	f104 0688 	add.w	r6, r4, #136	; 0x88
      { return iterator(data() + _Nm); }
 8002816:	f104 078c 	add.w	r7, r4, #140	; 0x8c
				std::__lg(__last - __first) * 2,
 800281a:	eba7 0806 	sub.w	r8, r7, r6
 800281e:	ea4f 02a8 	mov.w	r2, r8, asr #2
  { return (int)sizeof(int) * __CHAR_BIT__  - 1 - __builtin_clz(__n); }
 8002822:	fab2 f282 	clz	r2, r2
			tx_units{args ...}
 8002826:	e9c4 3421 	strd	r3, r4, [r4, #132]	; 0x84
 800282a:	2300      	movs	r3, #0
	  std::__introsort_loop(__first, __last,
 800282c:	ad03      	add	r5, sp, #12
 800282e:	f10d 0908 	add.w	r9, sp, #8
 8002832:	f1c2 021f 	rsb	r2, r2, #31
 8002836:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
      end() noexcept
 800283a:	f88d 300c 	strb.w	r3, [sp, #12]
 800283e:	f88d 3008 	strb.w	r3, [sp, #8]
 8002842:	4639      	mov	r1, r7
 8002844:	462b      	mov	r3, r5
 8002846:	4630      	mov	r0, r6
 8002848:	f8cd 9000 	str.w	r9, [sp]
 800284c:	0052      	lsls	r2, r2, #1
 800284e:	9504      	str	r5, [sp, #16]
 8002850:	f8cd 9014 	str.w	r9, [sp, #20]
 8002854:	f7ff ff3f 	bl	80026d6 <_ZSt16__introsort_loopIPPN6CRSLib3Can9Implement10TxUnitBaseEiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_T1_>
      if (__last - __first > int(_S_threshold))
 8002858:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 800285c:	e9cd 5906 	strd	r5, r9, [sp, #24]
    __final_insertion_sort(_RandomAccessIterator __first,
 8002860:	ab06      	add	r3, sp, #24
      if (__last - __first > int(_S_threshold))
 8002862:	dd16      	ble.n	8002892 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xae>
	  std::__insertion_sort(__first, __first + int(_S_threshold), __comp);
 8002864:	cb0c      	ldmia	r3, {r2, r3}
 8002866:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
 800286a:	4629      	mov	r1, r5
 800286c:	4630      	mov	r0, r6
 800286e:	f7ff fec0 	bl	80025f2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 8002872:	42bd      	cmp	r5, r7
 8002874:	d012      	beq.n	800289c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xb8>
    __unguarded_linear_insert(_RandomAccessIterator __last,
 8002876:	462b      	mov	r3, r5
	__val = _GLIBCXX_MOVE(*__last);
 8002878:	682a      	ldr	r2, [r5, #0]
			std::ranges::sort(tx_units_p, {}, [](const Implement::TxUnitBase * p){return p->base_id;});
 800287a:	6890      	ldr	r0, [r2, #8]
 800287c:	f853 1c04 	ldr.w	r1, [r3, #-4]
      while (__comp(__val, __next))
 8002880:	688e      	ldr	r6, [r1, #8]
 8002882:	42b0      	cmp	r0, r6
 8002884:	d202      	bcs.n	800288c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0xa8>
	  *__last = _GLIBCXX_MOVE(*__next);
 8002886:	f843 1904 	str.w	r1, [r3], #-4
      while (__comp(__val, __next))
 800288a:	e7f7      	b.n	800287c <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x98>
      *__last = _GLIBCXX_MOVE(__val);
 800288c:	601a      	str	r2, [r3, #0]
      for (_RandomAccessIterator __i = __first; __i != __last; ++__i)
 800288e:	3504      	adds	r5, #4
 8002890:	e7ef      	b.n	8002872 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_+0x8e>
	std::__insertion_sort(__first, __last, __comp);
 8002892:	4639      	mov	r1, r7
 8002894:	cb0c      	ldmia	r3, {r2, r3}
 8002896:	4630      	mov	r0, r6
 8002898:	f7ff feab 	bl	80025f2 <_ZSt16__insertion_sortIPPN6CRSLib3Can9Implement10TxUnitBaseEN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS9_4lessEZNS1_11TransmitterIJN13Chibarobo20228SampleTxEEE12sort_tx_unitEvEUlPKS3_E_EEDaRT_RT0_EUlOSK_OSM_E_EEEvSK_SK_SM_>
			is_id_sorted = true;
 800289c:	2301      	movs	r3, #1
		}
 800289e:	4620      	mov	r0, r4
			is_id_sorted = true;
 80028a0:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
		}
 80028a4:	b009      	add	sp, #36	; 0x24
 80028a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80028aa:	bf00      	nop
 80028ac:	08006c50 	.word	0x08006c50
 80028b0:	08006c38 	.word	0x08006c38

080028b4 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE>:

}

namespace Chibarobo2022
{
	inline CRSLib::Can::Transmitter<Chibarobo2022::SampleTx> transmitter{(u32)0x100};
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x58>)
			transmitter.transmit(can_manager.pillarbox);
			
			executor.run_once();
		}
	}
}
 80028b6:	b510      	push	{r4, lr}
 80028b8:	6813      	ldr	r3, [r2, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	2b01      	cmp	r3, #1
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	d104      	bne.n	80028cc <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x18>
 80028c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c6:	4812      	ldr	r0, [pc, #72]	; (8002910 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x5c>)
 80028c8:	f7ff ff8c 	bl	80027e4 <_ZN6CRSLib3Can11TransmitterIJN13Chibarobo20228SampleTxEEEC1IJmEEEDpKT_>
	};
}

namespace Chibarobo2022
{
	inline CRSLib::Can::Receiver<Chibarobo2022::SampleRx> receiver{(u32)0x101};
 80028cc:	4a11      	ldr	r2, [pc, #68]	; (8002914 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x60>)
 80028ce:	6813      	ldr	r3, [r2, #0]
 80028d0:	3301      	adds	r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	d117      	bne.n	8002908 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x54>
 80028d8:	4c0f      	ldr	r4, [pc, #60]	; (8002918 <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x64>)
 80028da:	f44f 72f6 	mov.w	r2, #492	; 0x1ec
 80028de:	6023      	str	r3, [r4, #0]
 80028e0:	f240 1301 	movw	r3, #257	; 0x101
 80028e4:	2100      	movs	r1, #0
 80028e6:	f104 0008 	add.w	r0, r4, #8
 80028ea:	6063      	str	r3, [r4, #4]
 80028ec:	f003 ff54 	bl	8006798 <memset>
 80028f0:	4b0a      	ldr	r3, [pc, #40]	; (800291c <_GLOBAL__sub_I__ZN13Chibarobo20228executorE+0x68>)
 80028f2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80028f6:	2100      	movs	r1, #0
 80028f8:	f104 000c 	add.w	r0, r4, #12
 80028fc:	60a3      	str	r3, [r4, #8]
 80028fe:	f003 ff4b 	bl	8006798 <memset>
 8002902:	2314      	movs	r3, #20
 8002904:	f8c4 31f0 	str.w	r3, [r4, #496]	; 0x1f0
 8002908:	bd10      	pop	{r4, pc}
 800290a:	bf00      	nop
 800290c:	2000009c 	.word	0x2000009c
 8002910:	20000294 	.word	0x20000294
 8002914:	20000098 	.word	0x20000098
 8002918:	200000a0 	.word	0x200000a0
 800291c:	08006c5c 	.word	0x08006c5c

08002920 <_ZN11stepping_md18CanController_Base6updateEv>:
			static inline void trigger_update(void){
				for(CanController_Base instance : instances){
					instance.update();
				}
			}
			virtual void update(void){throw std::logic_error("update is not implemented");}
 8002920:	b510      	push	{r4, lr}
 8002922:	2008      	movs	r0, #8
 8002924:	f002 fe94 	bl	8005650 <__cxa_allocate_exception>
 8002928:	4906      	ldr	r1, [pc, #24]	; (8002944 <_ZN11stepping_md18CanController_Base6updateEv+0x24>)
 800292a:	4604      	mov	r4, r0
 800292c:	f003 fdc2 	bl	80064b4 <_ZNSt11logic_errorC1EPKc>
 8002930:	4620      	mov	r0, r4
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <_ZN11stepping_md18CanController_Base6updateEv+0x28>)
 8002934:	4905      	ldr	r1, [pc, #20]	; (800294c <_ZN11stepping_md18CanController_Base6updateEv+0x2c>)
 8002936:	f003 fa6f 	bl	8005e18 <__cxa_throw>
 800293a:	4620      	mov	r0, r4
 800293c:	f002 fe9e 	bl	800567c <__cxa_free_exception>
 8002940:	f002 fec0 	bl	80056c4 <__cxa_end_cleanup>
 8002944:	08006c6c 	.word	0x08006c6c
 8002948:	08006425 	.word	0x08006425
 800294c:	080070e4 	.word	0x080070e4

08002950 <_ZNSt14_Function_baseD1Ev>:

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8002950:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 8002952:	b510      	push	{r4, lr}
 8002954:	4604      	mov	r4, r0
      if (_M_manager)
 8002956:	b113      	cbz	r3, 800295e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8002958:	2203      	movs	r2, #3
 800295a:	4601      	mov	r1, r0
 800295c:	4798      	blx	r3
    }
 800295e:	4620      	mov	r0, r4
 8002960:	bd10      	pop	{r4, pc}

08002962 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>:
		Letterbox(CAN_HandleTypeDef *const hcan, const FifoIndex fifo_index) noexcept:
			hcan{hcan},
			fifo_index{fifo_index}
		{}

		void receive(RxFrame& frame) noexcept
 8002962:	b530      	push	{r4, r5, lr}
 8002964:	460c      	mov	r4, r1
 8002966:	4605      	mov	r5, r0
 8002968:	b089      	sub	sp, #36	; 0x24
		{
			CAN_RxHeaderTypeDef rx_header{};
 800296a:	221c      	movs	r2, #28
 800296c:	2100      	movs	r1, #0
 800296e:	a801      	add	r0, sp, #4
 8002970:	f003 ff12 	bl	8006798 <memset>

			HAL_CAN_GetRxMessage(hcan, to_underlying(fifo_index), &rx_header, frame.data.data());
 8002974:	e9d5 0100 	ldrd	r0, r1, [r5]
 8002978:	f104 0310 	add.w	r3, r4, #16
 800297c:	aa01      	add	r2, sp, #4
 800297e:	f001 fe28 	bl	80045d2 <HAL_CAN_GetRxMessage>
			{
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
				.time_stamp = rx_header.Timestamp,
				.filter_match_index = rx_header.FilterMatchIndex,
				.dlc = static_cast<u8>(rx_header.DLC),
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8002982:	9b04      	ldr	r3, [sp, #16]
			frame.header =
 8002984:	f89d 1014 	ldrb.w	r1, [sp, #20]
				.rtr = rx_header.RTR == CAN_RTR_REMOTE
 8002988:	1e9a      	subs	r2, r3, #2
 800298a:	4253      	negs	r3, r2
 800298c:	4153      	adcs	r3, r2
				.id = (rx_header.ExtId << (u32)11) | rx_header.StdId,
 800298e:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8002992:	ea42 22c0 	orr.w	r2, r2, r0, lsl #11
			frame.header =
 8002996:	6022      	str	r2, [r4, #0]
 8002998:	9a06      	ldr	r2, [sp, #24]
 800299a:	7321      	strb	r1, [r4, #12]
 800299c:	6062      	str	r2, [r4, #4]
 800299e:	9a07      	ldr	r2, [sp, #28]
 80029a0:	7363      	strb	r3, [r4, #13]
 80029a2:	60a2      	str	r2, [r4, #8]
			};
		}
 80029a4:	b009      	add	sp, #36	; 0x24
 80029a6:	bd30      	pop	{r4, r5, pc}

080029a8 <_ZN11stepping_md18CanController_BaseC1Ev>:
			explicit CanController_Base(){instances.push_back(*this);}
 80029a8:	b538      	push	{r3, r4, r5, lr}
 80029aa:	4d08      	ldr	r5, [pc, #32]	; (80029cc <_ZN11stepping_md18CanController_BaseC1Ev+0x24>)
 80029ac:	4604      	mov	r4, r0
 80029ae:	6005      	str	r5, [r0, #0]
	  {
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp), __al));
	  }
#endif
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80029b0:	200c      	movs	r0, #12
 80029b2:	f003 fa4b 	bl	8005e4c <_Znwj>
	class CanController_Base{
 80029b6:	6085      	str	r5, [r0, #8]
     template<typename... _Args>
       void
       _M_insert(iterator __position, _Args&&... __args)
       {
	 _Node* __tmp = _M_create_node(std::forward<_Args>(__args)...);
	 __tmp->_M_hook(__position._M_node);
 80029b8:	4d05      	ldr	r5, [pc, #20]	; (80029d0 <_ZN11stepping_md18CanController_BaseC1Ev+0x28>)
 80029ba:	4629      	mov	r1, r5
 80029bc:	f003 fd28 	bl	8006410 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 80029c0:	68ab      	ldr	r3, [r5, #8]
			explicit CanController_Base(){instances.push_back(*this);}
 80029c2:	4620      	mov	r0, r4
 80029c4:	3301      	adds	r3, #1
 80029c6:	60ab      	str	r3, [r5, #8]
 80029c8:	bd38      	pop	{r3, r4, r5, pc}
 80029ca:	bf00      	nop
 80029cc:	08006cd4 	.word	0x08006cd4
 80029d0:	20000344 	.word	0x20000344

080029d4 <_ZN11stepping_md13CanControllerIfEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>:
	//以下定義
	template<typename T>
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;

	template<typename T>
	CanController<T>::CanController(RM0008::CanManager& can_manager, Parameters& params, uint32_t offset_from_bid): can_manager(can_manager), params(params), offset_from_bid(offset_from_bid){}
 80029d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029d6:	4604      	mov	r4, r0
 80029d8:	460f      	mov	r7, r1
 80029da:	461d      	mov	r5, r3
 80029dc:	4616      	mov	r6, r2
 80029de:	f7ff ffe3 	bl	80029a8 <_ZN11stepping_md18CanController_BaseC1Ev>
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <_ZN11stepping_md13CanControllerIfEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x20>)
 80029e4:	4620      	mov	r0, r4
 80029e6:	e9c4 3700 	strd	r3, r7, [r4]
    _Function_base() : _M_manager(nullptr) { }
 80029ea:	2300      	movs	r3, #0
 80029ec:	e9c4 6506 	strd	r6, r5, [r4, #24]
 80029f0:	6123      	str	r3, [r4, #16]
 80029f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80029f4:	08006ce0 	.word	0x08006ce0

080029f8 <_ZN11stepping_md13CanControllerIhEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>:
 80029f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fa:	4604      	mov	r4, r0
 80029fc:	460f      	mov	r7, r1
 80029fe:	461d      	mov	r5, r3
 8002a00:	4616      	mov	r6, r2
 8002a02:	f7ff ffd1 	bl	80029a8 <_ZN11stepping_md18CanController_BaseC1Ev>
 8002a06:	4b04      	ldr	r3, [pc, #16]	; (8002a18 <_ZN11stepping_md13CanControllerIhEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm+0x20>)
 8002a08:	4620      	mov	r0, r4
 8002a0a:	e9c4 3700 	strd	r3, r7, [r4]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	e9c4 6506 	strd	r6, r5, [r4, #24]
 8002a14:	6123      	str	r3, [r4, #16]
 8002a16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a18:	08006cec 	.word	0x08006cec

08002a1c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>:
      _Vector_base(const allocator_type& __a, _Vector_base&& __x)
      : _M_impl(_Tp_alloc_type(__a), std::move(__x._M_impl))
      { }
#endif

      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002a1c:	b510      	push	{r4, lr}
 8002a1e:	4604      	mov	r4, r0
      {
	_M_deallocate(_M_impl._M_start,
 8002a20:	6800      	ldr	r0, [r0, #0]

      void
      _M_deallocate(pointer __p, size_t __n)
      {
	typedef __gnu_cxx::__alloc_traits<_Tp_alloc_type> _Tr;
	if (__p)
 8002a22:	b118      	cbz	r0, 8002a2c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002a24:	68a1      	ldr	r1, [r4, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 8002a26:	1a09      	subs	r1, r1, r0
 8002a28:	f002 fdb6 	bl	8005598 <_ZdlPvj>
      }
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	bd10      	pop	{r4, pc}

08002a30 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8002a30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}

      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a34:	6843      	ldr	r3, [r0, #4]
 8002a36:	f8d0 8000 	ldr.w	r8, [r0]
 8002a3a:	4c41      	ldr	r4, [pc, #260]	; (8002b40 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x110>)
 8002a3c:	9301      	str	r3, [sp, #4]
 8002a3e:	eba3 0308 	sub.w	r3, r3, r8
 8002a42:	10db      	asrs	r3, r3, #3
 8002a44:	4363      	muls	r3, r4
 8002a46:	4692      	mov	sl, r2

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8002a48:	4a3e      	ldr	r2, [pc, #248]	; (8002b44 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x114>)
 8002a4a:	4607      	mov	r7, r0
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	4689      	mov	r9, r1
 8002a50:	d102      	bne.n	8002a58 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x28>
	  __throw_length_error(__N(__s));
 8002a52:	483d      	ldr	r0, [pc, #244]	; (8002b48 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x118>)
 8002a54:	f003 fda0 	bl	8006598 <_ZSt20__throw_length_errorPKc>
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	461c      	mov	r4, r3
 8002a5c:	bf38      	it	cc
 8002a5e:	2401      	movcc	r4, #1
 8002a60:	18e4      	adds	r4, r4, r3
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8002a62:	eba1 0508 	sub.w	r5, r1, r8

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002a66:	d23b      	bcs.n	8002ae0 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb0>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002a68:	b3e4      	cbz	r4, 8002ae4 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb4>
 8002a6a:	4294      	cmp	r4, r2
 8002a6c:	bf28      	it	cs
 8002a6e:	4614      	movcs	r4, r2
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002a70:	2018      	movs	r0, #24
 8002a72:	4360      	muls	r0, r4
 8002a74:	f003 f9ea 	bl	8005e4c <_Znwj>
 8002a78:	4606      	mov	r6, r0
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002a7a:	46d4      	mov	ip, sl
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 8002a7c:	46b3      	mov	fp, r6
 8002a7e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8002a82:	46c2      	mov	sl, r8
 8002a84:	eb06 0e05 	add.w	lr, r6, r5
 8002a88:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002a8c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8002a90:	e88e 0003 	stmia.w	lr, {r0, r1}
      for (; __first != __last; ++__first, (void)++__cur)
 8002a94:	45d1      	cmp	r9, sl
 8002a96:	f10b 0b18 	add.w	fp, fp, #24
 8002a9a:	d125      	bne.n	8002ae8 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xb8>
 8002a9c:	2318      	movs	r3, #24
 8002a9e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8002b4c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x11c>
 8002aa2:	08ed      	lsrs	r5, r5, #3
 8002aa4:	fb0a f505 	mul.w	r5, sl, r5
 8002aa8:	f025 4560 	bic.w	r5, r5, #3758096384	; 0xe0000000
 8002aac:	fb03 8b05 	mla	fp, r3, r5, r8
 8002ab0:	fb05 3303 	mla	r3, r5, r3, r3
 8002ab4:	18f3      	adds	r3, r6, r3
 8002ab6:	4699      	mov	r9, r3
 8002ab8:	465d      	mov	r5, fp
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	9b01      	ldr	r3, [sp, #4]
 8002abe:	f109 0918 	add.w	r9, r9, #24
 8002ac2:	429d      	cmp	r5, r3
 8002ac4:	d01e      	beq.n	8002b04 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xd4>
 8002ac6:	46ae      	mov	lr, r5
 8002ac8:	f1a9 0c18 	sub.w	ip, r9, #24
 8002acc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002ad0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002ad4:	3518      	adds	r5, #24
 8002ad6:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8002ada:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002ade:	e7ed      	b.n	8002abc <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x8c>
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002ae0:	4614      	mov	r4, r2
 8002ae2:	e7c5      	b.n	8002a70 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x40>
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002ae4:	4626      	mov	r6, r4
 8002ae6:	e7c8      	b.n	8002a7a <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x4a>
 8002ae8:	46d6      	mov	lr, sl
 8002aea:	f1ab 0c18 	sub.w	ip, fp, #24
 8002aee:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8002af2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002af6:	f10a 0a18 	add.w	sl, sl, #24
 8002afa:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8002afe:	e88c 0003 	stmia.w	ip, {r0, r1}
 8002b02:	e7c7      	b.n	8002a94 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0x64>
 8002b04:	eba5 050b 	sub.w	r5, r5, fp
 8002b08:	08ed      	lsrs	r5, r5, #3
 8002b0a:	fb0a fa05 	mul.w	sl, sl, r5
 8002b0e:	2518      	movs	r5, #24
 8002b10:	9b00      	ldr	r3, [sp, #0]
 8002b12:	f02a 4a60 	bic.w	sl, sl, #3758096384	; 0xe0000000
 8002b16:	fb05 350a 	mla	r5, r5, sl, r3
	if (__p)
 8002b1a:	f1b8 0f00 	cmp.w	r8, #0
 8002b1e:	d005      	beq.n	8002b2c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_+0xfc>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8002b20:	68b9      	ldr	r1, [r7, #8]
	::operator delete(__p
 8002b22:	4640      	mov	r0, r8
 8002b24:	eba1 0108 	sub.w	r1, r1, r8
 8002b28:	f002 fd36 	bl	8005598 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
      this->_M_impl._M_finish = __new_finish;
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002b2c:	2018      	movs	r0, #24
 8002b2e:	fb00 6404 	mla	r4, r0, r4, r6
      this->_M_impl._M_finish = __new_finish;
 8002b32:	e9c7 6500 	strd	r6, r5, [r7]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8002b36:	60bc      	str	r4, [r7, #8]
    }
 8002b38:	b003      	add	sp, #12
 8002b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b3e:	bf00      	nop
 8002b40:	aaaaaaab 	.word	0xaaaaaaab
 8002b44:	05555555 	.word	0x05555555
 8002b48:	08006c86 	.word	0x08006c86
 8002b4c:	0aaaaaab 	.word	0x0aaaaaab

08002b50 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE9push_backERKS3_>:
      push_back(const value_type& __x)
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002b52:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 8002b56:	429e      	cmp	r6, r3
      push_back(const value_type& __x)
 8002b58:	4607      	mov	r7, r0
 8002b5a:	460a      	mov	r2, r1
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002b5c:	d00a      	beq.n	8002b74 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE9push_backERKS3_+0x24>
 8002b5e:	4635      	mov	r5, r6
 8002b60:	460c      	mov	r4, r1
 8002b62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
	    ++this->_M_impl._M_finish;
 8002b66:	3618      	adds	r6, #24
 8002b68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b70:	607e      	str	r6, [r7, #4]
      }
 8002b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  _M_realloc_insert(end(), __x);
 8002b74:	4631      	mov	r1, r6
 8002b76:	f7ff ff5b 	bl	8002a30 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE17_M_realloc_insertIJRKS3_EEEvN9__gnu_cxx17__normal_iteratorIPS3_S5_EEDpOT_>
      }
 8002b7a:	e7fa      	b.n	8002b72 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE9push_backERKS3_+0x22>

08002b7c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS3_S5_EE>:
      : _M_current(__i) { }
 8002b7c:	6842      	ldr	r2, [r0, #4]
    vector<_Tp, _Alloc>::
 8002b7e:	460b      	mov	r3, r1
      { return __normal_iterator(_M_current + __n); }
 8002b80:	3118      	adds	r1, #24
      if (__position + 1 != end())
 8002b82:	428a      	cmp	r2, r1
    vector<_Tp, _Alloc>::
 8002b84:	b510      	push	{r4, lr}
 8002b86:	4604      	mov	r4, r0
      if (__position + 1 != end())
 8002b88:	d004      	beq.n	8002b94 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS3_S5_EE+0x18>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	1a52      	subs	r2, r2, r1
 8002b8e:	f003 fde9 	bl	8006764 <memmove>
 8002b92:	4603      	mov	r3, r0
      --this->_M_impl._M_finish;
 8002b94:	6862      	ldr	r2, [r4, #4]
    }
 8002b96:	4618      	mov	r0, r3
      --this->_M_impl._M_finish;
 8002b98:	3a18      	subs	r2, #24
 8002b9a:	6062      	str	r2, [r4, #4]
    }
 8002b9c:	bd10      	pop	{r4, pc}
	...

08002ba0 <_ZN11stepping_md13CanControllerIfE6updateEv>:
		can_manager.pillarbox.post(params.get_BID() + offset_from_bid, tx_frame);
	}
	*/

	template<typename T>
	void CanController<T>::update(void){
 8002ba0:	b5f0      	push	{r4, r5, r6, r7, lr}
		if(!can_manager.letterbox0.empty()){
 8002ba2:	6843      	ldr	r3, [r0, #4]
	void CanController<T>::update(void){
 8002ba4:	4605      	mov	r5, r0

		bool empty() const noexcept
		{
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8002ba6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8002baa:	b089      	sub	sp, #36	; 0x24
 8002bac:	f001 fd88 	bl	80046c0 <HAL_CAN_GetRxFifoFillLevel>
		if(!can_manager.letterbox0.empty()){
 8002bb0:	b178      	cbz	r0, 8002bd2 <_ZN11stepping_md13CanControllerIfE6updateEv+0x32>
			RM0008::RxFrame rx_frame;
 8002bb2:	2218      	movs	r2, #24
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	a802      	add	r0, sp, #8
 8002bb8:	f003 fdee 	bl	8006798 <memset>
			can_manager.letterbox0.receive(rx_frame);
 8002bbc:	6868      	ldr	r0, [r5, #4]
 8002bbe:	a902      	add	r1, sp, #8
 8002bc0:	3004      	adds	r0, #4
 8002bc2:	f7ff fece 	bl	8002962 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>
			rx_frames.push_back(rx_frame);
 8002bc6:	4815      	ldr	r0, [pc, #84]	; (8002c1c <_ZN11stepping_md13CanControllerIfE6updateEv+0x7c>)
 8002bc8:	a902      	add	r1, sp, #8
 8002bca:	f7ff ffc1 	bl	8002b50 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE9push_backERKS3_>
			blink_can_led();
 8002bce:	f000 facb 	bl	8003168 <_ZN11stepping_md13blink_can_ledEv>
      : _M_current(__i) { }
 8002bd2:	4e12      	ldr	r6, [pc, #72]	; (8002c1c <_ZN11stepping_md13CanControllerIfE6updateEv+0x7c>)
 8002bd4:	6834      	ldr	r4, [r6, #0]
			rx_frames.push_back(rx_frame);
		}
		*/

		auto ite = rx_frames.begin();
		while(ite != rx_frames.end()){
 8002bd6:	6873      	ldr	r3, [r6, #4]
 8002bd8:	429c      	cmp	r4, r3
 8002bda:	d01d      	beq.n	8002c18 <_ZN11stepping_md13CanControllerIfE6updateEv+0x78>
			if(ite->header.get_id() == (params.get_BID() + offset_from_bid)){
 8002bdc:	69a8      	ldr	r0, [r5, #24]
			return id;
 8002bde:	6827      	ldr	r7, [r4, #0]
 8002be0:	f000 fa5b 	bl	800309a <_ZN11stepping_md10Parameters7get_BIDEv>
 8002be4:	69eb      	ldr	r3, [r5, #28]
 8002be6:	4403      	add	r3, r0
 8002be8:	42bb      	cmp	r3, r7
 8002bea:	d113      	bne.n	8002c14 <_ZN11stepping_md13CanControllerIfE6updateEv+0x74>
 8002bec:	6823      	ldr	r3, [r4, #0]
 8002bee:	6922      	ldr	r2, [r4, #16]
 8002bf0:	9302      	str	r3, [sp, #8]
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8002bf2:	692b      	ldr	r3, [r5, #16]
 8002bf4:	9201      	str	r2, [sp, #4]
 8002bf6:	b90b      	cbnz	r3, 8002bfc <_ZN11stepping_md13CanControllerIfE6updateEv+0x5c>
	__throw_bad_function_call();
 8002bf8:	f003 fcd1 	bl	800659e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002bfc:	696b      	ldr	r3, [r5, #20]
 8002bfe:	aa02      	add	r2, sp, #8
 8002c00:	a901      	add	r1, sp, #4
 8002c02:	f105 0008 	add.w	r0, r5, #8
 8002c06:	4798      	blx	r3
      { return _M_erase(begin() + (__position - cbegin())); }
 8002c08:	4621      	mov	r1, r4
 8002c0a:	4630      	mov	r0, r6
 8002c0c:	f7ff ffb6 	bl	8002b7c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS3_S5_EE>
 8002c10:	4604      	mov	r4, r0
				callback(unpack<std::endian::native, T>(ite->data), ite->header.get_id());
				ite = rx_frames.erase(ite);
				continue;
 8002c12:	e7e0      	b.n	8002bd6 <_ZN11stepping_md13CanControllerIfE6updateEv+0x36>
      { return __normal_iterator(_M_current++); }
 8002c14:	3418      	adds	r4, #24
 8002c16:	e7de      	b.n	8002bd6 <_ZN11stepping_md13CanControllerIfE6updateEv+0x36>
			}
			ite++;
		}
	}
 8002c18:	b009      	add	sp, #36	; 0x24
 8002c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c1c:	20000338 	.word	0x20000338

08002c20 <_ZN11stepping_md13CanControllerIhE6updateEv>:
	void CanController<T>::update(void){
 8002c20:	b5f0      	push	{r4, r5, r6, r7, lr}
		if(!can_manager.letterbox0.empty()){
 8002c22:	6843      	ldr	r3, [r0, #4]
	void CanController<T>::update(void){
 8002c24:	4605      	mov	r5, r0
			return HAL_CAN_GetRxFifoFillLevel(hcan, to_underlying(fifo_index)) == 0;
 8002c26:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
 8002c2a:	b089      	sub	sp, #36	; 0x24
 8002c2c:	f001 fd48 	bl	80046c0 <HAL_CAN_GetRxFifoFillLevel>
		if(!can_manager.letterbox0.empty()){
 8002c30:	b178      	cbz	r0, 8002c52 <_ZN11stepping_md13CanControllerIhE6updateEv+0x32>
			RM0008::RxFrame rx_frame;
 8002c32:	2218      	movs	r2, #24
 8002c34:	2100      	movs	r1, #0
 8002c36:	a802      	add	r0, sp, #8
 8002c38:	f003 fdae 	bl	8006798 <memset>
			can_manager.letterbox0.receive(rx_frame);
 8002c3c:	6868      	ldr	r0, [r5, #4]
 8002c3e:	a902      	add	r1, sp, #8
 8002c40:	3004      	adds	r0, #4
 8002c42:	f7ff fe8e 	bl	8002962 <_ZN6CRSLib3Can6RM00089Letterbox7receiveERNS1_7RxFrameE>
			rx_frames.push_back(rx_frame);
 8002c46:	4816      	ldr	r0, [pc, #88]	; (8002ca0 <_ZN11stepping_md13CanControllerIhE6updateEv+0x80>)
 8002c48:	a902      	add	r1, sp, #8
 8002c4a:	f7ff ff81 	bl	8002b50 <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE9push_backERKS3_>
			blink_can_led();
 8002c4e:	f000 fa8b 	bl	8003168 <_ZN11stepping_md13blink_can_ledEv>
      : _M_current(__i) { }
 8002c52:	4e13      	ldr	r6, [pc, #76]	; (8002ca0 <_ZN11stepping_md13CanControllerIhE6updateEv+0x80>)
 8002c54:	6834      	ldr	r4, [r6, #0]
		while(ite != rx_frames.end()){
 8002c56:	6873      	ldr	r3, [r6, #4]
 8002c58:	429c      	cmp	r4, r3
 8002c5a:	d01f      	beq.n	8002c9c <_ZN11stepping_md13CanControllerIhE6updateEv+0x7c>
			if(ite->header.get_id() == (params.get_BID() + offset_from_bid)){
 8002c5c:	69a8      	ldr	r0, [r5, #24]
			return id;
 8002c5e:	6827      	ldr	r7, [r4, #0]
 8002c60:	f000 fa1b 	bl	800309a <_ZN11stepping_md10Parameters7get_BIDEv>
 8002c64:	69eb      	ldr	r3, [r5, #28]
 8002c66:	4403      	add	r3, r0
 8002c68:	42bb      	cmp	r3, r7
 8002c6a:	d115      	bne.n	8002c98 <_ZN11stepping_md13CanControllerIhE6updateEv+0x78>
 8002c6c:	6823      	ldr	r3, [r4, #0]
 8002c6e:	7c22      	ldrb	r2, [r4, #16]
 8002c70:	9302      	str	r3, [sp, #8]
      if (_M_empty())
 8002c72:	692b      	ldr	r3, [r5, #16]
 8002c74:	f88d 2007 	strb.w	r2, [sp, #7]
 8002c78:	b90b      	cbnz	r3, 8002c7e <_ZN11stepping_md13CanControllerIhE6updateEv+0x5e>
	__throw_bad_function_call();
 8002c7a:	f003 fc90 	bl	800659e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8002c7e:	696b      	ldr	r3, [r5, #20]
 8002c80:	aa02      	add	r2, sp, #8
 8002c82:	f10d 0107 	add.w	r1, sp, #7
 8002c86:	f105 0008 	add.w	r0, r5, #8
 8002c8a:	4798      	blx	r3
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f7ff ff74 	bl	8002b7c <_ZNSt6vectorIN6CRSLib3Can6RM00087RxFrameESaIS3_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS3_S5_EE>
 8002c94:	4604      	mov	r4, r0
				continue;
 8002c96:	e7de      	b.n	8002c56 <_ZN11stepping_md13CanControllerIhE6updateEv+0x36>
      { return __normal_iterator(_M_current++); }
 8002c98:	3418      	adds	r4, #24
 8002c9a:	e7dc      	b.n	8002c56 <_ZN11stepping_md13CanControllerIhE6updateEv+0x36>
	}
 8002c9c:	b009      	add	sp, #36	; 0x24
 8002c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ca0:	2000032c 	.word	0x2000032c

08002ca4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
 8002ca4:	b513      	push	{r0, r1, r4, lr}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002ca6:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cac:	c803      	ldmia	r0, {r0, r1}
 8002cae:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8002cb2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002cb6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8002cba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002cbe:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8002cc2:	b002      	add	sp, #8
 8002cc4:	bd10      	pop	{r4, pc}

08002cc6 <_ZN11stepping_md13CanControllerIfE12set_callbackESt8functionIFifmEE>:
	void CanController<T>::set_callback(const std::function<int(T, uint32_t)> callback){
 8002cc6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8002cc8:	2300      	movs	r3, #0
 8002cca:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 8002ccc:	688b      	ldr	r3, [r1, #8]
 8002cce:	4604      	mov	r4, r0
 8002cd0:	460d      	mov	r5, r1
		this->callback = callback;
 8002cd2:	f100 0608 	add.w	r6, r0, #8
      if (static_cast<bool>(__x))
 8002cd6:	b133      	cbz	r3, 8002ce6 <_ZN11stepping_md13CanControllerIfE12set_callbackESt8functionIFifmEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4668      	mov	r0, sp
 8002cdc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002cde:	68eb      	ldr	r3, [r5, #12]
 8002ce0:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 8002ce2:	68ab      	ldr	r3, [r5, #8]
 8002ce4:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
 8002ce6:	4631      	mov	r1, r6
 8002ce8:	4668      	mov	r0, sp
 8002cea:	f7ff ffdb 	bl	8002ca4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cee:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8002cf0:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002cf2:	6123      	str	r3, [r4, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002cf4:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002cf6:	9202      	str	r2, [sp, #8]
 8002cf8:	6962      	ldr	r2, [r4, #20]
    class function<_Res(_ArgTypes...)>
 8002cfa:	4668      	mov	r0, sp
      __b = _GLIBCXX_MOVE(__tmp);
 8002cfc:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8002cfe:	9203      	str	r2, [sp, #12]
 8002d00:	f7ff fe26 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	}
 8002d04:	b004      	add	sp, #16
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
    : _Function_base()
 8002d08:	4668      	mov	r0, sp
 8002d0a:	f7ff fe21 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
 8002d0e:	f002 fcd9 	bl	80056c4 <__cxa_end_cleanup>

08002d12 <_ZN11stepping_md13CanControllerIhE12set_callbackESt8functionIFihmEE>:
	void CanController<T>::set_callback(const std::function<int(T, uint32_t)> callback){
 8002d12:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    _Function_base() : _M_manager(nullptr) { }
 8002d14:	2300      	movs	r3, #0
 8002d16:	9302      	str	r3, [sp, #8]
    bool _M_empty() const { return !_M_manager; }
 8002d18:	688b      	ldr	r3, [r1, #8]
 8002d1a:	4604      	mov	r4, r0
 8002d1c:	460d      	mov	r5, r1
		this->callback = callback;
 8002d1e:	f100 0608 	add.w	r6, r0, #8
      if (static_cast<bool>(__x))
 8002d22:	b133      	cbz	r3, 8002d32 <_ZN11stepping_md13CanControllerIhE12set_callbackESt8functionIFihmEE+0x20>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8002d24:	2202      	movs	r2, #2
 8002d26:	4668      	mov	r0, sp
 8002d28:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8002d2a:	68eb      	ldr	r3, [r5, #12]
 8002d2c:	9303      	str	r3, [sp, #12]
	  _M_manager = __x._M_manager;
 8002d2e:	68ab      	ldr	r3, [r5, #8]
 8002d30:	9302      	str	r3, [sp, #8]
	std::swap(_M_functor, __x._M_functor);
 8002d32:	4631      	mov	r1, r6
 8002d34:	4668      	mov	r0, sp
 8002d36:	f7ff ffb5 	bl	8002ca4 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002d3a:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8002d3c:	6922      	ldr	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8002d3e:	6123      	str	r3, [r4, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8002d40:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8002d42:	9202      	str	r2, [sp, #8]
 8002d44:	6962      	ldr	r2, [r4, #20]
    class function<_Res(_ArgTypes...)>
 8002d46:	4668      	mov	r0, sp
      __b = _GLIBCXX_MOVE(__tmp);
 8002d48:	6163      	str	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
 8002d4a:	9203      	str	r2, [sp, #12]
 8002d4c:	f7ff fe00 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	}
 8002d50:	b004      	add	sp, #16
 8002d52:	bd70      	pop	{r4, r5, r6, pc}
    : _Function_base()
 8002d54:	4668      	mov	r0, sp
 8002d56:	f7ff fdfb 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
 8002d5a:	f002 fcb3 	bl	80056c4 <__cxa_end_cleanup>
	...

08002d60 <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E>:
	this->_M_size = 0;
 8002d60:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x38>)
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002d64:	490d      	ldr	r1, [pc, #52]	; (8002d9c <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x3c>)
	this->_M_size = 0;
 8002d66:	609a      	str	r2, [r3, #8]
	this->_M_next = this->_M_prev = this;
 8002d68:	e9c3 3300 	strd	r3, r3, [r3]
 8002d6c:	680b      	ldr	r3, [r1, #0]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	600b      	str	r3, [r1, #0]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d74:	bf02      	ittt	eq
 8002d76:	4b0a      	ldreq	r3, [pc, #40]	; (8002da0 <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x40>)
 8002d78:	e9c3 2200 	strdeq	r2, r2, [r3]
 8002d7c:	609a      	streq	r2, [r3, #8]
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x44>)
 8002d80:	6813      	ldr	r3, [r2, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	bf01      	itttt	eq
 8002d8a:	2200      	moveq	r2, #0
 8002d8c:	4b06      	ldreq	r3, [pc, #24]	; (8002da8 <_GLOBAL__sub_I__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x48>)
 8002d8e:	e9c3 2200 	strdeq	r2, r2, [r3]
 8002d92:	609a      	streq	r2, [r3, #8]
			}
			ite++;
		}
	}
	*/
}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	20000344 	.word	0x20000344
 8002d9c:	20000328 	.word	0x20000328
 8002da0:	20000338 	.word	0x20000338
 8002da4:	20000324 	.word	0x20000324
 8002da8:	2000032c 	.word	0x2000032c

08002dac <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E>:
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002dac:	4a0d      	ldr	r2, [pc, #52]	; (8002de4 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x38>)
}
 8002dae:	b538      	push	{r3, r4, r5, lr}
	std::vector<CRSLib::Can::RM0008::RxFrame> CanController<T>::rx_frames;
 8002db0:	6813      	ldr	r3, [r2, #0]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	b913      	cbnz	r3, 8002dbe <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x12>
      }
 8002db8:	480b      	ldr	r0, [pc, #44]	; (8002de8 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x3c>)
 8002dba:	f7ff fe2f 	bl	8002a1c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
 8002dbe:	4a0b      	ldr	r2, [pc, #44]	; (8002dec <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x40>)
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]
 8002dc6:	b913      	cbnz	r3, 8002dce <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x22>
 8002dc8:	4809      	ldr	r0, [pc, #36]	; (8002df0 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x44>)
 8002dca:	f7ff fe27 	bl	8002a1c <_ZNSt12_Vector_baseIN6CRSLib3Can6RM00087RxFrameESaIS3_EED1Ev>
    void
    _List_base<_Tp, _Alloc>::
    _M_clear() _GLIBCXX_NOEXCEPT
    {
      typedef _List_node<_Tp>  _Node;
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8002dce:	4c09      	ldr	r4, [pc, #36]	; (8002df4 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x48>)
 8002dd0:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 8002dd2:	42a0      	cmp	r0, r4
 8002dd4:	d005      	beq.n	8002de2 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x36>
	{
	  _Node* __tmp = static_cast<_Node*>(__cur);
	  __cur = __tmp->_M_next;
 8002dd6:	6805      	ldr	r5, [r0, #0]
 8002dd8:	210c      	movs	r1, #12
 8002dda:	f002 fbdd 	bl	8005598 <_ZdlPvj>
 8002dde:	4628      	mov	r0, r5
 8002de0:	e7f7      	b.n	8002dd2 <_GLOBAL__sub_D__ZN11stepping_md18CanController_Base9instancesB5cxx11E+0x26>
}
 8002de2:	bd38      	pop	{r3, r4, r5, pc}
 8002de4:	20000324 	.word	0x20000324
 8002de8:	2000032c 	.word	0x2000032c
 8002dec:	20000328 	.word	0x20000328
 8002df0:	20000338 	.word	0x20000338
 8002df4:	20000344 	.word	0x20000344

08002df8 <_ZN11stepping_md20MotorController_Base6updateEv>:
				for(MotorController_Base controller : MotorController_Base::instances){
					controller.update();
				}
			}
			virtual void emergency_callback(void){throw std::logic_error("emergency_callback is not implemented");}
			virtual void update(void){throw std::logic_error("update is not implemented");}
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	2008      	movs	r0, #8
 8002dfc:	f002 fc28 	bl	8005650 <__cxa_allocate_exception>
 8002e00:	4906      	ldr	r1, [pc, #24]	; (8002e1c <_ZN11stepping_md20MotorController_Base6updateEv+0x24>)
 8002e02:	4604      	mov	r4, r0
 8002e04:	f003 fb56 	bl	80064b4 <_ZNSt11logic_errorC1EPKc>
 8002e08:	4620      	mov	r0, r4
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <_ZN11stepping_md20MotorController_Base6updateEv+0x28>)
 8002e0c:	4905      	ldr	r1, [pc, #20]	; (8002e24 <_ZN11stepping_md20MotorController_Base6updateEv+0x2c>)
 8002e0e:	f003 f803 	bl	8005e18 <__cxa_throw>
 8002e12:	4620      	mov	r0, r4
 8002e14:	f002 fc32 	bl	800567c <__cxa_free_exception>
 8002e18:	f002 fc54 	bl	80056c4 <__cxa_end_cleanup>
 8002e1c:	08006c6c 	.word	0x08006c6c
 8002e20:	08006425 	.word	0x08006425
 8002e24:	080070e4 	.word	0x080070e4

08002e28 <_ZN11stepping_md20MotorController_Base18emergency_callbackEv>:
			virtual void emergency_callback(void){throw std::logic_error("emergency_callback is not implemented");}
 8002e28:	b510      	push	{r4, lr}
 8002e2a:	2008      	movs	r0, #8
 8002e2c:	f002 fc10 	bl	8005650 <__cxa_allocate_exception>
 8002e30:	4906      	ldr	r1, [pc, #24]	; (8002e4c <_ZN11stepping_md20MotorController_Base18emergency_callbackEv+0x24>)
 8002e32:	4604      	mov	r4, r0
 8002e34:	f003 fb3e 	bl	80064b4 <_ZNSt11logic_errorC1EPKc>
 8002e38:	4620      	mov	r0, r4
 8002e3a:	4a05      	ldr	r2, [pc, #20]	; (8002e50 <_ZN11stepping_md20MotorController_Base18emergency_callbackEv+0x28>)
 8002e3c:	4905      	ldr	r1, [pc, #20]	; (8002e54 <_ZN11stepping_md20MotorController_Base18emergency_callbackEv+0x2c>)
 8002e3e:	f002 ffeb 	bl	8005e18 <__cxa_throw>
 8002e42:	4620      	mov	r0, r4
 8002e44:	f002 fc1a 	bl	800567c <__cxa_free_exception>
 8002e48:	f002 fc3c 	bl	80056c4 <__cxa_end_cleanup>
 8002e4c:	08006d4c 	.word	0x08006d4c
 8002e50:	08006425 	.word	0x08006425
 8002e54:	080070e4 	.word	0x080070e4

08002e58 <_ZN11stepping_md15MotorController15update_positionEv>:

namespace stepping_md
{
	std::list<MotorController_Base> MotorController_Base::instances;

    void MotorController::update_position(){
 8002e58:	b538      	push	{r3, r4, r5, lr}
 8002e5a:	4604      	mov	r4, r0
        //現在の位置を更新する
        //開始時間から計算する
        int time_diff = HAL_GetTick() - start_time;//ms
 8002e5c:	f001 faa8 	bl	80043b0 <HAL_GetTick>
 8002e60:	6a25      	ldr	r5, [r4, #32]
 8002e62:	1b45      	subs	r5, r0, r5
        start_time = HAL_GetTick();
 8002e64:	f001 faa4 	bl	80043b0 <HAL_GetTick>
 8002e68:	6220      	str	r0, [r4, #32]
        constexpr float rpm_to_rad_per_ms = 2 * std::numbers::pi / 60000;
        positon +=direction * time_diff * current_speed * rpm_to_rad_per_ms;
 8002e6a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002e6c:	4368      	muls	r0, r5
 8002e6e:	f7fd fa39 	bl	80002e4 <__aeabi_i2f>
 8002e72:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8002e74:	f7fd fa8a 	bl	800038c <__aeabi_fmul>
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <_ZN11stepping_md15MotorController15update_positionEv+0x34>)
 8002e7a:	f7fd fa87 	bl	800038c <__aeabi_fmul>
 8002e7e:	4601      	mov	r1, r0
 8002e80:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002e82:	f7fd f97b 	bl	800017c <__addsf3>
 8002e86:	6320      	str	r0, [r4, #48]	; 0x30
    }
 8002e88:	bd38      	pop	{r3, r4, r5, pc}
 8002e8a:	bf00      	nop
 8002e8c:	38db9cfe 	.word	0x38db9cfe

08002e90 <_ZN11stepping_md15MotorController13set_directionEi>:

    //方向を設定する。引数が正のとき正転、負のとき逆転
    void MotorController::set_direction(int _direction){
 8002e90:	b538      	push	{r3, r4, r5, lr}
 8002e92:	460d      	mov	r5, r1
 8002e94:	4604      	mov	r4, r0
        //変更前に現在の位置を更新する
        update_position();
 8002e96:	f7ff ffdf 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        //設定の取得
        if(_direction > 0){
 8002e9a:	2d00      	cmp	r5, #0
            direction = 1;
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_SET);
        }else{
            direction = -1;
 8002e9c:	bfd4      	ite	le
 8002e9e:	f04f 33ff 	movle.w	r3, #4294967295
            direction = 1;
 8002ea2:	2201      	movgt	r2, #1
 8002ea4:	89a1      	ldrh	r1, [r4, #12]
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002ea6:	6920      	ldr	r0, [r4, #16]
            direction = 1;
 8002ea8:	bfce      	itee	gt
 8002eaa:	6262      	strgt	r2, [r4, #36]	; 0x24
            direction = -1;
 8002eac:	6263      	strle	r3, [r4, #36]	; 0x24
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002eae:	2200      	movle	r2, #0
        }
    }
 8002eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            HAL_GPIO_WritePin(dir_port, dir_pin, GPIO_PIN_RESET);
 8002eb4:	f001 bd56 	b.w	8004964 <HAL_GPIO_WritePin>

08002eb8 <_ZN11stepping_md15MotorController5startEv>:
    void MotorController::disable(){
        update_position();
        stop();
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
    }
    void MotorController::start(){
 8002eb8:	b510      	push	{r4, lr}
 8002eba:	4604      	mov	r4, r0
        update_position();
 8002ebc:	f7ff ffcc 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        HAL_TIM_PWM_Start(pwm_tim, TIM_CHANNEL_1);
 8002ec0:	2100      	movs	r1, #0
 8002ec2:	69a0      	ldr	r0, [r4, #24]
 8002ec4:	f002 fa64 	bl	8005390 <HAL_TIM_PWM_Start>
        current_speed = speed;
 8002ec8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002eca:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 8002ecc:	bd10      	pop	{r4, pc}

08002ece <_ZN11stepping_md15MotorController4stopEv>:
    void MotorController::stop(){
 8002ece:	b510      	push	{r4, lr}
 8002ed0:	4604      	mov	r4, r0
        update_position();
 8002ed2:	f7ff ffc1 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        HAL_TIM_PWM_Stop(pwm_tim, TIM_CHANNEL_1);
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	69a0      	ldr	r0, [r4, #24]
 8002eda:	f002 fa97 	bl	800540c <HAL_TIM_PWM_Stop>
        current_speed = 0;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
    }
 8002ee2:	bd10      	pop	{r4, pc}

08002ee4 <_ZN11stepping_md15MotorController6enableEv>:
    void MotorController::enable(){
 8002ee4:	b510      	push	{r4, lr}
 8002ee6:	4604      	mov	r4, r0
        update_position();
 8002ee8:	f7ff ffb6 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        stop();
 8002eec:	4620      	mov	r0, r4
 8002eee:	f7ff ffee 	bl	8002ece <_ZN11stepping_md15MotorController4stopEv>
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 8002ef2:	88a1      	ldrh	r1, [r4, #4]
 8002ef4:	68a0      	ldr	r0, [r4, #8]
 8002ef6:	2201      	movs	r2, #1
    }
 8002ef8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_SET);
 8002efc:	f001 bd32 	b.w	8004964 <HAL_GPIO_WritePin>

08002f00 <_ZN11stepping_md15MotorController7disableEv>:
    void MotorController::disable(){
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4604      	mov	r4, r0
        update_position();
 8002f04:	f7ff ffa8 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        stop();
 8002f08:	4620      	mov	r0, r4
 8002f0a:	f7ff ffe0 	bl	8002ece <_ZN11stepping_md15MotorController4stopEv>
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 8002f0e:	88a1      	ldrh	r1, [r4, #4]
 8002f10:	68a0      	ldr	r0, [r4, #8]
 8002f12:	2200      	movs	r2, #0
    }
 8002f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        HAL_GPIO_WritePin(ena_port, ena_pin, GPIO_PIN_RESET);
 8002f18:	f001 bd24 	b.w	8004964 <HAL_GPIO_WritePin>

08002f1c <_ZN11stepping_md15MotorController18emergency_callbackEv>:

			//モーターの回転速度を設定する関数
			//引数はrpm
			void set_speed(float speed);
			//Emergencyスイッチが扱われたとき呼ばれるコールバック関数
		    void emergency_callback() override{
 8002f1c:	b510      	push	{r4, lr}
 8002f1e:	4604      	mov	r4, r0
		        stop();
 8002f20:	f7ff ffd5 	bl	8002ece <_ZN11stepping_md15MotorController4stopEv>
		        disable();
 8002f24:	4620      	mov	r0, r4
		    }
 8002f26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		        disable();
 8002f2a:	f7ff bfe9 	b.w	8002f00 <_ZN11stepping_md15MotorController7disableEv>

08002f2e <_ZN11stepping_md15MotorController14move_to_targetEf>:
    void MotorController::move_to_target(float target){
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	4604      	mov	r4, r0
 8002f32:	4608      	mov	r0, r1
        //方向を決める
        set_direction(target - positon);
 8002f34:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002f36:	f7fd f91f 	bl	8000178 <__aeabi_fsub>
 8002f3a:	f7fd fbed 	bl	8000718 <__aeabi_f2iz>
 8002f3e:	4601      	mov	r1, r0
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7ff ffa5 	bl	8002e90 <_ZN11stepping_md15MotorController13set_directionEi>
        start();
 8002f46:	4620      	mov	r0, r4
    }
 8002f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        start();
 8002f4c:	f7ff bfb4 	b.w	8002eb8 <_ZN11stepping_md15MotorController5startEv>

08002f50 <_ZN11stepping_md15MotorController6updateEv>:

        //pwmの周期を設定する
        pwm_tim->Instance->ARR = (uint32_t)(HAL_RCC_GetPCLK1Freq()/speed/motor_param.ppr);
    }

    void MotorController::update(){
 8002f50:	b530      	push	{r4, r5, lr}
 8002f52:	4604      	mov	r4, r0
 8002f54:	b085      	sub	sp, #20
        //現在の位置を更新する
        update_position();
 8002f56:	f7ff ff7f 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>

        stepping_md::MotorParam motor_param = params.get_motor_param();
 8002f5a:	69e1      	ldr	r1, [r4, #28]
 8002f5c:	a801      	add	r0, sp, #4
 8002f5e:	f000 f88f 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 8002f62:	9d03      	ldr	r5, [sp, #12]
        //目標位置に到達しているか確認する
        if(abs(motor_param.target - positon) < error_threshold){
 8002f64:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002f66:	4628      	mov	r0, r5
 8002f68:	f7fd f906 	bl	8000178 <__aeabi_fsub>
 8002f6c:	f7fd fbd4 	bl	8000718 <__aeabi_f2iz>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	bfb8      	it	lt
 8002f74:	4240      	neglt	r0, r0
 8002f76:	f7fd f9b5 	bl	80002e4 <__aeabi_i2f>
 8002f7a:	6961      	ldr	r1, [r4, #20]
 8002f7c:	f7fd fba4 	bl	80006c8 <__aeabi_fcmplt>
 8002f80:	b128      	cbz	r0, 8002f8e <_ZN11stepping_md15MotorController6updateEv+0x3e>
            //目標位置に到達している場合は停止する
            stop();
 8002f82:	4620      	mov	r0, r4
        }
        else{
            //目標位置に到達していない場合は、目標位置に向かって動かす
            move_to_target(motor_param.target);
        }
    }      
 8002f84:	b005      	add	sp, #20
 8002f86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            stop();
 8002f8a:	f7ff bfa0 	b.w	8002ece <_ZN11stepping_md15MotorController4stopEv>
            move_to_target(motor_param.target);
 8002f8e:	4629      	mov	r1, r5
 8002f90:	4620      	mov	r0, r4
    }      
 8002f92:	b005      	add	sp, #20
 8002f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            move_to_target(motor_param.target);
 8002f98:	f7ff bfc9 	b.w	8002f2e <_ZN11stepping_md15MotorController14move_to_targetEf>

08002f9c <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE>:
    MotorController::MotorController(
 8002f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			explicit MotorController_Base(){MotorController_Base::instances.push_back(*this);}
 8002fa0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8003010 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE+0x74>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	f8c0 8000 	str.w	r8, [r0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002faa:	200c      	movs	r0, #12
 8002fac:	4616      	mov	r6, r2
 8002fae:	461d      	mov	r5, r3
 8002fb0:	460f      	mov	r7, r1
 8002fb2:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8002fb6:	f002 ff49 	bl	8005e4c <_Znwj>
	class MotorController_Base{
 8002fba:	f8c0 8008 	str.w	r8, [r0, #8]
	 __tmp->_M_hook(__position._M_node);
 8002fbe:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8003014 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE+0x78>
 8002fc2:	4641      	mov	r1, r8
 8002fc4:	f003 fa24 	bl	8006410 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8002fc8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    ) : ena_pin(ena_pin), ena_port(ena_port), dir_pin(dir_pin), dir_port(dir_port),error_threshold(error_threshold), pwm_tim(pwm_tim), params(params){
 8002fcc:	2200      	movs	r2, #0
 8002fce:	3301      	adds	r3, #1
 8002fd0:	f8c8 3008 	str.w	r3, [r8, #8]
 8002fd4:	4b10      	ldr	r3, [pc, #64]	; (8003018 <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE+0x7c>)
        enable();
 8002fd6:	4620      	mov	r0, r4
    ) : ena_pin(ena_pin), ena_port(ena_port), dir_pin(dir_pin), dir_port(dir_port),error_threshold(error_threshold), pwm_tim(pwm_tim), params(params){
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	9b08      	ldr	r3, [sp, #32]
 8002fdc:	80a7      	strh	r7, [r4, #4]
 8002fde:	6123      	str	r3, [r4, #16]
 8002fe0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002fe2:	60a6      	str	r6, [r4, #8]
 8002fe4:	6163      	str	r3, [r4, #20]
 8002fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002fe8:	81a5      	strh	r5, [r4, #12]
 8002fea:	61e3      	str	r3, [r4, #28]
 8002fec:	2301      	movs	r3, #1
 8002fee:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c4 9018 	str.w	r9, [r4, #24]
 8002ff8:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ffa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002ffc:	6323      	str	r3, [r4, #48]	; 0x30
        enable();
 8002ffe:	f7ff ff71 	bl	8002ee4 <_ZN11stepping_md15MotorController6enableEv>
        pwm_tim->Instance->CCR1 =100;
 8003002:	2264      	movs	r2, #100	; 0x64
 8003004:	f8d9 3000 	ldr.w	r3, [r9]
    }
 8003008:	4620      	mov	r0, r4
        pwm_tim->Instance->CCR1 =100;
 800300a:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800300c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003010:	08006da8 	.word	0x08006da8
 8003014:	20000350 	.word	0x20000350
 8003018:	08006de8 	.word	0x08006de8

0800301c <_ZN11stepping_md15MotorController9set_speedEf>:
    void MotorController::set_speed(float _speed){
 800301c:	b530      	push	{r4, r5, lr}
 800301e:	4604      	mov	r4, r0
 8003020:	460d      	mov	r5, r1
 8003022:	b085      	sub	sp, #20
        update_position();
 8003024:	f7ff ff18 	bl	8002e58 <_ZN11stepping_md15MotorController15update_positionEv>
        stepping_md::MotorParam motor_param = params.get_motor_param();
 8003028:	69e1      	ldr	r1, [r4, #28]
        speed = _speed;
 800302a:	62a5      	str	r5, [r4, #40]	; 0x28
        stepping_md::MotorParam motor_param = params.get_motor_param();
 800302c:	a801      	add	r0, sp, #4
 800302e:	f000 f827 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
        pwm_tim->Instance->ARR = (uint32_t)(HAL_RCC_GetPCLK1Freq()/speed/motor_param.ppr);
 8003032:	f001 ff1b 	bl	8004e6c <HAL_RCC_GetPCLK1Freq>
 8003036:	69a3      	ldr	r3, [r4, #24]
 8003038:	681d      	ldr	r5, [r3, #0]
 800303a:	f7fd f94f 	bl	80002dc <__aeabi_ui2f>
 800303e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003040:	f7fd fa58 	bl	80004f4 <__aeabi_fdiv>
 8003044:	9902      	ldr	r1, [sp, #8]
 8003046:	f7fd fa55 	bl	80004f4 <__aeabi_fdiv>
 800304a:	f7fd fb8b 	bl	8000764 <__aeabi_f2uiz>
 800304e:	62e8      	str	r0, [r5, #44]	; 0x2c
    }
 8003050:	b005      	add	sp, #20
 8003052:	bd30      	pop	{r4, r5, pc}

08003054 <_GLOBAL__sub_I__ZN11stepping_md20MotorController_Base9instancesB5cxx11E>:
	this->_M_size = 0;
 8003054:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 8003056:	4b02      	ldr	r3, [pc, #8]	; (8003060 <_GLOBAL__sub_I__ZN11stepping_md20MotorController_Base9instancesB5cxx11E+0xc>)
 8003058:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 800305c:	609a      	str	r2, [r3, #8]

    void MotorController::set_register(const Parameters& params){
        this->params = params;
    }

} // namespace stapping_md
 800305e:	4770      	bx	lr
 8003060:	20000350 	.word	0x20000350

08003064 <_GLOBAL__sub_D__ZN11stepping_md20MotorController_Base9instancesB5cxx11E>:
 8003064:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 8003066:	4c05      	ldr	r4, [pc, #20]	; (800307c <_GLOBAL__sub_D__ZN11stepping_md20MotorController_Base9instancesB5cxx11E+0x18>)
 8003068:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 800306a:	42a0      	cmp	r0, r4
 800306c:	d005      	beq.n	800307a <_GLOBAL__sub_D__ZN11stepping_md20MotorController_Base9instancesB5cxx11E+0x16>
	  __cur = __tmp->_M_next;
 800306e:	6805      	ldr	r5, [r0, #0]
	::operator delete(__p
 8003070:	210c      	movs	r1, #12
 8003072:	f002 fa91 	bl	8005598 <_ZdlPvj>
 8003076:	4628      	mov	r0, r5
 8003078:	e7f7      	b.n	800306a <_GLOBAL__sub_D__ZN11stepping_md20MotorController_Base9instancesB5cxx11E+0x6>
 800307a:	bd38      	pop	{r3, r4, r5, pc}
 800307c:	20000350 	.word	0x20000350

08003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>:
	std::list<Parameters_Base> Parameters_Base::instances;

    //パラメータを取得する関数
	//第1引数は結果を格納する構造体オブジェクトへのポインタ
	MotorParam Parameters::get_motor_param()
    {
 8003080:	4603      	mov	r3, r0
        return SMParam;
 8003082:	3108      	adds	r1, #8
 8003084:	c907      	ldmia	r1, {r0, r1, r2}
 8003086:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 800308a:	4618      	mov	r0, r3
 800308c:	4770      	bx	lr

0800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>:

	//パラメータを設定する関数
	//第1引数は設定内容が書かれた構造体オブジェクト
	void Parameters::set_motor_param(const MotorParam& param)
    {
        SMParam = param;
 800308e:	f100 0308 	add.w	r3, r0, #8
 8003092:	c907      	ldmia	r1, {r0, r1, r2}
 8003094:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    }
 8003098:	4770      	bx	lr

0800309a <_ZN11stepping_md10Parameters7get_BIDEv>:

	//BIDを取得する関数
	uint16_t Parameters::get_BID()
    {
        return BID;
    }
 800309a:	8880      	ldrh	r0, [r0, #4]
 800309c:	4770      	bx	lr

0800309e <_ZN11stepping_md10Parameters7set_BIDEt>:

	//BIDを設定する関数
	void Parameters::set_BID(const uint16_t bid)
    {
        BID = bid;
 800309e:	8081      	strh	r1, [r0, #4]
    }
 80030a0:	4770      	bx	lr
	...

080030a4 <_GLOBAL__sub_I__ZN11stepping_md15Parameters_Base9instancesB5cxx11E>:
 80030a4:	2200      	movs	r2, #0
	this->_M_next = this->_M_prev = this;
 80030a6:	4b02      	ldr	r3, [pc, #8]	; (80030b0 <_GLOBAL__sub_I__ZN11stepping_md15Parameters_Base9instancesB5cxx11E+0xc>)
 80030a8:	e9c3 3300 	strd	r3, r3, [r3]
	this->_M_size = 0;
 80030ac:	609a      	str	r2, [r3, #8]

}
 80030ae:	4770      	bx	lr
 80030b0:	2000035c 	.word	0x2000035c

080030b4 <_GLOBAL__sub_D__ZN11stepping_md15Parameters_Base9instancesB5cxx11E>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
      __detail::_List_node_base* __cur = _M_impl._M_node._M_next;
 80030b6:	4c05      	ldr	r4, [pc, #20]	; (80030cc <_GLOBAL__sub_D__ZN11stepping_md15Parameters_Base9instancesB5cxx11E+0x18>)
 80030b8:	6820      	ldr	r0, [r4, #0]
      while (__cur != &_M_impl._M_node)
 80030ba:	42a0      	cmp	r0, r4
 80030bc:	d005      	beq.n	80030ca <_GLOBAL__sub_D__ZN11stepping_md15Parameters_Base9instancesB5cxx11E+0x16>
	  __cur = __tmp->_M_next;
 80030be:	6805      	ldr	r5, [r0, #0]
 80030c0:	210c      	movs	r1, #12
 80030c2:	f002 fa69 	bl	8005598 <_ZdlPvj>
 80030c6:	4628      	mov	r0, r5
 80030c8:	e7f7      	b.n	80030ba <_GLOBAL__sub_D__ZN11stepping_md15Parameters_Base9instancesB5cxx11E+0x6>
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	2000035c 	.word	0x2000035c

080030d0 <_ZN11stepping_md11led_processEv>:
static uint32_t green_led_last_toggle;
static bool is_can_led_on = false;
static bool is_green_led_on = true;

namespace stepping_md{
	void led_process(void){
 80030d0:	b538      	push	{r3, r4, r5, lr}
		constexpr unsigned int can_led_on_time = 60000; //us
		constexpr unsigned long green_led_on_time = 1800000; //us
		constexpr unsigned long green_led_off_time = 200000; //us
		if(is_can_led_on && ((HAL_GetTick() - can_led_last_on) > can_led_on_time)){
 80030d2:	4c1d      	ldr	r4, [pc, #116]	; (8003148 <_ZN11stepping_md11led_processEv+0x78>)
 80030d4:	7823      	ldrb	r3, [r4, #0]
 80030d6:	b183      	cbz	r3, 80030fa <_ZN11stepping_md11led_processEv+0x2a>
 80030d8:	f001 f96a 	bl	80043b0 <HAL_GetTick>
 80030dc:	4b1b      	ldr	r3, [pc, #108]	; (800314c <_ZN11stepping_md11led_processEv+0x7c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1ac0      	subs	r0, r0, r3
 80030e2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80030e6:	4298      	cmp	r0, r3
 80030e8:	d907      	bls.n	80030fa <_ZN11stepping_md11led_processEv+0x2a>
			HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030f0:	4817      	ldr	r0, [pc, #92]	; (8003150 <_ZN11stepping_md11led_processEv+0x80>)
 80030f2:	f001 fc37 	bl	8004964 <HAL_GPIO_WritePin>
			is_can_led_on = false;
 80030f6:	2300      	movs	r3, #0
 80030f8:	7023      	strb	r3, [r4, #0]
		}

		if(is_green_led_on && ((HAL_GetTick() - green_led_last_toggle) > green_led_on_time)){
 80030fa:	4d16      	ldr	r5, [pc, #88]	; (8003154 <_ZN11stepping_md11led_processEv+0x84>)
 80030fc:	4c16      	ldr	r4, [pc, #88]	; (8003158 <_ZN11stepping_md11led_processEv+0x88>)
 80030fe:	782b      	ldrb	r3, [r5, #0]
 8003100:	b143      	cbz	r3, 8003114 <_ZN11stepping_md11led_processEv+0x44>
 8003102:	f001 f955 	bl	80043b0 <HAL_GetTick>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	1ac0      	subs	r0, r0, r3
 800310a:	4b14      	ldr	r3, [pc, #80]	; (800315c <_ZN11stepping_md11led_processEv+0x8c>)
 800310c:	4298      	cmp	r0, r3
 800310e:	d80f      	bhi.n	8003130 <_ZN11stepping_md11led_processEv+0x60>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
			is_green_led_on = false;
			green_led_last_toggle = HAL_GetTick();
		}else if((!is_green_led_on) && ((HAL_GetTick() - green_led_last_toggle) > green_led_off_time)){
 8003110:	782b      	ldrb	r3, [r5, #0]
 8003112:	b9bb      	cbnz	r3, 8003144 <_ZN11stepping_md11led_processEv+0x74>
 8003114:	f001 f94c 	bl	80043b0 <HAL_GetTick>
 8003118:	6823      	ldr	r3, [r4, #0]
 800311a:	1ac0      	subs	r0, r0, r3
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <_ZN11stepping_md11led_processEv+0x90>)
 800311e:	4298      	cmp	r0, r3
 8003120:	d910      	bls.n	8003144 <_ZN11stepping_md11led_processEv+0x74>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	480f      	ldr	r0, [pc, #60]	; (8003164 <_ZN11stepping_md11led_processEv+0x94>)
 8003126:	4611      	mov	r1, r2
 8003128:	f001 fc1c 	bl	8004964 <HAL_GPIO_WritePin>
			is_green_led_on = true;
 800312c:	2301      	movs	r3, #1
 800312e:	e005      	b.n	800313c <_ZN11stepping_md11led_processEv+0x6c>
			HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	2101      	movs	r1, #1
 8003134:	480b      	ldr	r0, [pc, #44]	; (8003164 <_ZN11stepping_md11led_processEv+0x94>)
 8003136:	f001 fc15 	bl	8004964 <HAL_GPIO_WritePin>
			is_green_led_on = false;
 800313a:	2300      	movs	r3, #0
			is_green_led_on = true;
 800313c:	702b      	strb	r3, [r5, #0]
			green_led_last_toggle = HAL_GetTick();
 800313e:	f001 f937 	bl	80043b0 <HAL_GetTick>
 8003142:	6020      	str	r0, [r4, #0]
		}
	}
 8003144:	bd38      	pop	{r3, r4, r5, pc}
 8003146:	bf00      	nop
 8003148:	20000368 	.word	0x20000368
 800314c:	2000036c 	.word	0x2000036c
 8003150:	40011000 	.word	0x40011000
 8003154:	20000000 	.word	0x20000000
 8003158:	20000370 	.word	0x20000370
 800315c:	001b7740 	.word	0x001b7740
 8003160:	00030d40 	.word	0x00030d40
 8003164:	40010c00 	.word	0x40010c00

08003168 <_ZN11stepping_md13blink_can_ledEv>:

	void blink_can_led(void){
 8003168:	b510      	push	{r4, lr}
		is_can_led_on = true;
 800316a:	2401      	movs	r4, #1
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <_ZN11stepping_md13blink_can_ledEv+0x20>)
 800316e:	701c      	strb	r4, [r3, #0]
		can_led_last_on = HAL_GetTick();
 8003170:	f001 f91e 	bl	80043b0 <HAL_GetTick>
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <_ZN11stepping_md13blink_can_ledEv+0x24>)
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 8003176:	4622      	mov	r2, r4
	}
 8003178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		can_led_last_on = HAL_GetTick();
 800317c:	6018      	str	r0, [r3, #0]
		HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_SET);
 800317e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003182:	4803      	ldr	r0, [pc, #12]	; (8003190 <_ZN11stepping_md13blink_can_ledEv+0x28>)
 8003184:	f001 bbee 	b.w	8004964 <HAL_GPIO_WritePin>
 8003188:	20000368 	.word	0x20000368
 800318c:	2000036c 	.word	0x2000036c
 8003190:	40011000 	.word	0x40011000

08003194 <_ZN11stepping_md13on_yellow_ledEv>:

	void on_yellow_led(void){
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8003194:	2201      	movs	r2, #1
 8003196:	2102      	movs	r1, #2
 8003198:	4801      	ldr	r0, [pc, #4]	; (80031a0 <_ZN11stepping_md13on_yellow_ledEv+0xc>)
 800319a:	f001 bbe3 	b.w	8004964 <HAL_GPIO_WritePin>
 800319e:	bf00      	nop
 80031a0:	40010c00 	.word	0x40010c00

080031a4 <_ZN11stepping_md14off_yellow_ledEv>:
	}

	void off_yellow_led(void){
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2102      	movs	r1, #2
 80031a8:	4801      	ldr	r0, [pc, #4]	; (80031b0 <_ZN11stepping_md14off_yellow_ledEv+0xc>)
 80031aa:	f001 bbdb 	b.w	8004964 <HAL_GPIO_WritePin>
 80031ae:	bf00      	nop
 80031b0:	40010c00 	.word	0x40010c00

080031b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031b4:	b510      	push	{r4, lr}
 80031b6:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031b8:	2214      	movs	r2, #20
 80031ba:	2100      	movs	r1, #0
 80031bc:	a808      	add	r0, sp, #32
 80031be:	f003 faeb 	bl	8006798 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031c2:	2214      	movs	r2, #20
 80031c4:	2100      	movs	r1, #0
 80031c6:	a801      	add	r0, sp, #4
 80031c8:	f003 fae6 	bl	8006798 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031d2:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80031d4:	e9cd 3206 	strd	r3, r2, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80031d8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031de:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80031e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031e6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80031e8:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031ea:	f001 fbcd 	bl	8004988 <HAL_RCC_OscConfig>
 80031ee:	b108      	cbz	r0, 80031f4 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <SystemClock_Config+0x3e>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031f4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80031fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031fe:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003200:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003204:	4621      	mov	r1, r4
 8003206:	a801      	add	r0, sp, #4
 8003208:	f001 fd94 	bl	8004d34 <HAL_RCC_ClockConfig>
 800320c:	b108      	cbz	r0, 8003212 <SystemClock_Config+0x5e>
 800320e:	b672      	cpsid	i
  while (1)
 8003210:	e7fe      	b.n	8003210 <SystemClock_Config+0x5c>
}
 8003212:	b010      	add	sp, #64	; 0x40
 8003214:	bd10      	pop	{r4, pc}
	...

08003218 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	2610      	movs	r6, #16
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b09a      	sub	sp, #104	; 0x68
  HAL_Init();
 800321e:	f001 f8a9 	bl	8004374 <HAL_Init>
  SystemClock_Config();
 8003222:	f7ff ffc7 	bl	80031b4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003226:	4632      	mov	r2, r6
 8003228:	2100      	movs	r1, #0
 800322a:	a812      	add	r0, sp, #72	; 0x48
 800322c:	f003 fab4 	bl	8006798 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003230:	4bb0      	ldr	r3, [pc, #704]	; (80034f4 <main+0x2dc>)
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003232:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003236:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003238:	48af      	ldr	r0, [pc, #700]	; (80034f8 <main+0x2e0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800323a:	4332      	orrs	r2, r6
 800323c:	619a      	str	r2, [r3, #24]
 800323e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003240:	2502      	movs	r5, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003242:	4032      	ands	r2, r6
 8003244:	9201      	str	r2, [sp, #4]
 8003246:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003248:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324a:	2701      	movs	r7, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800324c:	f042 0220 	orr.w	r2, r2, #32
 8003250:	619a      	str	r2, [r3, #24]
 8003252:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003254:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003256:	f002 0220 	and.w	r2, r2, #32
 800325a:	9202      	str	r2, [sp, #8]
 800325c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	699a      	ldr	r2, [r3, #24]
 8003260:	f042 0204 	orr.w	r2, r2, #4
 8003264:	619a      	str	r2, [r3, #24]
 8003266:	699a      	ldr	r2, [r3, #24]
 8003268:	f002 0204 	and.w	r2, r2, #4
 800326c:	9203      	str	r2, [sp, #12]
 800326e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	f042 0208 	orr.w	r2, r2, #8
 8003276:	619a      	str	r2, [r3, #24]
 8003278:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 800327a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	9304      	str	r3, [sp, #16]
 8003282:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LED_CAN_GPIO_Port, LED_CAN_Pin, GPIO_PIN_RESET);
 8003284:	f001 fb6e 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LED0_Pin|LED1_Pin|DIRE_Pin|ENAC_Pin
 8003288:	2200      	movs	r2, #0
 800328a:	f246 4103 	movw	r1, #25603	; 0x6403
 800328e:	489b      	ldr	r0, [pc, #620]	; (80034fc <main+0x2e4>)
 8003290:	f001 fb68 	bl	8004964 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ENAA_Pin|DIRA_Pin|ENAE_Pin, GPIO_PIN_RESET);
 8003294:	2200      	movs	r2, #0
 8003296:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 800329a:	4899      	ldr	r0, [pc, #612]	; (8003500 <main+0x2e8>)
 800329c:	f001 fb62 	bl	8004964 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80032a4:	4894      	ldr	r0, [pc, #592]	; (80034f8 <main+0x2e0>)
 80032a6:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a8:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(LED_CAN_GPIO_Port, &GPIO_InitStruct);
 80032b0:	f001 fa7c 	bl	80047ac <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80032b4:	4b93      	ldr	r3, [pc, #588]	; (8003504 <main+0x2ec>)
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80032b6:	4892      	ldr	r0, [pc, #584]	; (8003500 <main+0x2e8>)
 80032b8:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032ba:	e9cd 3513 	strd	r3, r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pin = EMS_Pin;
 80032be:	9612      	str	r6, [sp, #72]	; 0x48
  HAL_GPIO_Init(EMS_GPIO_Port, &GPIO_InitStruct);
 80032c0:	f001 fa74 	bl	80047ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|DIRE_Pin;
 80032c4:	f240 4303 	movw	r3, #1027	; 0x403
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c8:	488c      	ldr	r0, [pc, #560]	; (80034fc <main+0x2e4>)
 80032ca:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032cc:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d0:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d4:	f001 fa6a 	bl	80047ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAC_Pin|DIRC_Pin;
 80032d8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032dc:	4887      	ldr	r0, [pc, #540]	; (80034fc <main+0x2e4>)
 80032de:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032e0:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032e8:	f001 fa60 	bl	80047ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAA_Pin|DIRA_Pin;
 80032ec:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	4883      	ldr	r0, [pc, #524]	; (8003500 <main+0x2e8>)
 80032f2:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032f4:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f8:	e9cd 5514 	strd	r5, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fc:	f001 fa56 	bl	80047ac <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ENAE_Pin;
 8003300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 8003304:	487e      	ldr	r0, [pc, #504]	; (8003500 <main+0x2e8>)
 8003306:	a912      	add	r1, sp, #72	; 0x48
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003308:	e9cd 3712 	strd	r3, r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330c:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  HAL_GPIO_Init(ENAE_GPIO_Port, &GPIO_InitStruct);
 8003310:	f001 fa4c 	bl	80047ac <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8003314:	4622      	mov	r2, r4
 8003316:	4621      	mov	r1, r4
 8003318:	200a      	movs	r0, #10
 800331a:	f001 f9f3 	bl	8004704 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800331e:	200a      	movs	r0, #10
 8003320:	f001 fa22 	bl	8004768 <HAL_NVIC_EnableIRQ>
  hcan.Instance = CAN1;
 8003324:	4878      	ldr	r0, [pc, #480]	; (8003508 <main+0x2f0>)
 8003326:	4b79      	ldr	r3, [pc, #484]	; (800350c <main+0x2f4>)
  hcan.Init.TimeTriggeredMode = DISABLE;
 8003328:	6184      	str	r4, [r0, #24]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800332a:	8384      	strh	r4, [r0, #28]
  hcan.Init.Prescaler = 16;
 800332c:	e9c0 3600 	strd	r3, r6, [r0]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003330:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003334:	e9c0 4404 	strd	r4, r4, [r0, #16]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8003338:	f001 f840 	bl	80043bc <HAL_CAN_Init>
 800333c:	4605      	mov	r5, r0
 800333e:	b108      	cbz	r0, 8003344 <main+0x12c>
 8003340:	b672      	cpsid	i
  while (1)
 8003342:	e7fe      	b.n	8003342 <main+0x12a>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003344:	4601      	mov	r1, r0
 8003346:	4632      	mov	r2, r6
 8003348:	a807      	add	r0, sp, #28
 800334a:	f003 fa25 	bl	8006798 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800334e:	221c      	movs	r2, #28
 8003350:	4629      	mov	r1, r5
 8003352:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003354:	e9cd 5505 	strd	r5, r5, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003358:	f003 fa1e 	bl	8006798 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800335c:	2220      	movs	r2, #32
 800335e:	4629      	mov	r1, r5
 8003360:	a812      	add	r0, sp, #72	; 0x48
 8003362:	f003 fa19 	bl	8006798 <memset>
  htim1.Init.Prescaler = 71;
 8003366:	2347      	movs	r3, #71	; 0x47
  htim1.Init.Period = 65535;
 8003368:	f64f 77ff 	movw	r7, #65535	; 0xffff
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800336c:	f04f 0880 	mov.w	r8, #128	; 0x80
  htim1.Instance = TIM1;
 8003370:	4c67      	ldr	r4, [pc, #412]	; (8003510 <main+0x2f8>)
  htim1.Init.Prescaler = 71;
 8003372:	4868      	ldr	r0, [pc, #416]	; (8003514 <main+0x2fc>)
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003374:	e9c4 7503 	strd	r7, r5, [r4, #12]
  htim1.Init.Prescaler = 71;
 8003378:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800337c:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800337e:	60a5      	str	r5, [r4, #8]
  htim1.Init.RepetitionCounter = 0;
 8003380:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003382:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003386:	f001 fe29 	bl	8004fdc <HAL_TIM_Base_Init>
 800338a:	b108      	cbz	r0, 8003390 <main+0x178>
 800338c:	b672      	cpsid	i
  while (1)
 800338e:	e7fe      	b.n	800338e <main+0x176>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003390:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003394:	4620      	mov	r0, r4
 8003396:	a907      	add	r1, sp, #28
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003398:	9507      	str	r5, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800339a:	f001 ff08 	bl	80051ae <HAL_TIM_ConfigClockSource>
 800339e:	b108      	cbz	r0, 80033a4 <main+0x18c>
 80033a0:	b672      	cpsid	i
  while (1)
 80033a2:	e7fe      	b.n	80033a2 <main+0x18a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80033a4:	4620      	mov	r0, r4
 80033a6:	f001 fe45 	bl	8005034 <HAL_TIM_PWM_Init>
 80033aa:	b108      	cbz	r0, 80033b0 <main+0x198>
 80033ac:	b672      	cpsid	i
  while (1)
 80033ae:	e7fe      	b.n	80033ae <main+0x196>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033b0:	e9cd 0005 	strd	r0, r0, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033b4:	a905      	add	r1, sp, #20
 80033b6:	4620      	mov	r0, r4
 80033b8:	f002 f82a 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 80033bc:	4602      	mov	r2, r0
 80033be:	b108      	cbz	r0, 80033c4 <main+0x1ac>
 80033c0:	b672      	cpsid	i
  while (1)
 80033c2:	e7fe      	b.n	80033c2 <main+0x1aa>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c4:	2360      	movs	r3, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033c6:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80033ca:	e9cd 300b 	strd	r3, r0, [sp, #44]	; 0x2c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033ce:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033d2:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033d4:	a90b      	add	r1, sp, #44	; 0x2c
 80033d6:	4620      	mov	r0, r4
 80033d8:	f001 fe84 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 80033dc:	b108      	cbz	r0, 80033e2 <main+0x1ca>
 80033de:	b672      	cpsid	i
  while (1)
 80033e0:	e7fe      	b.n	80033e0 <main+0x1c8>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e6:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sBreakDeadTimeConfig.DeadTime = 0;
 80033ea:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033ee:	9016      	str	r0, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80033f0:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033f2:	a912      	add	r1, sp, #72	; 0x48
 80033f4:	4620      	mov	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80033f6:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80033f8:	f002 f834 	bl	8005464 <HAL_TIMEx_ConfigBreakDeadTime>
 80033fc:	4681      	mov	r9, r0
 80033fe:	b108      	cbz	r0, 8003404 <main+0x1ec>
 8003400:	b672      	cpsid	i
  while (1)
 8003402:	e7fe      	b.n	8003402 <main+0x1ea>
  HAL_TIM_MspPostInit(&htim1);
 8003404:	4620      	mov	r0, r4
 8003406:	f000 f943 	bl	8003690 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800340a:	4632      	mov	r2, r6
 800340c:	4649      	mov	r1, r9
 800340e:	a80b      	add	r0, sp, #44	; 0x2c
 8003410:	f003 f9c2 	bl	8006798 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003414:	4649      	mov	r1, r9
 8003416:	221c      	movs	r2, #28
 8003418:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800341a:	e9cd 9907 	strd	r9, r9, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800341e:	f003 f9bb 	bl	8006798 <memset>
  htim2.Init.Prescaler = 31;
 8003422:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003426:	231f      	movs	r3, #31
  htim2.Instance = TIM2;
 8003428:	4c3b      	ldr	r4, [pc, #236]	; (8003518 <main+0x300>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800342a:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 31;
 800342c:	e9c4 1300 	strd	r1, r3, [r4]
  htim2.Init.Period = 65535;
 8003430:	e9c4 9702 	strd	r9, r7, [r4, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003434:	f8c4 9010 	str.w	r9, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003438:	f8c4 8018 	str.w	r8, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800343c:	f001 fdce 	bl	8004fdc <HAL_TIM_Base_Init>
 8003440:	b108      	cbz	r0, 8003446 <main+0x22e>
 8003442:	b672      	cpsid	i
  while (1)
 8003444:	e7fe      	b.n	8003444 <main+0x22c>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003446:	4620      	mov	r0, r4
 8003448:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800344a:	950b      	str	r5, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800344c:	f001 feaf 	bl	80051ae <HAL_TIM_ConfigClockSource>
 8003450:	b108      	cbz	r0, 8003456 <main+0x23e>
 8003452:	b672      	cpsid	i
  while (1)
 8003454:	e7fe      	b.n	8003454 <main+0x23c>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003456:	4620      	mov	r0, r4
 8003458:	f001 fdec 	bl	8005034 <HAL_TIM_PWM_Init>
 800345c:	b108      	cbz	r0, 8003462 <main+0x24a>
 800345e:	b672      	cpsid	i
  while (1)
 8003460:	e7fe      	b.n	8003460 <main+0x248>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003462:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003464:	482c      	ldr	r0, [pc, #176]	; (8003518 <main+0x300>)
 8003466:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003468:	e9cd 3307 	strd	r3, r3, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800346c:	f001 ffd0 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8003470:	4602      	mov	r2, r0
 8003472:	b108      	cbz	r0, 8003478 <main+0x260>
 8003474:	b672      	cpsid	i
  while (1)
 8003476:	e7fe      	b.n	8003476 <main+0x25e>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003478:	2660      	movs	r6, #96	; 0x60
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800347a:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.Pulse = 0;
 800347c:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003480:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003482:	a912      	add	r1, sp, #72	; 0x48
 8003484:	4824      	ldr	r0, [pc, #144]	; (8003518 <main+0x300>)
 8003486:	f001 fe2d 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 800348a:	4605      	mov	r5, r0
 800348c:	b108      	cbz	r0, 8003492 <main+0x27a>
 800348e:	b672      	cpsid	i
  while (1)
 8003490:	e7fe      	b.n	8003490 <main+0x278>
  HAL_TIM_MspPostInit(&htim2);
 8003492:	4821      	ldr	r0, [pc, #132]	; (8003518 <main+0x300>)
 8003494:	f000 f8fc 	bl	8003690 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003498:	2210      	movs	r2, #16
 800349a:	4629      	mov	r1, r5
 800349c:	a80b      	add	r0, sp, #44	; 0x2c
 800349e:	f003 f97b 	bl	8006798 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034a2:	221c      	movs	r2, #28
 80034a4:	4629      	mov	r1, r5
 80034a6:	a812      	add	r0, sp, #72	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a8:	e9cd 5507 	strd	r5, r5, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034ac:	f003 f974 	bl	8006798 <memset>
  htim3.Init.Prescaler = 31;
 80034b0:	231f      	movs	r3, #31
  htim3.Instance = TIM3;
 80034b2:	4c1a      	ldr	r4, [pc, #104]	; (800351c <main+0x304>)
  htim3.Init.Prescaler = 31;
 80034b4:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <main+0x308>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034b6:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 31;
 80034b8:	e9c4 2300 	strd	r2, r3, [r4]
  htim3.Init.Period = 65535;
 80034bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c0:	e9c4 3503 	strd	r3, r5, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c4:	2380      	movs	r3, #128	; 0x80
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c6:	60a5      	str	r5, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034c8:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80034ca:	f001 fd87 	bl	8004fdc <HAL_TIM_Base_Init>
 80034ce:	b108      	cbz	r0, 80034d4 <main+0x2bc>
 80034d0:	b672      	cpsid	i
  while (1)
 80034d2:	e7fe      	b.n	80034d2 <main+0x2ba>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034d8:	4620      	mov	r0, r4
 80034da:	a90b      	add	r1, sp, #44	; 0x2c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034dc:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034de:	f001 fe66 	bl	80051ae <HAL_TIM_ConfigClockSource>
 80034e2:	b108      	cbz	r0, 80034e8 <main+0x2d0>
 80034e4:	b672      	cpsid	i
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <main+0x2ce>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034e8:	4620      	mov	r0, r4
 80034ea:	f001 fda3 	bl	8005034 <HAL_TIM_PWM_Init>
 80034ee:	b1c8      	cbz	r0, 8003524 <main+0x30c>
 80034f0:	b672      	cpsid	i
  while (1)
 80034f2:	e7fe      	b.n	80034f2 <main+0x2da>
 80034f4:	40021000 	.word	0x40021000
 80034f8:	40011000 	.word	0x40011000
 80034fc:	40010c00 	.word	0x40010c00
 8003500:	40010800 	.word	0x40010800
 8003504:	10210000 	.word	0x10210000
 8003508:	20000374 	.word	0x20000374
 800350c:	40006400 	.word	0x40006400
 8003510:	2000039c 	.word	0x2000039c
 8003514:	40012c00 	.word	0x40012c00
 8003518:	200003e4 	.word	0x200003e4
 800351c:	2000042c 	.word	0x2000042c
 8003520:	40000400 	.word	0x40000400
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003524:	e9cd 0007 	strd	r0, r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003528:	a907      	add	r1, sp, #28
 800352a:	4620      	mov	r0, r4
 800352c:	f001 ff70 	bl	8005410 <HAL_TIMEx_MasterConfigSynchronization>
 8003530:	4602      	mov	r2, r0
 8003532:	b108      	cbz	r0, 8003538 <main+0x320>
 8003534:	b672      	cpsid	i
  while (1)
 8003536:	e7fe      	b.n	8003536 <main+0x31e>
  sConfigOC.Pulse = 0;
 8003538:	e9cd 6012 	strd	r6, r0, [sp, #72]	; 0x48
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800353c:	9014      	str	r0, [sp, #80]	; 0x50
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800353e:	9016      	str	r0, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003540:	a912      	add	r1, sp, #72	; 0x48
 8003542:	4620      	mov	r0, r4
 8003544:	f001 fdce 	bl	80050e4 <HAL_TIM_PWM_ConfigChannel>
 8003548:	b108      	cbz	r0, 800354e <main+0x336>
 800354a:	b672      	cpsid	i
  while (1)
 800354c:	e7fe      	b.n	800354c <main+0x334>
  HAL_TIM_MspPostInit(&htim3);
 800354e:	4620      	mov	r0, r4
 8003550:	f000 f89e 	bl	8003690 <HAL_TIM_MspPostInit>
  wrapper_cpp();
 8003554:	f000 fcf0 	bl	8003f38 <wrapper_cpp>
  while (1)
 8003558:	e7fe      	b.n	8003558 <main+0x340>
 800355a:	bf00      	nop

0800355c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800355c:	4b0e      	ldr	r3, [pc, #56]	; (8003598 <HAL_MspInit+0x3c>)
{
 800355e:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003560:	699a      	ldr	r2, [r3, #24]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	619a      	str	r2, [r3, #24]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	f002 0201 	and.w	r2, r2, #1
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800358c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003590:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003592:	b002      	add	sp, #8
 8003594:	4770      	bx	lr
 8003596:	bf00      	nop
 8003598:	40021000 	.word	0x40021000
 800359c:	40010000 	.word	0x40010000

080035a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80035a0:	b510      	push	{r4, lr}
 80035a2:	4604      	mov	r4, r0
 80035a4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a6:	2210      	movs	r2, #16
 80035a8:	2100      	movs	r1, #0
 80035aa:	a802      	add	r0, sp, #8
 80035ac:	f003 f8f4 	bl	8006798 <memset>
  if(hcan->Instance==CAN1)
 80035b0:	6822      	ldr	r2, [r4, #0]
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_CAN_MspInit+0x7c>)
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d12e      	bne.n	8003616 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035b8:	f503 33d6 	add.w	r3, r3, #109568	; 0x1ac00
 80035bc:	69da      	ldr	r2, [r3, #28]
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035be:	4818      	ldr	r0, [pc, #96]	; (8003620 <HAL_CAN_MspInit+0x80>)
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035c0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80035c4:	61da      	str	r2, [r3, #28]
 80035c6:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035c8:	a902      	add	r1, sp, #8
    __HAL_RCC_CAN1_CLK_ENABLE();
 80035ca:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 80035ce:	9200      	str	r2, [sp, #0]
 80035d0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035d2:	699a      	ldr	r2, [r3, #24]
 80035d4:	f042 0208 	orr.w	r2, r2, #8
 80035d8:	619a      	str	r2, [r3, #24]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	9301      	str	r3, [sp, #4]
 80035e2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80035e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035e8:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ea:	f001 f8df 	bl	80047ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035f2:	2302      	movs	r3, #2
 80035f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035f8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fa:	4809      	ldr	r0, [pc, #36]	; (8003620 <HAL_CAN_MspInit+0x80>)
 80035fc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003600:	f001 f8d4 	bl	80047ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8003604:	4a07      	ldr	r2, [pc, #28]	; (8003624 <HAL_CAN_MspInit+0x84>)
 8003606:	6853      	ldr	r3, [r2, #4]
 8003608:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800360c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003614:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003616:	b006      	add	sp, #24
 8003618:	bd10      	pop	{r4, pc}
 800361a:	bf00      	nop
 800361c:	40006400 	.word	0x40006400
 8003620:	40010c00 	.word	0x40010c00
 8003624:	40010000 	.word	0x40010000

08003628 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 8003628:	6803      	ldr	r3, [r0, #0]
 800362a:	4a16      	ldr	r2, [pc, #88]	; (8003684 <HAL_TIM_Base_MspInit+0x5c>)
{
 800362c:	b084      	sub	sp, #16
  if(htim_base->Instance==TIM1)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10b      	bne.n	800364a <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <HAL_TIM_Base_MspInit+0x60>)
 8003634:	699a      	ldr	r2, [r3, #24]
 8003636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800363a:	619a      	str	r2, [r3, #24]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003646:	b004      	add	sp, #16
 8003648:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800364a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800364e:	d10b      	bne.n	8003668 <HAL_TIM_Base_MspInit+0x40>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003650:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	61da      	str	r2, [r3, #28]
 800365c:	69db      	ldr	r3, [r3, #28]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	9302      	str	r3, [sp, #8]
 8003664:	9b02      	ldr	r3, [sp, #8]
 8003666:	e7ee      	b.n	8003646 <HAL_TIM_Base_MspInit+0x1e>
  else if(htim_base->Instance==TIM3)
 8003668:	4a08      	ldr	r2, [pc, #32]	; (800368c <HAL_TIM_Base_MspInit+0x64>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d1eb      	bne.n	8003646 <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <HAL_TIM_Base_MspInit+0x60>)
 8003670:	69da      	ldr	r2, [r3, #28]
 8003672:	f042 0202 	orr.w	r2, r2, #2
 8003676:	61da      	str	r2, [r3, #28]
 8003678:	69db      	ldr	r3, [r3, #28]
 800367a:	f003 0302 	and.w	r3, r3, #2
 800367e:	9303      	str	r3, [sp, #12]
 8003680:	9b03      	ldr	r3, [sp, #12]
}
 8003682:	e7e0      	b.n	8003646 <HAL_TIM_Base_MspInit+0x1e>
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40021000 	.word	0x40021000
 800368c:	40000400 	.word	0x40000400

08003690 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003690:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003692:	2510      	movs	r5, #16
{
 8003694:	4604      	mov	r4, r0
 8003696:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003698:	462a      	mov	r2, r5
 800369a:	2100      	movs	r1, #0
 800369c:	eb0d 0005 	add.w	r0, sp, r5
 80036a0:	f003 f87a 	bl	8006798 <memset>
  if(htim->Instance==TIM1)
 80036a4:	6823      	ldr	r3, [r4, #0]
 80036a6:	4a27      	ldr	r2, [pc, #156]	; (8003744 <HAL_TIM_MspPostInit+0xb4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d116      	bne.n	80036da <HAL_TIM_MspPostInit+0x4a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036ac:	4b26      	ldr	r3, [pc, #152]	; (8003748 <HAL_TIM_MspPostInit+0xb8>)
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036ae:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	f042 0204 	orr.w	r2, r2, #4
 80036b8:	619a      	str	r2, [r3, #24]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	f003 0304 	and.w	r3, r3, #4
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036c4:	2302      	movs	r3, #2
 80036c6:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036ca:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	eb0d 0105 	add.w	r1, sp, r5
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036d0:	481e      	ldr	r0, [pc, #120]	; (800374c <HAL_TIM_MspPostInit+0xbc>)
 80036d2:	f001 f86b 	bl	80047ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80036d6:	b009      	add	sp, #36	; 0x24
 80036d8:	bd30      	pop	{r4, r5, pc}
  else if(htim->Instance==TIM2)
 80036da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036de:	d111      	bne.n	8003704 <HAL_TIM_MspPostInit+0x74>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80036e4:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036e6:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	f042 0204 	orr.w	r2, r2, #4
 80036ec:	619a      	str	r2, [r3, #24]
 80036ee:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f2:	f003 0304 	and.w	r3, r3, #4
 80036f6:	9302      	str	r3, [sp, #8]
 80036f8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003700:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003702:	e7e5      	b.n	80036d0 <HAL_TIM_MspPostInit+0x40>
  else if(htim->Instance==TIM3)
 8003704:	4a12      	ldr	r2, [pc, #72]	; (8003750 <HAL_TIM_MspPostInit+0xc0>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d1e5      	bne.n	80036d6 <HAL_TIM_MspPostInit+0x46>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370a:	4b0f      	ldr	r3, [pc, #60]	; (8003748 <HAL_TIM_MspPostInit+0xb8>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	4811      	ldr	r0, [pc, #68]	; (8003754 <HAL_TIM_MspPostInit+0xc4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800370e:	6999      	ldr	r1, [r3, #24]
 8003710:	f041 0108 	orr.w	r1, r1, #8
 8003714:	6199      	str	r1, [r3, #24]
 8003716:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003718:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800371a:	f003 0308 	and.w	r3, r3, #8
 800371e:	9303      	str	r3, [sp, #12]
 8003720:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003724:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003728:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800372a:	f001 f83f 	bl	80047ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <HAL_TIM_MspPostInit+0xc8>)
 8003730:	6853      	ldr	r3, [r2, #4]
 8003732:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003736:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800373a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800373e:	6053      	str	r3, [r2, #4]
}
 8003740:	e7c9      	b.n	80036d6 <HAL_TIM_MspPostInit+0x46>
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40021000 	.word	0x40021000
 800374c:	40010800 	.word	0x40010800
 8003750:	40000400 	.word	0x40000400
 8003754:	40010c00 	.word	0x40010c00
 8003758:	40010000 	.word	0x40010000

0800375c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800375c:	e7fe      	b.n	800375c <NMI_Handler>

0800375e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800375e:	e7fe      	b.n	800375e <HardFault_Handler>

08003760 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003760:	e7fe      	b.n	8003760 <MemManage_Handler>

08003762 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003762:	e7fe      	b.n	8003762 <BusFault_Handler>

08003764 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003764:	e7fe      	b.n	8003764 <UsageFault_Handler>

08003766 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003766:	4770      	bx	lr

08003768 <DebugMon_Handler>:
 8003768:	4770      	bx	lr

0800376a <PendSV_Handler>:
 800376a:	4770      	bx	lr

0800376c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800376c:	f000 be14 	b.w	8004398 <HAL_IncTick>

08003770 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EMS_Pin);
 8003770:	2010      	movs	r0, #16
 8003772:	f001 b8fd 	b.w	8004970 <HAL_GPIO_EXTI_IRQHandler>

08003776 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8003776:	2001      	movs	r0, #1
 8003778:	4770      	bx	lr

0800377a <_kill>:

int _kill(int pid, int sig)
{
 800377a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800377c:	f002 ffaa 	bl	80066d4 <__errno>
 8003780:	2316      	movs	r3, #22
 8003782:	6003      	str	r3, [r0, #0]
	return -1;
}
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	bd08      	pop	{r3, pc}

0800378a <_exit>:

void _exit (int status)
{
 800378a:	b508      	push	{r3, lr}
	errno = EINVAL;
 800378c:	f002 ffa2 	bl	80066d4 <__errno>
 8003790:	2316      	movs	r3, #22
 8003792:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8003794:	e7fe      	b.n	8003794 <_exit+0xa>
	...

08003798 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003798:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <_sbrk+0x30>)
{
 800379a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 800379c:	6811      	ldr	r1, [r2, #0]
{
 800379e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80037a0:	b909      	cbnz	r1, 80037a6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80037a2:	490a      	ldr	r1, [pc, #40]	; (80037cc <_sbrk+0x34>)
 80037a4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80037a6:	6810      	ldr	r0, [r2, #0]
 80037a8:	4909      	ldr	r1, [pc, #36]	; (80037d0 <_sbrk+0x38>)
 80037aa:	4c0a      	ldr	r4, [pc, #40]	; (80037d4 <_sbrk+0x3c>)
 80037ac:	4403      	add	r3, r0
 80037ae:	1b09      	subs	r1, r1, r4
 80037b0:	428b      	cmp	r3, r1
 80037b2:	d906      	bls.n	80037c2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80037b4:	f002 ff8e 	bl	80066d4 <__errno>
 80037b8:	230c      	movs	r3, #12
 80037ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80037bc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80037c0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80037c2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80037c4:	e7fc      	b.n	80037c0 <_sbrk+0x28>
 80037c6:	bf00      	nop
 80037c8:	20000474 	.word	0x20000474
 80037cc:	200004c0 	.word	0x200004c0
 80037d0:	20002800 	.word	0x20002800
 80037d4:	00000400 	.word	0x00000400

080037d8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d8:	4770      	bx	lr

080037da <_ZN11stepping_md10Parameters18emergency_callbackEv>:

			//Emergencyボタンが押されたときに呼ばれるコールバック関数
			//emergency_callbackはパラメーターのうちmodeをMD_MODE::DEFAULTにする関数
			void emergency_callback(void) override
			{
				SMParam.mode = MD_MODE::DEFAULT;
 80037da:	2300      	movs	r3, #0
 80037dc:	6083      	str	r3, [r0, #8]
			}
 80037de:	4770      	bx	lr

080037e0 <_ZN11stepping_md15Parameters_Base18emergency_callbackEv>:
			virtual void emergency_callback(void){throw std::logic_error("emergency_callback is not implemented");}
 80037e0:	b510      	push	{r4, lr}
 80037e2:	2008      	movs	r0, #8
 80037e4:	f001 ff34 	bl	8005650 <__cxa_allocate_exception>
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <_ZN11stepping_md15Parameters_Base18emergency_callbackEv+0x24>)
 80037ea:	4604      	mov	r4, r0
 80037ec:	f002 fe62 	bl	80064b4 <_ZNSt11logic_errorC1EPKc>
 80037f0:	4620      	mov	r0, r4
 80037f2:	4a05      	ldr	r2, [pc, #20]	; (8003808 <_ZN11stepping_md15Parameters_Base18emergency_callbackEv+0x28>)
 80037f4:	4905      	ldr	r1, [pc, #20]	; (800380c <_ZN11stepping_md15Parameters_Base18emergency_callbackEv+0x2c>)
 80037f6:	f002 fb0f 	bl	8005e18 <__cxa_throw>
 80037fa:	4620      	mov	r0, r4
 80037fc:	f001 ff3e 	bl	800567c <__cxa_free_exception>
 8003800:	f001 ff60 	bl	80056c4 <__cxa_end_cleanup>
 8003804:	08006d4c 	.word	0x08006d4c
 8003808:	08006425 	.word	0x08006425
 800380c:	080070e4 	.word	0x080070e4

08003810 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>:
    move_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 8003810:	4613      	mov	r3, r2
	  if (_Num)
 8003812:	1a0a      	subs	r2, r1, r0
 8003814:	d003      	beq.n	800381e <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0+0xe>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 8003816:	4601      	mov	r1, r0
 8003818:	1a98      	subs	r0, r3, r2
 800381a:	f002 bfa3 	b.w	8006764 <memmove>
    }
 800381e:	4770      	bx	lr

08003820 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8003820:	b12a      	cbz	r2, 800382e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 8003822:	2a01      	cmp	r2, #1
 8003824:	d006      	beq.n	8003834 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 8003826:	2a02      	cmp	r2, #2
 8003828:	d105      	bne.n	8003836 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 800382a:	680b      	ldr	r3, [r1, #0]
 800382c:	e000      	b.n	8003830 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800382e:	4b03      	ldr	r3, [pc, #12]	; (800383c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 8003830:	6003      	str	r3, [r0, #0]
	      break;
 8003832:	e000      	b.n	8003836 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003834:	6001      	str	r1, [r0, #0]
      }
 8003836:	2000      	movs	r0, #0
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	08006e84 	.word	0x08006e84

08003840 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003840:	b530      	push	{r4, r5, lr}
 8003842:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 8003844:	680d      	ldr	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003846:	b085      	sub	sp, #20
				return 0;
			}
	);
	cancontrollers[E].target.set_callback(
			[&parameters](float value, uint32_t id)->int{
				if((!IS_EMERGENCY()) && parameters[E].get_motor_param().mode == MD_MODE::DEFAULT){
 8003848:	2110      	movs	r1, #16
 800384a:	480c      	ldr	r0, [pc, #48]	; (800387c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E9_M_invokeERKSt9_Any_dataOfOm+0x3c>)
 800384c:	f001 f884 	bl	8004958 <HAL_GPIO_ReadPin>
 8003850:	b188      	cbz	r0, 8003876 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E9_M_invokeERKSt9_Any_dataOfOm+0x36>
 8003852:	6821      	ldr	r1, [r4, #0]
 8003854:	a801      	add	r0, sp, #4
 8003856:	3128      	adds	r1, #40	; 0x28
 8003858:	f7ff fc12 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 800385c:	9b01      	ldr	r3, [sp, #4]
 800385e:	b953      	cbnz	r3, 8003876 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE4_E9_M_invokeERKSt9_Any_dataOfOm+0x36>
					MotorParam current_param = parameters[E].get_motor_param();
 8003860:	6821      	ldr	r1, [r4, #0]
 8003862:	a801      	add	r0, sp, #4
 8003864:	3128      	adds	r1, #40	; 0x28
 8003866:	f7ff fc0b 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					current_param.target = value;
					parameters[E].set_motor_param(current_param);
 800386a:	6820      	ldr	r0, [r4, #0]
 800386c:	a901      	add	r1, sp, #4
 800386e:	3028      	adds	r0, #40	; 0x28
					current_param.target = value;
 8003870:	9503      	str	r5, [sp, #12]
					parameters[E].set_motor_param(current_param);
 8003872:	f7ff fc0c 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
      }
 8003876:	2000      	movs	r0, #0
 8003878:	b005      	add	sp, #20
 800387a:	bd30      	pop	{r4, r5, pc}
 800387c:	40010800 	.word	0x40010800

08003880 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8003880:	b12a      	cbz	r2, 800388e <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 8003882:	2a01      	cmp	r2, #1
 8003884:	d006      	beq.n	8003894 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 8003886:	2a02      	cmp	r2, #2
 8003888:	d105      	bne.n	8003896 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 800388a:	680b      	ldr	r3, [r1, #0]
 800388c:	e000      	b.n	8003890 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800388e:	4b03      	ldr	r3, [pc, #12]	; (800389c <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 8003890:	6003      	str	r3, [r0, #0]
	      break;
 8003892:	e000      	b.n	8003896 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003894:	6001      	str	r1, [r0, #0]
      }
 8003896:	2000      	movs	r0, #0
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	08006e7c 	.word	0x08006e7c

080038a0 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80038a0:	b530      	push	{r4, r5, lr}
 80038a2:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 80038a4:	680d      	ldr	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80038a6:	b085      	sub	sp, #20
				if((!IS_EMERGENCY()) && parameters[C].get_motor_param().mode == MD_MODE::DEFAULT){
 80038a8:	2110      	movs	r1, #16
 80038aa:	480c      	ldr	r0, [pc, #48]	; (80038dc <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E9_M_invokeERKSt9_Any_dataOfOm+0x3c>)
 80038ac:	f001 f854 	bl	8004958 <HAL_GPIO_ReadPin>
 80038b0:	b188      	cbz	r0, 80038d6 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E9_M_invokeERKSt9_Any_dataOfOm+0x36>
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	a801      	add	r0, sp, #4
 80038b6:	3114      	adds	r1, #20
 80038b8:	f7ff fbe2 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 80038bc:	9b01      	ldr	r3, [sp, #4]
 80038be:	b953      	cbnz	r3, 80038d6 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE3_E9_M_invokeERKSt9_Any_dataOfOm+0x36>
					MotorParam current_param = parameters[C].get_motor_param();
 80038c0:	6821      	ldr	r1, [r4, #0]
 80038c2:	a801      	add	r0, sp, #4
 80038c4:	3114      	adds	r1, #20
 80038c6:	f7ff fbdb 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					parameters[C].set_motor_param(current_param);
 80038ca:	6820      	ldr	r0, [r4, #0]
 80038cc:	a901      	add	r1, sp, #4
 80038ce:	3014      	adds	r0, #20
					current_param.target = value;
 80038d0:	9503      	str	r5, [sp, #12]
					parameters[C].set_motor_param(current_param);
 80038d2:	f7ff fbdc 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
      }
 80038d6:	2000      	movs	r0, #0
 80038d8:	b005      	add	sp, #20
 80038da:	bd30      	pop	{r4, r5, pc}
 80038dc:	40010800 	.word	0x40010800

080038e0 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 80038e0:	b12a      	cbz	r2, 80038ee <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 80038e2:	2a01      	cmp	r2, #1
 80038e4:	d006      	beq.n	80038f4 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 80038e6:	2a02      	cmp	r2, #2
 80038e8:	d105      	bne.n	80038f6 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80038ea:	680b      	ldr	r3, [r1, #0]
 80038ec:	e000      	b.n	80038f0 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80038ee:	4b03      	ldr	r3, [pc, #12]	; (80038fc <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 80038f0:	6003      	str	r3, [r0, #0]
	      break;
 80038f2:	e000      	b.n	80038f6 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80038f4:	6001      	str	r1, [r0, #0]
      }
 80038f6:	2000      	movs	r0, #0
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	08006e74 	.word	0x08006e74

08003900 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003900:	b530      	push	{r4, r5, lr}
 8003902:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 8003904:	680d      	ldr	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003906:	b085      	sub	sp, #20
				if((!IS_EMERGENCY()) && parameters[A].get_motor_param().mode == MD_MODE::DEFAULT){
 8003908:	2110      	movs	r1, #16
 800390a:	480b      	ldr	r0, [pc, #44]	; (8003938 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm+0x38>)
 800390c:	f001 f824 	bl	8004958 <HAL_GPIO_ReadPin>
 8003910:	b170      	cbz	r0, 8003930 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm+0x30>
 8003912:	6821      	ldr	r1, [r4, #0]
 8003914:	a801      	add	r0, sp, #4
 8003916:	f7ff fbb3 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
 800391a:	9b01      	ldr	r3, [sp, #4]
 800391c:	b943      	cbnz	r3, 8003930 <_ZNSt17_Function_handlerIFifmEZ11wrapper_cppEUlfmE2_E9_M_invokeERKSt9_Any_dataOfOm+0x30>
					MotorParam current_param = parameters[A].get_motor_param();
 800391e:	6821      	ldr	r1, [r4, #0]
 8003920:	a801      	add	r0, sp, #4
 8003922:	f7ff fbad 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					parameters[A].set_motor_param(current_param);
 8003926:	6820      	ldr	r0, [r4, #0]
 8003928:	a901      	add	r1, sp, #4
					current_param.target = value;
 800392a:	9503      	str	r5, [sp, #12]
					parameters[A].set_motor_param(current_param);
 800392c:	f7ff fbaf 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
      }
 8003930:	2000      	movs	r0, #0
 8003932:	b005      	add	sp, #20
 8003934:	bd30      	pop	{r4, r5, pc}
 8003936:	bf00      	nop
 8003938:	40010800 	.word	0x40010800

0800393c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 800393c:	b12a      	cbz	r2, 800394a <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 800393e:	2a01      	cmp	r2, #1
 8003940:	d006      	beq.n	8003950 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 8003942:	2a02      	cmp	r2, #2
 8003944:	d105      	bne.n	8003952 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 8003946:	680b      	ldr	r3, [r1, #0]
 8003948:	e000      	b.n	800394c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 800394a:	4b03      	ldr	r3, [pc, #12]	; (8003958 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 800394c:	6003      	str	r3, [r0, #0]
	      break;
 800394e:	e000      	b.n	8003952 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003950:	6001      	str	r1, [r0, #0]
      }
 8003952:	2000      	movs	r0, #0
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	08006e94 	.word	0x08006e94

0800395c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800395c:	b530      	push	{r4, r5, lr}
 800395e:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 8003960:	780d      	ldrb	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003962:	b085      	sub	sp, #20
				if(!IS_EMERGENCY()){
 8003964:	2110      	movs	r1, #16
 8003966:	480b      	ldr	r0, [pc, #44]	; (8003994 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E9_M_invokeERKSt9_Any_dataOhOm+0x38>)
 8003968:	f000 fff6 	bl	8004958 <HAL_GPIO_ReadPin>
 800396c:	b170      	cbz	r0, 800398c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E9_M_invokeERKSt9_Any_dataOhOm+0x30>
					MotorParam current_param = parameters[E].get_motor_param();
 800396e:	6821      	ldr	r1, [r4, #0]
 8003970:	a801      	add	r0, sp, #4
 8003972:	3128      	adds	r1, #40	; 0x28
 8003974:	f7ff fb84 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					parameters[E].set_motor_param(current_param);
 8003978:	6820      	ldr	r0, [r4, #0]
 800397a:	a901      	add	r1, sp, #4
 800397c:	3028      	adds	r0, #40	; 0x28
					current_param.mode = static_cast<MD_MODE>(value);
 800397e:	9501      	str	r5, [sp, #4]
					parameters[E].set_motor_param(current_param);
 8003980:	f7ff fb85 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
					if(current_param.mode != MD_MODE::DEFAULT){on_yellow_led();}
 8003984:	9b01      	ldr	r3, [sp, #4]
 8003986:	b10b      	cbz	r3, 800398c <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE1_E9_M_invokeERKSt9_Any_dataOhOm+0x30>
 8003988:	f7ff fc04 	bl	8003194 <_ZN11stepping_md13on_yellow_ledEv>
      }
 800398c:	2000      	movs	r0, #0
 800398e:	b005      	add	sp, #20
 8003990:	bd30      	pop	{r4, r5, pc}
 8003992:	bf00      	nop
 8003994:	40010800 	.word	0x40010800

08003998 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 8003998:	b12a      	cbz	r2, 80039a6 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 800399a:	2a01      	cmp	r2, #1
 800399c:	d006      	beq.n	80039ac <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 800399e:	2a02      	cmp	r2, #2
 80039a0:	d105      	bne.n	80039ae <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80039a2:	680b      	ldr	r3, [r1, #0]
 80039a4:	e000      	b.n	80039a8 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 80039a6:	4b03      	ldr	r3, [pc, #12]	; (80039b4 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 80039a8:	6003      	str	r3, [r0, #0]
	      break;
 80039aa:	e000      	b.n	80039ae <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80039ac:	6001      	str	r1, [r0, #0]
      }
 80039ae:	2000      	movs	r0, #0
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	08006e8c 	.word	0x08006e8c

080039b8 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80039b8:	b530      	push	{r4, r5, lr}
 80039ba:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 80039bc:	780d      	ldrb	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80039be:	b085      	sub	sp, #20
				if(!IS_EMERGENCY()){
 80039c0:	2110      	movs	r1, #16
 80039c2:	480b      	ldr	r0, [pc, #44]	; (80039f0 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm+0x38>)
 80039c4:	f000 ffc8 	bl	8004958 <HAL_GPIO_ReadPin>
 80039c8:	b170      	cbz	r0, 80039e8 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm+0x30>
					MotorParam current_param = parameters[C].get_motor_param();
 80039ca:	6821      	ldr	r1, [r4, #0]
 80039cc:	a801      	add	r0, sp, #4
 80039ce:	3114      	adds	r1, #20
 80039d0:	f7ff fb56 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					parameters[C].set_motor_param(current_param);
 80039d4:	6820      	ldr	r0, [r4, #0]
 80039d6:	a901      	add	r1, sp, #4
 80039d8:	3014      	adds	r0, #20
					current_param.mode = static_cast<MD_MODE>(value);
 80039da:	9501      	str	r5, [sp, #4]
					parameters[C].set_motor_param(current_param);
 80039dc:	f7ff fb57 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
					if(current_param.mode != MD_MODE::DEFAULT){on_yellow_led();}
 80039e0:	9b01      	ldr	r3, [sp, #4]
 80039e2:	b10b      	cbz	r3, 80039e8 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE0_E9_M_invokeERKSt9_Any_dataOhOm+0x30>
 80039e4:	f7ff fbd6 	bl	8003194 <_ZN11stepping_md13on_yellow_ledEv>
      }
 80039e8:	2000      	movs	r0, #0
 80039ea:	b005      	add	sp, #20
 80039ec:	bd30      	pop	{r4, r5, pc}
 80039ee:	bf00      	nop
 80039f0:	40010800 	.word	0x40010800

080039f4 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation>:
	switch (__op)
 80039f4:	b12a      	cbz	r2, 8003a02 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0xe>
 80039f6:	2a01      	cmp	r2, #1
 80039f8:	d006      	beq.n	8003a08 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x14>
	  switch (__op)
 80039fa:	2a02      	cmp	r2, #2
 80039fc:	d105      	bne.n	8003a0a <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
 80039fe:	680b      	ldr	r3, [r1, #0]
 8003a00:	e000      	b.n	8003a04 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x10>
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
 8003a02:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x1c>)
 8003a04:	6003      	str	r3, [r0, #0]
	      break;
 8003a06:	e000      	b.n	8003a0a <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E10_M_managerERSt9_Any_dataRKS3_St18_Manager_operation+0x16>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003a08:	6001      	str	r1, [r0, #0]
      }
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	08006e9c 	.word	0x08006e9c

08003a14 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003a14:	b530      	push	{r4, r5, lr}
 8003a16:	4604      	mov	r4, r0
    const void* _M_access() const { return &_M_pod_data[0]; }
 8003a18:	780d      	ldrb	r5, [r1, #0]
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003a1a:	b085      	sub	sp, #20
				if(!IS_EMERGENCY()){
 8003a1c:	2110      	movs	r1, #16
 8003a1e:	480a      	ldr	r0, [pc, #40]	; (8003a48 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm+0x34>)
 8003a20:	f000 ff9a 	bl	8004958 <HAL_GPIO_ReadPin>
 8003a24:	b160      	cbz	r0, 8003a40 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm+0x2c>
					MotorParam current_param = parameters[A].get_motor_param();
 8003a26:	6821      	ldr	r1, [r4, #0]
 8003a28:	a801      	add	r0, sp, #4
 8003a2a:	f7ff fb29 	bl	8003080 <_ZN11stepping_md10Parameters15get_motor_paramEv>
					parameters[A].set_motor_param(current_param);
 8003a2e:	6820      	ldr	r0, [r4, #0]
 8003a30:	a901      	add	r1, sp, #4
					current_param.mode = static_cast<MD_MODE>(value);
 8003a32:	9501      	str	r5, [sp, #4]
					parameters[A].set_motor_param(current_param);
 8003a34:	f7ff fb2b 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
					if(current_param.mode != MD_MODE::DEFAULT){on_yellow_led();}
 8003a38:	9b01      	ldr	r3, [sp, #4]
 8003a3a:	b10b      	cbz	r3, 8003a40 <_ZNSt17_Function_handlerIFihmEZ11wrapper_cppEUlhmE_E9_M_invokeERKSt9_Any_dataOhOm+0x2c>
 8003a3c:	f7ff fbaa 	bl	8003194 <_ZN11stepping_md13on_yellow_ledEv>
      }
 8003a40:	2000      	movs	r0, #0
 8003a42:	b005      	add	sp, #20
 8003a44:	bd30      	pop	{r4, r5, pc}
 8003a46:	bf00      	nop
 8003a48:	40010800 	.word	0x40010800

08003a4c <HAL_GPIO_EXTI_Callback>:
		led_process();
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
	if(GPIO_Pin == EMS_Pin){
 8003a4c:	2810      	cmp	r0, #16
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003a4e:	b507      	push	{r0, r1, r2, lr}
	if(GPIO_Pin == EMS_Pin){
 8003a50:	d116      	bne.n	8003a80 <HAL_GPIO_EXTI_Callback+0x34>
      { return iterator(this->_M_impl._M_node._M_next); }
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_GPIO_EXTI_Callback+0x3c>)
				for(MotorController_Base controller : MotorController_Base::instances){
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d004      	beq.n	8003a64 <HAL_GPIO_EXTI_Callback+0x18>
	class MotorController_Base{
 8003a5a:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <HAL_GPIO_EXTI_Callback+0x40>)
					controller.emergency_callback();
 8003a5c:	a801      	add	r0, sp, #4
	class MotorController_Base{
 8003a5e:	9301      	str	r3, [sp, #4]
					controller.emergency_callback();
 8003a60:	f7ff f9e2 	bl	8002e28 <_ZN11stepping_md20MotorController_Base18emergency_callbackEv>
 8003a64:	4b0a      	ldr	r3, [pc, #40]	; (8003a90 <HAL_GPIO_EXTI_Callback+0x44>)
				for(Parameters_Base controller : instances){
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d004      	beq.n	8003a76 <HAL_GPIO_EXTI_Callback+0x2a>
	class Parameters_Base{
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <HAL_GPIO_EXTI_Callback+0x48>)
					controller.emergency_callback();
 8003a6e:	a801      	add	r0, sp, #4
	class Parameters_Base{
 8003a70:	9301      	str	r3, [sp, #4]
					controller.emergency_callback();
 8003a72:	f7ff feb5 	bl	80037e0 <_ZN11stepping_md15Parameters_Base18emergency_callbackEv>
		MotorController_Base::trigger_emergency_callback();
		Parameters_Base::trigger_emergency_callback();
		off_yellow_led();
	}
}
 8003a76:	b003      	add	sp, #12
 8003a78:	f85d eb04 	ldr.w	lr, [sp], #4
		off_yellow_led();
 8003a7c:	f7ff bb92 	b.w	80031a4 <_ZN11stepping_md14off_yellow_ledEv>
}
 8003a80:	b003      	add	sp, #12
 8003a82:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a86:	bf00      	nop
 8003a88:	20000350 	.word	0x20000350
 8003a8c:	08006da8 	.word	0x08006da8
 8003a90:	2000035c 	.word	0x2000035c
 8003a94:	08006e64 	.word	0x08006e64

08003a98 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>:
    __insertion_sort(_RandomAccessIterator __first,
 8003a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a9a:	460e      	mov	r6, r1
 8003a9c:	a902      	add	r1, sp, #8
      if (__first == __last) return;
 8003a9e:	42b0      	cmp	r0, r6
    __insertion_sort(_RandomAccessIterator __first,
 8003aa0:	4604      	mov	r4, r0
 8003aa2:	e901 000c 	stmdb	r1, {r2, r3}
      if (__first == __last) return;
 8003aa6:	d01e      	beq.n	8003ae6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8003aa8:	1c41      	adds	r1, r0, #1
 8003aaa:	42b1      	cmp	r1, r6
 8003aac:	d01b      	beq.n	8003ae6 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4e>
 8003aae:	460d      	mov	r5, r1
	  if (__comp(__i, __first))
 8003ab0:	7823      	ldrb	r3, [r4, #0]
 8003ab2:	f815 7b01 	ldrb.w	r7, [r5], #1
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	f007 0203 	and.w	r2, r7, #3
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d206      	bcs.n	8003ad0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
	      _GLIBCXX_MOVE_BACKWARD3(__first, __i, __i + 1);
 8003ac2:	462a      	mov	r2, r5
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	f7ff fea3 	bl	8003810 <_ZSt13move_backwardIPhS0_ET0_T_S2_S1_.isra.0>
	      *__first = _GLIBCXX_MOVE(__val);
 8003aca:	7027      	strb	r7, [r4, #0]
      for (_RandomAccessIterator __i = __first + 1; __i != __last; ++__i)
 8003acc:	4629      	mov	r1, r5
 8003ace:	e7ec      	b.n	8003aaa <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x12>
 8003ad0:	f811 3c01 	ldrb.w	r3, [r1, #-1]
      while (__comp(__val, __next))
 8003ad4:	f003 0003 	and.w	r0, r3, #3
 8003ad8:	4282      	cmp	r2, r0
 8003ada:	d202      	bcs.n	8003ae2 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x4a>
	  *__last = _GLIBCXX_MOVE(*__next);
 8003adc:	f801 3901 	strb.w	r3, [r1], #-1
      while (__comp(__val, __next))
 8003ae0:	e7f6      	b.n	8003ad0 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x38>
      *__last = _GLIBCXX_MOVE(__val);
 8003ae2:	700f      	strb	r7, [r1, #0]
    }
 8003ae4:	e7f2      	b.n	8003acc <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_+0x34>
    }
 8003ae6:	b003      	add	sp, #12
 8003ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003aec <_ZN6CRSLib3Can6RM000813FilterManager18dynamic_initializeEv>:
		clear_bit(bxcan1->FA1R, (u32)1 << index);
		set_bit(bxcan1->FA1R, (u32)activate << index);
	}

	inline void dynamic_initialize() noexcept
	{
 8003aec:	b530      	push	{r4, r5, lr}
		[]<u8 ... indices>(std::integer_sequence<u8, indices ...>)
		{
			constexpr FrameFeature<FilterWidth::bit32> null_feature{.std_id = max_std_id, .ext_id = max_ext_id};
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8003aee:	4d0d      	ldr	r5, [pc, #52]	; (8003b24 <_ZN6CRSLib3Can6RM000813FilterManager18dynamic_initializeEv+0x38>)
	{
 8003af0:	b093      	sub	sp, #76	; 0x4c
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8003af2:	ac0d      	add	r4, sp, #52	; 0x34
 8003af4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003af8:	682b      	ldr	r3, [r5, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8003afa:	200e      	movs	r0, #14
			auto null_filter_arg = ConfigFilterArg<FilterWidth::bit32, FilterMode::list>{{null_feature, null_feature}, FifoIndex::fifo0};
 8003afc:	6023      	str	r3, [r4, #0]
			config_filter_bank(Config::filter_bank_total_size, static_cast<decltype(null_filter_arg)&>(static_cast<void>(indices), null_filter_arg)...);
 8003afe:	ab0d      	add	r3, sp, #52	; 0x34
 8003b00:	461a      	mov	r2, r3
 8003b02:	4619      	mov	r1, r3
 8003b04:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
 8003b08:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8003b0c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003b10:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003b14:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f7fe f8f3 	bl	8001d04 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0ELS4_0EEJLNS0_10FilterModeE1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1ELS5_1EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
		}(std::make_integer_sequence<u8, Config::filter_bank_total_size>());
	}
 8003b1e:	b013      	add	sp, #76	; 0x4c
 8003b20:	bd30      	pop	{r4, r5, pc}
 8003b22:	bf00      	nop
 8003b24:	08006a48 	.word	0x08006a48

08003b28 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>:
    __adjust_heap(_RandomAccessIterator __first, _Distance __holeIndex,
 8003b28:	b5f0      	push	{r4, r5, r6, r7, lr}
      while (__secondChild < (__len - 1) / 2)
 8003b2a:	1e54      	subs	r4, r2, #1
 8003b2c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8003b30:	1065      	asrs	r5, r4, #1
 8003b32:	460c      	mov	r4, r1
 8003b34:	42a5      	cmp	r5, r4
 8003b36:	dd13      	ble.n	8003b60 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x38>
	  __secondChild = 2 * (__secondChild + 1);
 8003b38:	1c67      	adds	r7, r4, #1
 8003b3a:	eb00 0c47 	add.w	ip, r0, r7, lsl #1
 8003b3e:	007e      	lsls	r6, r7, #1
	  if (__comp(__first + __secondChild,
 8003b40:	f81c cc01 	ldrb.w	ip, [ip, #-1]
 8003b44:	f810 7017 	ldrb.w	r7, [r0, r7, lsl #1]
 8003b48:	f00c 0c03 	and.w	ip, ip, #3
 8003b4c:	f007 0703 	and.w	r7, r7, #3
 8003b50:	45bc      	cmp	ip, r7
	    __secondChild--;
 8003b52:	bf88      	it	hi
 8003b54:	f106 36ff 	addhi.w	r6, r6, #4294967295
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __secondChild));
 8003b58:	5d87      	ldrb	r7, [r0, r6]
 8003b5a:	5507      	strb	r7, [r0, r4]
	  __holeIndex = __secondChild;
 8003b5c:	4634      	mov	r4, r6
      while (__secondChild < (__len - 1) / 2)
 8003b5e:	e7e9      	b.n	8003b34 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0xc>
      if ((__len & 1) == 0 && __secondChild == (__len - 2) / 2)
 8003b60:	07d5      	lsls	r5, r2, #31
 8003b62:	d40d      	bmi.n	8003b80 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
 8003b64:	3a02      	subs	r2, #2
 8003b66:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003b6a:	ebb4 0f62 	cmp.w	r4, r2, asr #1
 8003b6e:	d107      	bne.n	8003b80 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x58>
	  __secondChild = 2 * (__secondChild + 1);
 8003b70:	1c62      	adds	r2, r4, #1
 8003b72:	0055      	lsls	r5, r2, #1
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first
 8003b74:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8003b78:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 8003b7c:	5502      	strb	r2, [r0, r4]
	  __holeIndex = __secondChild - 1;
 8003b7e:	1e6c      	subs	r4, r5, #1
      _Distance __parent = (__holeIndex - 1) / 2;
 8003b80:	1e62      	subs	r2, r4, #1
 8003b82:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
 8003b86:	1052      	asrs	r2, r2, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003b88:	f003 0603 	and.w	r6, r3, #3
 8003b8c:	42a1      	cmp	r1, r4
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003b8e:	eb00 0504 	add.w	r5, r0, r4
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003b92:	da0b      	bge.n	8003bac <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
 8003b94:	5c84      	ldrb	r4, [r0, r2]
 8003b96:	f004 0703 	and.w	r7, r4, #3
 8003b9a:	42b7      	cmp	r7, r6
 8003b9c:	d206      	bcs.n	8003bac <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x84>
	  *(__first + __holeIndex) = _GLIBCXX_MOVE(*(__first + __parent));
 8003b9e:	702c      	strb	r4, [r5, #0]
	  __parent = (__holeIndex - 1) / 2;
 8003ba0:	1e54      	subs	r4, r2, #1
 8003ba2:	eb04 75d4 	add.w	r5, r4, r4, lsr #31
	  __holeIndex = __parent;
 8003ba6:	4614      	mov	r4, r2
	  __parent = (__holeIndex - 1) / 2;
 8003ba8:	106a      	asrs	r2, r5, #1
      while (__holeIndex > __topIndex && __comp(__first + __parent, __value))
 8003baa:	e7ef      	b.n	8003b8c <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_+0x64>
      *(__first + __holeIndex) = _GLIBCXX_MOVE(__value);
 8003bac:	702b      	strb	r3, [r5, #0]
    }
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>:
    __introsort_loop(_RandomAccessIterator __first,
 8003bb0:	b082      	sub	sp, #8
 8003bb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bb6:	4604      	mov	r4, r0
 8003bb8:	460d      	mov	r5, r1
 8003bba:	4617      	mov	r7, r2
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	930f      	str	r3, [sp, #60]	; 0x3c
      std::__move_median_to_first(__first, __first + 1, __mid, __last - 1,
 8003bc0:	f100 0801 	add.w	r8, r0, #1
      while (__last - __first > int(_S_threshold))
 8003bc4:	1b2e      	subs	r6, r5, r4
 8003bc6:	2e10      	cmp	r6, #16
 8003bc8:	dd29      	ble.n	8003c1e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x6e>
	  if (__depth_limit == 0)
 8003bca:	bb6f      	cbnz	r7, 8003c28 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x78>
 8003bcc:	e9dd 010f 	ldrd	r0, r1, [sp, #60]	; 0x3c
 8003bd0:	f10d 0808 	add.w	r8, sp, #8
 8003bd4:	f10d 0910 	add.w	r9, sp, #16
 8003bd8:	e888 0003 	stmia.w	r8, {r0, r1}
    __partial_sort(_RandomAccessIterator __first,
 8003bdc:	e889 0003 	stmia.w	r9, {r0, r1}
      _DistanceType __parent = (__len - 2) / 2;
 8003be0:	1eb7      	subs	r7, r6, #2
 8003be2:	107f      	asrs	r7, r7, #1
	  std::__adjust_heap(__first, __parent, __len, _GLIBCXX_MOVE(__value),
 8003be4:	e899 0003 	ldmia.w	r9, {r0, r1}
 8003be8:	4632      	mov	r2, r6
 8003bea:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003bee:	5de3      	ldrb	r3, [r4, r7]
 8003bf0:	4639      	mov	r1, r7
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	f7ff ff98 	bl	8003b28 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
	  if (__parent == 0)
 8003bf8:	b10f      	cbz	r7, 8003bfe <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
	  __parent--;
 8003bfa:	3f01      	subs	r7, #1
      while (true)
 8003bfc:	e7f2      	b.n	8003be4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x34>
      _ValueType __value = _GLIBCXX_MOVE(*__result);
 8003bfe:	f815 3d01 	ldrb.w	r3, [r5, #-1]!
      *__result = _GLIBCXX_MOVE(*__first);
 8003c02:	7822      	ldrb	r2, [r4, #0]
			 _DistanceType(__last - __first),
 8003c04:	1b2e      	subs	r6, r5, r4
      std::__adjust_heap(__first, _DistanceType(0),
 8003c06:	e898 0003 	ldmia.w	r8, {r0, r1}
      *__result = _GLIBCXX_MOVE(*__first);
 8003c0a:	702a      	strb	r2, [r5, #0]
      std::__adjust_heap(__first, _DistanceType(0),
 8003c0c:	e88d 0003 	stmia.w	sp, {r0, r1}
 8003c10:	4632      	mov	r2, r6
 8003c12:	2100      	movs	r1, #0
 8003c14:	4620      	mov	r0, r4
 8003c16:	f7ff ff87 	bl	8003b28 <_ZSt13__adjust_heapIPhihN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SO_SO_T1_T2_>
      while (__last - __first > 1)
 8003c1a:	2e01      	cmp	r6, #1
 8003c1c:	dcef      	bgt.n	8003bfe <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x4e>
    }
 8003c1e:	b007      	add	sp, #28
 8003c20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003c24:	b002      	add	sp, #8
 8003c26:	4770      	bx	lr
      _RandomAccessIterator __mid = __first + (__last - __first) / 2;
 8003c28:	1076      	asrs	r6, r6, #1
 8003c2a:	f894 e001 	ldrb.w	lr, [r4, #1]
 8003c2e:	5da1      	ldrb	r1, [r4, r6]
 8003c30:	f815 0c01 	ldrb.w	r0, [r5, #-1]
 8003c34:	f00e 0903 	and.w	r9, lr, #3
 8003c38:	f001 0c03 	and.w	ip, r1, #3
      if (__comp(__a, __b))
 8003c3c:	45e1      	cmp	r9, ip
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8003c3e:	7823      	ldrb	r3, [r4, #0]
	  --__depth_limit;
 8003c40:	f107 37ff 	add.w	r7, r7, #4294967295
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003c44:	f000 0203 	and.w	r2, r0, #3
      if (__comp(__a, __b))
 8003c48:	d229      	bcs.n	8003c9e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xee>
	  if (__comp(__b, __c))
 8003c4a:	4594      	cmp	ip, r2
 8003c4c:	d221      	bcs.n	8003c92 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe2>
      __a = _GLIBCXX_MOVE(__b);
 8003c4e:	7021      	strb	r1, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003c50:	55a3      	strb	r3, [r4, r6]
 8003c52:	4642      	mov	r2, r8
      while (__last - __first > int(_S_threshold))
 8003c54:	462b      	mov	r3, r5
 8003c56:	4616      	mov	r6, r2
 8003c58:	7821      	ldrb	r1, [r4, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003c5a:	f812 cb01 	ldrb.w	ip, [r2], #1
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8003c5e:	f001 0103 	and.w	r1, r1, #3
	  while (__comp(__first, __pivot))
 8003c62:	f00c 0003 	and.w	r0, ip, #3
 8003c66:	4288      	cmp	r0, r1
 8003c68:	d3f5      	bcc.n	8003c56 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>
	  --__last;
 8003c6a:	1e58      	subs	r0, r3, #1
 8003c6c:	4603      	mov	r3, r0
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003c6e:	f810 e901 	ldrb.w	lr, [r0], #-1
	  while (__comp(__pivot, __last))
 8003c72:	f00e 0903 	and.w	r9, lr, #3
 8003c76:	4549      	cmp	r1, r9
 8003c78:	d3f8      	bcc.n	8003c6c <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xbc>
	  if (!(__first < __last))
 8003c7a:	429e      	cmp	r6, r3
 8003c7c:	d318      	bcc.n	8003cb0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x100>
	  std::__introsort_loop(__cut, __last, __depth_limit, __comp);
 8003c7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003c80:	4629      	mov	r1, r5
 8003c82:	9300      	str	r3, [sp, #0]
 8003c84:	463a      	mov	r2, r7
 8003c86:	4630      	mov	r0, r6
 8003c88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003c8a:	f7ff ff91 	bl	8003bb0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
      while (__last - __first > int(_S_threshold))
 8003c8e:	4635      	mov	r5, r6
 8003c90:	e798      	b.n	8003bc4 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x14>
	  else if (__comp(__a, __c))
 8003c92:	4591      	cmp	r9, r2
 8003c94:	d205      	bcs.n	8003ca2 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xf2>
      __a = _GLIBCXX_MOVE(__b);
 8003c96:	7020      	strb	r0, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8003c98:	f805 3c01 	strb.w	r3, [r5, #-1]
    }
 8003c9c:	e7d9      	b.n	8003c52 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__a, __c))
 8003c9e:	4591      	cmp	r9, r2
 8003ca0:	d203      	bcs.n	8003caa <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xfa>
      __a = _GLIBCXX_MOVE(__b);
 8003ca2:	f884 e000 	strb.w	lr, [r4]
      __b = _GLIBCXX_MOVE(__tmp);
 8003ca6:	7063      	strb	r3, [r4, #1]
 8003ca8:	e7d3      	b.n	8003c52 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa2>
      else if (__comp(__b, __c))
 8003caa:	4594      	cmp	ip, r2
 8003cac:	d2cf      	bcs.n	8003c4e <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0x9e>
 8003cae:	e7f2      	b.n	8003c96 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xe6>
      __a = _GLIBCXX_MOVE(__b);
 8003cb0:	f802 ec01 	strb.w	lr, [r2, #-1]
      __b = _GLIBCXX_MOVE(__tmp);
 8003cb4:	f883 c000 	strb.w	ip, [r3]
	  while (__comp(__first, __pivot))
 8003cb8:	e7cd      	b.n	8003c56 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_+0xa6>

08003cba <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0EEJLNS0_10FilterModeE0ELS7_0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cbe:	461d      	mov	r5, r3
 8003cc0:	688b      	ldr	r3, [r1, #8]
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003cc2:	2800      	cmp	r0, #0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003cc4:	460f      	mov	r7, r1
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2120      	moveq	r1, #32
 8003cca:	2100      	movne	r1, #0
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf0c      	ite	eq
 8003cd0:	2310      	moveq	r3, #16
 8003cd2:	2300      	movne	r3, #0
 8003cd4:	4319      	orrs	r1, r3
 8003cd6:	6893      	ldr	r3, [r2, #8]
 8003cd8:	2802      	cmp	r0, #2
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003cda:	4616      	mov	r6, r2
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003cdc:	bf34      	ite	cc
 8003cde:	2220      	movcc	r2, #32
 8003ce0:	2200      	movcs	r2, #0
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	bf0c      	ite	eq
 8003ce6:	2310      	moveq	r3, #16
 8003ce8:	2300      	movne	r3, #0
 8003cea:	68ac      	ldr	r4, [r5, #8]
 8003cec:	2803      	cmp	r0, #3
 8003cee:	ea42 0203 	orr.w	r2, r2, r3
 8003cf2:	bf34      	ite	cc
 8003cf4:	2320      	movcc	r3, #32
 8003cf6:	2300      	movcs	r3, #0
 8003cf8:	2c01      	cmp	r4, #1
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2010      	moveq	r0, #16
 8003cfe:	2000      	movne	r0, #0
 8003d00:	4303      	orrs	r3, r0
		void set_filter_match_index(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args) noexcept
 8003d02:	b08c      	sub	sp, #48	; 0x30
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003d04:	f043 0306 	orr.w	r3, r3, #6
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8003d08:	f88d 3016 	strb.w	r3, [sp, #22]
 8003d0c:	f04f 0300 	mov.w	r3, #0
			return (can2_start <= index) << (u8)5 | (filter_arg.fifo == FifoIndex::fifo1) << (u8)4 | (filter_width == FilterWidth::bit16) << (u8)3 | (filter_mode == FilterMode::mask) << (u8)2 | index;
 8003d10:	f041 0104 	orr.w	r1, r1, #4
 8003d14:	f042 0205 	orr.w	r2, r2, #5
 8003d18:	f10d 0828 	add.w	r8, sp, #40	; 0x28
				priorities = {convert_to_priority(indices, can2_start, filter_args) ...};
 8003d1c:	f88d 1014 	strb.w	r1, [sp, #20]
 8003d20:	f88d 2015 	strb.w	r2, [sp, #21]
 8003d24:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8003d28:	f88d 3020 	strb.w	r3, [sp, #32]
      std::__sort(__first, __last, __gnu_cxx::__ops::__iter_comp_iter(__comp));
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	ab08      	add	r3, sp, #32
 8003d30:	f10d 0117 	add.w	r1, sp, #23
 8003d34:	a805      	add	r0, sp, #20
 8003d36:	9307      	str	r3, [sp, #28]
 8003d38:	f8cd 8018 	str.w	r8, [sp, #24]
 8003d3c:	f7fd fdd2 	bl	80018e4 <_ZSt6__sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessESt8identityEEDaRT_RT0_EUlOS9_OSB_E_EEEvS9_S9_SB_>
 8003d40:	2300      	movs	r3, #0
 8003d42:	2000      	movs	r0, #0
 8003d44:	aa05      	add	r2, sp, #20
					priority |= (i << 6);
 8003d46:	7814      	ldrb	r4, [r2, #0]
 8003d48:	4304      	orrs	r4, r0
 8003d4a:	f802 4b01 	strb.w	r4, [r2], #1
					if(!((priority & 0b11 << 4) ^ can_fifo << 4))
 8003d4e:	f004 0430 	and.w	r4, r4, #48	; 0x30
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d003      	beq.n	8003d5e <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0EEJLNS0_10FilterModeE0ELS7_0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xa4>
				for(u32 i = 0; auto& priority : priorities)
 8003d56:	3040      	adds	r0, #64	; 0x40
 8003d58:	b2c0      	uxtb	r0, r0
 8003d5a:	28c0      	cmp	r0, #192	; 0xc0
 8003d5c:	d1f3      	bne.n	8003d46 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0EEJLNS0_10FilterModeE0ELS7_0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x8c>
			for(u32 can_fifo = 0b00; can_fifo <= 0b11; ++can_fifo)
 8003d5e:	3310      	adds	r3, #16
 8003d60:	2b40      	cmp	r3, #64	; 0x40
 8003d62:	d1ee      	bne.n	8003d42 <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0EEJLNS0_10FilterModeE0ELS7_0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x88>
 8003d64:	f04f 0300 	mov.w	r3, #0
	  std::__introsort_loop(__first, __last,
 8003d68:	ac03      	add	r4, sp, #12
 8003d6a:	f88d 3010 	strb.w	r3, [sp, #16]
 8003d6e:	f88d 300c 	strb.w	r3, [sp, #12]
 8003d72:	f10d 0117 	add.w	r1, sp, #23
 8003d76:	ab04      	add	r3, sp, #16
 8003d78:	a805      	add	r0, sp, #20
 8003d7a:	2202      	movs	r2, #2
 8003d7c:	9400      	str	r4, [sp, #0]
 8003d7e:	9308      	str	r3, [sp, #32]
 8003d80:	9409      	str	r4, [sp, #36]	; 0x24
 8003d82:	f7ff ff15 	bl	8003bb0 <_ZSt16__introsort_loopIPhiN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_T1_>
 8003d86:	ab04      	add	r3, sp, #16
 8003d88:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
	std::__insertion_sort(__first, __last, __comp);
 8003d8c:	f10d 0117 	add.w	r1, sp, #23
 8003d90:	e898 000c 	ldmia.w	r8, {r2, r3}
 8003d94:	a805      	add	r0, sp, #20
 8003d96:	f7ff fe7f 	bl	8003a98 <_ZSt16__insertion_sortIPhN9__gnu_cxx5__ops15_Iter_comp_iterIZNSt6ranges8__detail16__make_comp_projINS4_4lessEZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS9_11FilterWidthE0ELSF_0ELSF_0EEJLNS9_10FilterModeE0ELSG_0ELSG_0EEEEvhDpRNSB_15ConfigFilterArgIXT_EXT0_EEEEUlT_E0_EEDaRSL_RT0_EUlOSL_OSO_E_EEEvSL_SL_SO_>
				((filter_args.filter_match_index = priorities[indices] >> 6), ...);
 8003d9a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8003d9e:	099b      	lsrs	r3, r3, #6
 8003da0:	60fb      	str	r3, [r7, #12]
 8003da2:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003da6:	099b      	lsrs	r3, r3, #6
 8003da8:	60f3      	str	r3, [r6, #12]
 8003daa:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8003dae:	099b      	lsrs	r3, r3, #6
 8003db0:	60eb      	str	r3, [r5, #12]
		}
 8003db2:	b00c      	add	sp, #48	; 0x30
 8003db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003db8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>:
	void config_filter_bank(const u8 can2_start, ConfigFilterArg<filter_widthes, filter_modes>& ... filter_args)
 8003db8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003dbc:	4680      	mov	r8, r0
		bit = bit | reg;
 8003dbe:	4c5c      	ldr	r4, [pc, #368]	; (8003f30 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x178>)
 8003dc0:	460f      	mov	r7, r1
 8003dc2:	4616      	mov	r6, r2
 8003dc4:	461d      	mov	r5, r3
		Implement::FilterManagerImp::set_filter_match_index(can2_start, filter_args ...);
 8003dc6:	f7ff ff78 	bl	8003cba <_ZN6CRSLib3Can6RM000813FilterManager9Implement16FilterManagerImp22set_filter_match_indexIJLNS0_11FilterWidthE0ELS6_0ELS6_0EEJLNS0_10FilterModeE0ELS7_0ELS7_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
 8003dca:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
		bit = bit & ~reg;
 8003dd6:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 8003dda:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003dde:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
		bit = bit | reg;
 8003de2:	f8d4 3600 	ldr.w	r3, [r4, #1536]	; 0x600
 8003de6:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
 8003dea:	f8c4 3600 	str.w	r3, [r4, #1536]	; 0x600
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003dee:	466b      	mov	r3, sp
 8003df0:	6838      	ldr	r0, [r7, #0]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003df6:	4b4f      	ldr	r3, [pc, #316]	; (8003f34 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x17c>)
 8003df8:	f8c3 0240 	str.w	r0, [r3, #576]	; 0x240
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003dfc:	9a01      	ldr	r2, [sp, #4]
 8003dfe:	f8c3 2244 	str.w	r2, [r3, #580]	; 0x244
 8003e02:	f8d4 360c 	ldr.w	r3, [r4, #1548]	; 0x60c
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	f8c4 360c 	str.w	r3, [r4, #1548]	; 0x60c
		bit = bit & ~reg;
 8003e0e:	f8d4 3604 	ldr.w	r3, [r4, #1540]	; 0x604
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d168      	bne.n	8003ef2 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x13a>
 8003e20:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8003e24:	f023 0301 	bic.w	r3, r3, #1
		bit = bit | reg;
 8003e28:	f8c4 3614 	str.w	r3, [r4, #1556]	; 0x614
		if(filter_arg.activate)
 8003e2c:	7c3b      	ldrb	r3, [r7, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d064      	beq.n	8003efc <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x144>
 8003e32:	f8d4 361c 	ldr.w	r3, [r4, #1564]	; 0x61c
 8003e36:	f043 0301 	orr.w	r3, r3, #1
		bit = bit & ~reg;
 8003e3a:	f8c4 361c 	str.w	r3, [r4, #1564]	; 0x61c
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003e3e:	466b      	mov	r3, sp
 8003e40:	6871      	ldr	r1, [r6, #4]
 8003e42:	6830      	ldr	r0, [r6, #0]
 8003e44:	c303      	stmia	r3!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003e46:	4b3b      	ldr	r3, [pc, #236]	; (8003f34 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x17c>)
		bit = bit | reg;
 8003e48:	4939      	ldr	r1, [pc, #228]	; (8003f30 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x178>)
 8003e4a:	f8c3 0248 	str.w	r0, [r3, #584]	; 0x248
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003e4e:	9a01      	ldr	r2, [sp, #4]
 8003e50:	f8c3 224c 	str.w	r2, [r3, #588]	; 0x24c
 8003e54:	f8d1 360c 	ldr.w	r3, [r1, #1548]	; 0x60c
 8003e58:	f043 0302 	orr.w	r3, r3, #2
 8003e5c:	f8c1 360c 	str.w	r3, [r1, #1548]	; 0x60c
		bit = bit & ~reg;
 8003e60:	f8d1 3604 	ldr.w	r3, [r1, #1540]	; 0x604
 8003e64:	f023 0302 	bic.w	r3, r3, #2
 8003e68:	f8c1 3604 	str.w	r3, [r1, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003e6c:	68b3      	ldr	r3, [r6, #8]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d149      	bne.n	8003f06 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x14e>
 8003e72:	f8d1 3614 	ldr.w	r3, [r1, #1556]	; 0x614
 8003e76:	f023 0302 	bic.w	r3, r3, #2
		bit = bit | reg;
 8003e7a:	f8c1 3614 	str.w	r3, [r1, #1556]	; 0x614
		if(filter_arg.activate)
 8003e7e:	7c33      	ldrb	r3, [r6, #16]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d045      	beq.n	8003f10 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x158>
 8003e84:	f8d1 361c 	ldr.w	r3, [r1, #1564]	; 0x61c
 8003e88:	f043 0302 	orr.w	r3, r3, #2
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003e8c:	466a      	mov	r2, sp
		bit = bit & ~reg;
 8003e8e:	f8c1 361c 	str.w	r3, [r1, #1564]	; 0x61c
 8003e92:	6828      	ldr	r0, [r5, #0]
 8003e94:	6869      	ldr	r1, [r5, #4]
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003e96:	4b27      	ldr	r3, [pc, #156]	; (8003f34 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x17c>)
		std::memcpy(tmp_buffer, &filter_arg.filter, 8);
 8003e98:	c203      	stmia	r2!, {r0, r1}
		bxcan->sFilterRegister[index].FR1 = tmp_buffer[0];
 8003e9a:	f8c3 0250 	str.w	r0, [r3, #592]	; 0x250
		bxcan->sFilterRegister[index].FR2 = tmp_buffer[1];
 8003e9e:	9a01      	ldr	r2, [sp, #4]
 8003ea0:	f8c3 2254 	str.w	r2, [r3, #596]	; 0x254
		bit = bit | reg;
 8003ea4:	4a22      	ldr	r2, [pc, #136]	; (8003f30 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x178>)
 8003ea6:	f8d2 360c 	ldr.w	r3, [r2, #1548]	; 0x60c
 8003eaa:	f043 0304 	orr.w	r3, r3, #4
 8003eae:	f8c2 360c 	str.w	r3, [r2, #1548]	; 0x60c
		bit = bit & ~reg;
 8003eb2:	f8d2 3604 	ldr.w	r3, [r2, #1540]	; 0x604
 8003eb6:	f023 0304 	bic.w	r3, r3, #4
 8003eba:	f8c2 3604 	str.w	r3, [r2, #1540]	; 0x604
		if(filter_arg.fifo == FifoIndex::fifo0)
 8003ebe:	68ab      	ldr	r3, [r5, #8]
 8003ec0:	bb5b      	cbnz	r3, 8003f1a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x162>
 8003ec2:	f8d2 3614 	ldr.w	r3, [r2, #1556]	; 0x614
 8003ec6:	f023 0304 	bic.w	r3, r3, #4
		bit = bit | reg;
 8003eca:	f8c2 3614 	str.w	r3, [r2, #1556]	; 0x614
		if(filter_arg.activate)
 8003ece:	7c2b      	ldrb	r3, [r5, #16]
 8003ed0:	b343      	cbz	r3, 8003f24 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x16c>
 8003ed2:	f8d2 361c 	ldr.w	r3, [r2, #1564]	; 0x61c
 8003ed6:	f043 0304 	orr.w	r3, r3, #4
		bit = bit & ~reg;
 8003eda:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
 8003ede:	4a14      	ldr	r2, [pc, #80]	; (8003f30 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x178>)
 8003ee0:	f8d2 3600 	ldr.w	r3, [r2, #1536]	; 0x600
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	f8c2 3600 	str.w	r3, [r2, #1536]	; 0x600
	}
 8003eec:	b002      	add	sp, #8
 8003eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bit = bit | reg;
 8003ef2:	f8d4 3614 	ldr.w	r3, [r4, #1556]	; 0x614
 8003ef6:	f043 0301 	orr.w	r3, r3, #1
 8003efa:	e795      	b.n	8003e28 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x70>
		bit = bit & ~reg;
 8003efc:	f8d4 361c 	ldr.w	r3, [r4, #1564]	; 0x61c
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	e799      	b.n	8003e3a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x82>
		bit = bit | reg;
 8003f06:	f8d1 3614 	ldr.w	r3, [r1, #1556]	; 0x614
 8003f0a:	f043 0302 	orr.w	r3, r3, #2
 8003f0e:	e7b4      	b.n	8003e7a <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xc2>
		bit = bit & ~reg;
 8003f10:	f8d1 361c 	ldr.w	r3, [r1, #1564]	; 0x61c
 8003f14:	f023 0302 	bic.w	r3, r3, #2
 8003f18:	e7b8      	b.n	8003e8c <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0xd4>
		bit = bit | reg;
 8003f1a:	f8d2 3614 	ldr.w	r3, [r2, #1556]	; 0x614
 8003f1e:	f043 0304 	orr.w	r3, r3, #4
 8003f22:	e7d2      	b.n	8003eca <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x112>
		bit = bit & ~reg;
 8003f24:	f8d2 361c 	ldr.w	r3, [r2, #1564]	; 0x61c
 8003f28:	f023 0304 	bic.w	r3, r3, #4
 8003f2c:	e7d5      	b.n	8003eda <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE+0x122>
 8003f2e:	bf00      	nop
 8003f30:	40006000 	.word	0x40006000
 8003f34:	40006400 	.word	0x40006400

08003f38 <wrapper_cpp>:
			fifo_index{fifo_index}
 8003f38:	2200      	movs	r2, #0
void wrapper_cpp(void){
 8003f3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			hcan{hcan}
 8003f3e:	4bb9      	ldr	r3, [pc, #740]	; (8004224 <wrapper_cpp+0x2ec>)
 8003f40:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003f44:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8003f48:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003f4c:	ad1c      	add	r5, sp, #112	; 0x70
 8003f4e:	2301      	movs	r3, #1
 8003f50:	f04f 0803 	mov.w	r8, #3
 8003f54:	462c      	mov	r4, r5
			explicit Parameters_Base(){instances.push_back(*this);}
 8003f56:	4fb4      	ldr	r7, [pc, #720]	; (8004228 <wrapper_cpp+0x2f0>)
	 __tmp->_M_hook(__position._M_node);
 8003f58:	4eb4      	ldr	r6, [pc, #720]	; (800422c <wrapper_cpp+0x2f4>)
			explicit Parameters(){}
 8003f5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8004230 <wrapper_cpp+0x2f8>
 8003f5e:	930c      	str	r3, [sp, #48]	; 0x30
			explicit Parameters_Base(){instances.push_back(*this);}
 8003f60:	602f      	str	r7, [r5, #0]
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f62:	200c      	movs	r0, #12
 8003f64:	f001 ff72 	bl	8005e4c <_Znwj>
 8003f68:	49b0      	ldr	r1, [pc, #704]	; (800422c <wrapper_cpp+0x2f4>)
	class Parameters_Base{
 8003f6a:	6087      	str	r7, [r0, #8]
 8003f6c:	f002 fa50 	bl	8006410 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>
      void _M_inc_size(size_t __n) { _M_impl._M_node._M_size += __n; }
 8003f70:	68b3      	ldr	r3, [r6, #8]
	Parameters parameters[3];
 8003f72:	f1b8 0801 	subs.w	r8, r8, #1
 8003f76:	f103 0301 	add.w	r3, r3, #1
 8003f7a:	60b3      	str	r3, [r6, #8]
			explicit Parameters(){}
 8003f7c:	f845 9b14 	str.w	r9, [r5], #20
 8003f80:	d1ee      	bne.n	8003f60 <wrapper_cpp+0x28>
	};
 8003f82:	4dac      	ldr	r5, [pc, #688]	; (8004234 <wrapper_cpp+0x2fc>)
 8003f84:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8004238 <wrapper_cpp+0x300>
 8003f88:	4bac      	ldr	r3, [pc, #688]	; (800423c <wrapper_cpp+0x304>)
 8003f8a:	462a      	mov	r2, r5
 8003f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003f90:	9302      	str	r3, [sp, #8]
 8003f92:	9500      	str	r5, [sp, #0]
 8003f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f98:	9403      	str	r4, [sp, #12]
 8003f9a:	f8cd a004 	str.w	sl, [sp, #4]
 8003f9e:	a82b      	add	r0, sp, #172	; 0xac
 8003fa0:	f7fe fffc 	bl	8002f9c <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE>
 8003fa4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004240 <wrapper_cpp+0x308>
 8003fa8:	4ba6      	ldr	r3, [pc, #664]	; (8004244 <wrapper_cpp+0x30c>)
 8003faa:	af21      	add	r7, sp, #132	; 0x84
 8003fac:	464a      	mov	r2, r9
 8003fae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003fb2:	9302      	str	r3, [sp, #8]
 8003fb4:	9703      	str	r7, [sp, #12]
 8003fb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fba:	f8cd a004 	str.w	sl, [sp, #4]
 8003fbe:	f8cd 9000 	str.w	r9, [sp]
 8003fc2:	a838      	add	r0, sp, #224	; 0xe0
 8003fc4:	f7fe ffea 	bl	8002f9c <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE>
 8003fc8:	4b9f      	ldr	r3, [pc, #636]	; (8004248 <wrapper_cpp+0x310>)
 8003fca:	ae26      	add	r6, sp, #152	; 0x98
 8003fcc:	462a      	mov	r2, r5
 8003fce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd2:	9302      	str	r3, [sp, #8]
 8003fd4:	9603      	str	r6, [sp, #12]
 8003fd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fda:	f8cd a004 	str.w	sl, [sp, #4]
 8003fde:	f8cd 9000 	str.w	r9, [sp]
 8003fe2:	a845      	add	r0, sp, #276	; 0x114
	};
 8003fe4:	ad52      	add	r5, sp, #328	; 0x148
	};
 8003fe6:	f7fe ffd9 	bl	8002f9c <_ZN11stepping_md15MotorControllerC1EtP12GPIO_TypeDeftS2_fP17TIM_HandleTypeDefRNS_10ParametersE>
	};
 8003fea:	4643      	mov	r3, r8
 8003fec:	4622      	mov	r2, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	a908      	add	r1, sp, #32
 8003ff2:	f7fe fd01 	bl	80029f8 <_ZN11stepping_md13CanControllerIhEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8003ff6:	e015      	b.n	8004024 <wrapper_cpp+0xec>
 8003ff8:	2402      	movs	r4, #2
 8003ffa:	f1c4 0402 	rsb	r4, r4, #2
	};

	template<typename T>
	class CanController : public CanController_Base{
 8003ffe:	4f93      	ldr	r7, [pc, #588]	; (800424c <wrapper_cpp+0x314>)
 8004000:	4e93      	ldr	r6, [pc, #588]	; (8004250 <wrapper_cpp+0x318>)
 8004002:	eb05 1484 	add.w	r4, r5, r4, lsl #6
 8004006:	42ac      	cmp	r4, r5
 8004008:	f000 815f 	beq.w	80042ca <wrapper_cpp+0x392>
 800400c:	3c40      	subs	r4, #64	; 0x40
    class function<_Res(_ArgTypes...)>
 800400e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8004012:	6227      	str	r7, [r4, #32]
 8004014:	f7fe fc9c 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
 8004018:	4620      	mov	r0, r4
 800401a:	f840 6b08 	str.w	r6, [r0], #8
 800401e:	f7fe fc97 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
struct CanControllersEntry final{
 8004022:	e7f0      	b.n	8004006 <wrapper_cpp+0xce>
	};
 8004024:	2301      	movs	r3, #1
 8004026:	4622      	mov	r2, r4
 8004028:	a908      	add	r1, sp, #32
 800402a:	a85a      	add	r0, sp, #360	; 0x168
 800402c:	f7fe fcd2 	bl	80029d4 <_ZN11stepping_md13CanControllerIfEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004030:	e000      	b.n	8004034 <wrapper_cpp+0xfc>
 8004032:	e7e1      	b.n	8003ff8 <wrapper_cpp+0xc0>
 8004034:	2300      	movs	r3, #0
 8004036:	463a      	mov	r2, r7
 8004038:	a908      	add	r1, sp, #32
 800403a:	a862      	add	r0, sp, #392	; 0x188
 800403c:	f7fe fcdc 	bl	80029f8 <_ZN11stepping_md13CanControllerIhEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004040:	e001      	b.n	8004046 <wrapper_cpp+0x10e>
 8004042:	2401      	movs	r4, #1
 8004044:	e7d9      	b.n	8003ffa <wrapper_cpp+0xc2>
 8004046:	2301      	movs	r3, #1
 8004048:	463a      	mov	r2, r7
 800404a:	a908      	add	r1, sp, #32
 800404c:	a86a      	add	r0, sp, #424	; 0x1a8
 800404e:	f7fe fcc1 	bl	80029d4 <_ZN11stepping_md13CanControllerIfEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004052:	e000      	b.n	8004056 <wrapper_cpp+0x11e>
 8004054:	e7f5      	b.n	8004042 <wrapper_cpp+0x10a>
 8004056:	2300      	movs	r3, #0
 8004058:	4632      	mov	r2, r6
 800405a:	a908      	add	r1, sp, #32
 800405c:	a872      	add	r0, sp, #456	; 0x1c8
 800405e:	f7fe fccb 	bl	80029f8 <_ZN11stepping_md13CanControllerIhEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 8004062:	2301      	movs	r3, #1
 8004064:	4632      	mov	r2, r6
 8004066:	a908      	add	r1, sp, #32
 8004068:	a87a      	add	r0, sp, #488	; 0x1e8
 800406a:	f7fe fcb3 	bl	80029d4 <_ZN11stepping_md13CanControllerIfEC1ERN6CRSLib3Can6RM000810CanManagerERNS_10ParametersEm>
 800406e:	e001      	b.n	8004074 <wrapper_cpp+0x13c>
 8004070:	2400      	movs	r4, #0
 8004072:	e7c2      	b.n	8003ffa <wrapper_cpp+0xc2>
	parameters[A].set_BID(bida);
 8004074:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004078:	4620      	mov	r0, r4
 800407a:	f7ff f810 	bl	800309e <_ZN11stepping_md10Parameters7set_BIDEt>
	parameters[C].set_BID(bida + 4);
 800407e:	f44f 7141 	mov.w	r1, #772	; 0x304
 8004082:	4638      	mov	r0, r7
 8004084:	f7ff f80b 	bl	800309e <_ZN11stepping_md10Parameters7set_BIDEt>
	parameters[E].set_BID(bida + 8);
 8004088:	f44f 7142 	mov.w	r1, #776	; 0x308
 800408c:	4630      	mov	r0, r6
 800408e:	f7ff f806 	bl	800309e <_ZN11stepping_md10Parameters7set_BIDEt>
			MotorParam{
 8004092:	f04f 0a00 	mov.w	sl, #0
 8004096:	f04f 0800 	mov.w	r8, #0
 800409a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 8004254 <wrapper_cpp+0x31c>
	parameters[A].set_motor_param(
 800409e:	4620      	mov	r0, r4
 80040a0:	a917      	add	r1, sp, #92	; 0x5c
			MotorParam{
 80040a2:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80040a6:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80040aa:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	parameters[A].set_motor_param(
 80040ae:	f7fe ffee 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	parameters[C].set_motor_param(
 80040b2:	4638      	mov	r0, r7
 80040b4:	a917      	add	r1, sp, #92	; 0x5c
			MotorParam{
 80040b6:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80040ba:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80040be:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	parameters[C].set_motor_param(
 80040c2:	f7fe ffe4 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	parameters[E].set_motor_param(
 80040c6:	4630      	mov	r0, r6
 80040c8:	a917      	add	r1, sp, #92	; 0x5c
			MotorParam{
 80040ca:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 80040ce:	f8cd 9060 	str.w	r9, [sp, #96]	; 0x60
 80040d2:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
	parameters[E].set_motor_param(
 80040d6:	f7fe ffda 	bl	800308e <_ZN11stepping_md10Parameters15set_motor_paramERKNS_10MotorParamE>
	motors[A].set_speed(rpm);
 80040da:	495f      	ldr	r1, [pc, #380]	; (8004258 <wrapper_cpp+0x320>)
 80040dc:	a82b      	add	r0, sp, #172	; 0xac
 80040de:	f7fe ff9d 	bl	800301c <_ZN11stepping_md15MotorController9set_speedEf>
	motors[C].set_speed(rpm);
 80040e2:	495d      	ldr	r1, [pc, #372]	; (8004258 <wrapper_cpp+0x320>)
 80040e4:	a838      	add	r0, sp, #224	; 0xe0
 80040e6:	f7fe ff99 	bl	800301c <_ZN11stepping_md15MotorController9set_speedEf>
	motors[E].set_speed(rpm);
 80040ea:	495b      	ldr	r1, [pc, #364]	; (8004258 <wrapper_cpp+0x320>)
 80040ec:	a845      	add	r0, sp, #276	; 0x114
 80040ee:	f7fe ff95 	bl	800301c <_ZN11stepping_md15MotorController9set_speedEf>
	dynamic_initialize();
 80040f2:	f7ff fcfb 	bl	8003aec <_ZN6CRSLib3Can6RM000813FilterManager18dynamic_initializeEv>
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 80040f6:	2214      	movs	r2, #20
 80040f8:	4651      	mov	r1, sl
 80040fa:	a80d      	add	r0, sp, #52	; 0x34
 80040fc:	f002 fb4c 	bl	8006798 <memset>
 8004100:	f64f 78f8 	movw	r8, #65528	; 0xfff8
 8004104:	2301      	movs	r3, #1
	};
 8004106:	4620      	mov	r0, r4
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterA{
 8004108:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800410c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	};
 8004110:	f7fe ffc3 	bl	800309a <_ZN11stepping_md10Parameters7get_BIDEv>
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8004114:	2214      	movs	r2, #20
 8004116:	4651      	mov	r1, sl
 8004118:	a812      	add	r0, sp, #72	; 0x48
			bool ide;
			bool rtr;
		};

		constexpr FrameFeature(const u16 std_id = max_std_id, const u32 ext_id = max_ext_id, const bool ide = false, const bool rtr = false) noexcept:
			value{(u16)(std_id << (u16)21 | ext_id << (u32)3 | (u8)ide << 2 | (u8)rtr << 1)}
 800411a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800411e:	f002 fb3b 	bl	8006798 <memset>
 8004122:	2301      	movs	r3, #1
	};
 8004124:	4638      	mov	r0, r7
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterC{
 8004126:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800412a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
	};
 800412e:	f7fe ffb4 	bl	800309a <_ZN11stepping_md10Parameters7get_BIDEv>
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterE{
 8004132:	2214      	movs	r2, #20
 8004134:	4651      	mov	r1, sl
 8004136:	a817      	add	r0, sp, #92	; 0x5c
 8004138:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 800413c:	f002 fb2c 	bl	8006798 <memset>
 8004140:	2301      	movs	r3, #1
	};
 8004142:	4630      	mov	r0, r6
	ConfigFilterArg<FilterWidth::bit32, FilterMode::mask> filterE{
 8004144:	f8cd 8060 	str.w	r8, [sp, #96]	; 0x60
 8004148:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
	};
 800414c:	f7fe ffa5 	bl	800309a <_ZN11stepping_md10Parameters7get_BIDEv>
		config_filter_bank(28, filter_args ...);
 8004150:	201c      	movs	r0, #28
 8004152:	ab17      	add	r3, sp, #92	; 0x5c
 8004154:	a90d      	add	r1, sp, #52	; 0x34
 8004156:	aa12      	add	r2, sp, #72	; 0x48
 8004158:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800415c:	f7ff fe2c 	bl	8003db8 <_ZN6CRSLib3Can6RM000813FilterManager18config_filter_bankIJLNS0_11FilterWidthE0ELS4_0ELS4_0EEJLNS0_10FilterModeE0ELS5_0ELS5_0EEEEvhDpRNS2_15ConfigFilterArgIXT_EXT0_EEE>
	    _M_invoker = &_My_handler::_M_invoke;
 8004160:	4b3e      	ldr	r3, [pc, #248]	; (800425c <wrapper_cpp+0x324>)
	cancontrollers[A].cmd.set_callback(
 8004162:	4628      	mov	r0, r5
 8004164:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <wrapper_cpp+0x328>)
 8004168:	a904      	add	r1, sp, #16
 800416a:	9404      	str	r4, [sp, #16]
 800416c:	9306      	str	r3, [sp, #24]
 800416e:	f7fe fdd0 	bl	8002d12 <_ZN11stepping_md13CanControllerIhE12set_callbackESt8functionIFihmEE>
    class function<_Res(_ArgTypes...)>
 8004172:	a804      	add	r0, sp, #16
 8004174:	f7fe fbec 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <wrapper_cpp+0x32c>)
	cancontrollers[C].cmd.set_callback(
 800417a:	a904      	add	r1, sp, #16
 800417c:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <wrapper_cpp+0x330>)
 8004180:	a862      	add	r0, sp, #392	; 0x188
 8004182:	9404      	str	r4, [sp, #16]
 8004184:	9306      	str	r3, [sp, #24]
 8004186:	f7fe fdc4 	bl	8002d12 <_ZN11stepping_md13CanControllerIhE12set_callbackESt8functionIFihmEE>
    class function<_Res(_ArgTypes...)>
 800418a:	a804      	add	r0, sp, #16
 800418c:	f7fe fbe0 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 8004190:	4b36      	ldr	r3, [pc, #216]	; (800426c <wrapper_cpp+0x334>)
	cancontrollers[E].cmd.set_callback(
 8004192:	a904      	add	r1, sp, #16
 8004194:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 8004196:	4b36      	ldr	r3, [pc, #216]	; (8004270 <wrapper_cpp+0x338>)
 8004198:	a872      	add	r0, sp, #456	; 0x1c8
 800419a:	9404      	str	r4, [sp, #16]
 800419c:	9306      	str	r3, [sp, #24]
 800419e:	f7fe fdb8 	bl	8002d12 <_ZN11stepping_md13CanControllerIhE12set_callbackESt8functionIFihmEE>
    class function<_Res(_ArgTypes...)>
 80041a2:	a804      	add	r0, sp, #16
 80041a4:	f7fe fbd4 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 80041a8:	4b32      	ldr	r3, [pc, #200]	; (8004274 <wrapper_cpp+0x33c>)
	cancontrollers[A].target.set_callback(
 80041aa:	a904      	add	r1, sp, #16
 80041ac:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80041ae:	4b32      	ldr	r3, [pc, #200]	; (8004278 <wrapper_cpp+0x340>)
 80041b0:	a85a      	add	r0, sp, #360	; 0x168
 80041b2:	9404      	str	r4, [sp, #16]
 80041b4:	9306      	str	r3, [sp, #24]
 80041b6:	f7fe fd86 	bl	8002cc6 <_ZN11stepping_md13CanControllerIfE12set_callbackESt8functionIFifmEE>
    class function<_Res(_ArgTypes...)>
 80041ba:	a804      	add	r0, sp, #16
 80041bc:	f7fe fbc8 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 80041c0:	4b2e      	ldr	r3, [pc, #184]	; (800427c <wrapper_cpp+0x344>)
	cancontrollers[C].target.set_callback(
 80041c2:	a904      	add	r1, sp, #16
 80041c4:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80041c6:	4b2e      	ldr	r3, [pc, #184]	; (8004280 <wrapper_cpp+0x348>)
 80041c8:	a86a      	add	r0, sp, #424	; 0x1a8
 80041ca:	9404      	str	r4, [sp, #16]
 80041cc:	9306      	str	r3, [sp, #24]
 80041ce:	f7fe fd7a 	bl	8002cc6 <_ZN11stepping_md13CanControllerIfE12set_callbackESt8functionIFifmEE>
    class function<_Res(_ArgTypes...)>
 80041d2:	a804      	add	r0, sp, #16
 80041d4:	f7fe fbbc 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	    _M_invoker = &_My_handler::_M_invoke;
 80041d8:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <wrapper_cpp+0x34c>)
	cancontrollers[E].target.set_callback(
 80041da:	a904      	add	r1, sp, #16
 80041dc:	9307      	str	r3, [sp, #28]
	    _M_manager = &_My_handler::_M_manager;
 80041de:	4b2a      	ldr	r3, [pc, #168]	; (8004288 <wrapper_cpp+0x350>)
 80041e0:	a87a      	add	r0, sp, #488	; 0x1e8
 80041e2:	9404      	str	r4, [sp, #16]
 80041e4:	9306      	str	r3, [sp, #24]
 80041e6:	f7fe fd6e 	bl	8002cc6 <_ZN11stepping_md13CanControllerIfE12set_callbackESt8functionIFifmEE>
    class function<_Res(_ArgTypes...)>
 80041ea:	a804      	add	r0, sp, #16
 80041ec:	f7fe fbb0 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	HAL_CAN_Start(&hcan);
 80041f0:	480c      	ldr	r0, [pc, #48]	; (8004224 <wrapper_cpp+0x2ec>)
 80041f2:	f000 f95e 	bl	80044b2 <HAL_CAN_Start>
      { return iterator(this->_M_impl._M_node._M_next); }
 80041f6:	4c25      	ldr	r4, [pc, #148]	; (800428c <wrapper_cpp+0x354>)
 80041f8:	4e25      	ldr	r6, [pc, #148]	; (8004290 <wrapper_cpp+0x358>)
				for(CanController_Base instance : instances){
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	42a3      	cmp	r3, r4
 80041fe:	d005      	beq.n	800420c <wrapper_cpp+0x2d4>
	class CanController_Base{
 8004200:	4b24      	ldr	r3, [pc, #144]	; (8004294 <wrapper_cpp+0x35c>)
					instance.update();
 8004202:	a804      	add	r0, sp, #16
	class CanController_Base{
 8004204:	9304      	str	r3, [sp, #16]
					instance.update();
 8004206:	f7fe fb8b 	bl	8002920 <_ZN11stepping_md18CanController_Base6updateEv>
 800420a:	e04a      	b.n	80042a2 <wrapper_cpp+0x36a>
				for(MotorController_Base controller : MotorController_Base::instances){
 800420c:	6833      	ldr	r3, [r6, #0]
 800420e:	42b3      	cmp	r3, r6
 8004210:	d004      	beq.n	800421c <wrapper_cpp+0x2e4>
	class MotorController_Base{
 8004212:	4b21      	ldr	r3, [pc, #132]	; (8004298 <wrapper_cpp+0x360>)
					controller.update();
 8004214:	a804      	add	r0, sp, #16
	class MotorController_Base{
 8004216:	9304      	str	r3, [sp, #16]
					controller.update();
 8004218:	f7fe fdee 	bl	8002df8 <_ZN11stepping_md20MotorController_Base6updateEv>
		led_process();
 800421c:	f7fe ff58 	bl	80030d0 <_ZN11stepping_md11led_processEv>
 8004220:	e7eb      	b.n	80041fa <wrapper_cpp+0x2c2>
 8004222:	e725      	b.n	8004070 <wrapper_cpp+0x138>
 8004224:	20000374 	.word	0x20000374
 8004228:	08006e64 	.word	0x08006e64
 800422c:	2000035c 	.word	0x2000035c
 8004230:	08006e70 	.word	0x08006e70
 8004234:	40010800 	.word	0x40010800
 8004238:	3db2b8c2 	.word	0x3db2b8c2
 800423c:	2000039c 	.word	0x2000039c
 8004240:	40010c00 	.word	0x40010c00
 8004244:	200003e4 	.word	0x200003e4
 8004248:	2000042c 	.word	0x2000042c
 800424c:	08006ce0 	.word	0x08006ce0
 8004250:	08006cec 	.word	0x08006cec
 8004254:	43480000 	.word	0x43480000
 8004258:	42f00000 	.word	0x42f00000
 800425c:	08003a15 	.word	0x08003a15
 8004260:	080039f5 	.word	0x080039f5
 8004264:	080039b9 	.word	0x080039b9
 8004268:	08003999 	.word	0x08003999
 800426c:	0800395d 	.word	0x0800395d
 8004270:	0800393d 	.word	0x0800393d
 8004274:	08003901 	.word	0x08003901
 8004278:	080038e1 	.word	0x080038e1
 800427c:	080038a1 	.word	0x080038a1
 8004280:	08003881 	.word	0x08003881
 8004284:	08003841 	.word	0x08003841
 8004288:	08003821 	.word	0x08003821
 800428c:	20000344 	.word	0x20000344
 8004290:	20000350 	.word	0x20000350
 8004294:	08006cd4 	.word	0x08006cd4
 8004298:	08006da8 	.word	0x08006da8
 800429c:	a804      	add	r0, sp, #16
 800429e:	f7fe fb57 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
 80042a2:	462c      	mov	r4, r5
	cancontrollers[E].target.set_callback(
 80042a4:	2503      	movs	r5, #3
	class CanController : public CanController_Base{
 80042a6:	4f0c      	ldr	r7, [pc, #48]	; (80042d8 <wrapper_cpp+0x3a0>)
 80042a8:	4e0c      	ldr	r6, [pc, #48]	; (80042dc <wrapper_cpp+0x3a4>)
 80042aa:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
 80042ae:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
 80042b2:	f7fe fb4d 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
 80042b6:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
 80042ba:	f104 0088 	add.w	r0, r4, #136	; 0x88
 80042be:	f7fe fb47 	bl	8002950 <_ZNSt14_Function_baseD1Ev>
	};
 80042c2:	3d01      	subs	r5, #1
 80042c4:	f1a4 0440 	sub.w	r4, r4, #64	; 0x40
 80042c8:	d1ef      	bne.n	80042aa <wrapper_cpp+0x372>
 80042ca:	f001 f9fb 	bl	80056c4 <__cxa_end_cleanup>
 80042ce:	e7e5      	b.n	800429c <wrapper_cpp+0x364>
 80042d0:	e7e4      	b.n	800429c <wrapper_cpp+0x364>
 80042d2:	e7e3      	b.n	800429c <wrapper_cpp+0x364>
 80042d4:	e7e2      	b.n	800429c <wrapper_cpp+0x364>
 80042d6:	e7e1      	b.n	800429c <wrapper_cpp+0x364>
 80042d8:	08006ce0 	.word	0x08006ce0
 80042dc:	08006cec 	.word	0x08006cec

080042e0 <Reset_Handler>:
 80042e0:	480c      	ldr	r0, [pc, #48]	; (8004314 <LoopFillZerobss+0x12>)
 80042e2:	490d      	ldr	r1, [pc, #52]	; (8004318 <LoopFillZerobss+0x16>)
 80042e4:	4a0d      	ldr	r2, [pc, #52]	; (800431c <LoopFillZerobss+0x1a>)
 80042e6:	2300      	movs	r3, #0
 80042e8:	e002      	b.n	80042f0 <LoopCopyDataInit>

080042ea <CopyDataInit>:
 80042ea:	58d4      	ldr	r4, [r2, r3]
 80042ec:	50c4      	str	r4, [r0, r3]
 80042ee:	3304      	adds	r3, #4

080042f0 <LoopCopyDataInit>:
 80042f0:	18c4      	adds	r4, r0, r3
 80042f2:	428c      	cmp	r4, r1
 80042f4:	d3f9      	bcc.n	80042ea <CopyDataInit>
 80042f6:	4a0a      	ldr	r2, [pc, #40]	; (8004320 <LoopFillZerobss+0x1e>)
 80042f8:	4c0a      	ldr	r4, [pc, #40]	; (8004324 <LoopFillZerobss+0x22>)
 80042fa:	2300      	movs	r3, #0
 80042fc:	e001      	b.n	8004302 <LoopFillZerobss>

080042fe <FillZerobss>:
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	3204      	adds	r2, #4

08004302 <LoopFillZerobss>:
 8004302:	42a2      	cmp	r2, r4
 8004304:	d3fb      	bcc.n	80042fe <FillZerobss>
 8004306:	f7ff fa67 	bl	80037d8 <SystemInit>
 800430a:	f002 f9e9 	bl	80066e0 <__libc_init_array>
 800430e:	f7fe ff83 	bl	8003218 <main>
 8004312:	4770      	bx	lr
 8004314:	20000000 	.word	0x20000000
 8004318:	2000007c 	.word	0x2000007c
 800431c:	080074e0 	.word	0x080074e0
 8004320:	2000007c 	.word	0x2000007c
 8004324:	200004bc 	.word	0x200004bc

08004328 <ADC1_2_IRQHandler>:
 8004328:	e7fe      	b.n	8004328 <ADC1_2_IRQHandler>
	...

0800432c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800432c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <HAL_InitTick+0x3c>)
{
 8004330:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004332:	7818      	ldrb	r0, [r3, #0]
 8004334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004338:	fbb3 f3f0 	udiv	r3, r3, r0
 800433c:	4a0b      	ldr	r2, [pc, #44]	; (800436c <HAL_InitTick+0x40>)
 800433e:	6810      	ldr	r0, [r2, #0]
 8004340:	fbb0 f0f3 	udiv	r0, r0, r3
 8004344:	f000 fa1e 	bl	8004784 <HAL_SYSTICK_Config>
 8004348:	4604      	mov	r4, r0
 800434a:	b958      	cbnz	r0, 8004364 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800434c:	2d0f      	cmp	r5, #15
 800434e:	d809      	bhi.n	8004364 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004350:	4602      	mov	r2, r0
 8004352:	4629      	mov	r1, r5
 8004354:	f04f 30ff 	mov.w	r0, #4294967295
 8004358:	f000 f9d4 	bl	8004704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800435c:	4620      	mov	r0, r4
 800435e:	4b04      	ldr	r3, [pc, #16]	; (8004370 <HAL_InitTick+0x44>)
 8004360:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004362:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004364:	2001      	movs	r0, #1
 8004366:	e7fc      	b.n	8004362 <HAL_InitTick+0x36>
 8004368:	20000008 	.word	0x20000008
 800436c:	20000004 	.word	0x20000004
 8004370:	2000000c 	.word	0x2000000c

08004374 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004374:	4a07      	ldr	r2, [pc, #28]	; (8004394 <HAL_Init+0x20>)
{
 8004376:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004378:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800437a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	f043 0310 	orr.w	r3, r3, #16
 8004380:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004382:	f000 f9ad 	bl	80046e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004386:	200f      	movs	r0, #15
 8004388:	f7ff ffd0 	bl	800432c <HAL_InitTick>
  HAL_MspInit();
 800438c:	f7ff f8e6 	bl	800355c <HAL_MspInit>
}
 8004390:	2000      	movs	r0, #0
 8004392:	bd08      	pop	{r3, pc}
 8004394:	40022000 	.word	0x40022000

08004398 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004398:	4a03      	ldr	r2, [pc, #12]	; (80043a8 <HAL_IncTick+0x10>)
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <HAL_IncTick+0x14>)
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	781b      	ldrb	r3, [r3, #0]
 80043a0:	440b      	add	r3, r1
 80043a2:	6013      	str	r3, [r2, #0]
}
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	20000478 	.word	0x20000478
 80043ac:	20000008 	.word	0x20000008

080043b0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80043b0:	4b01      	ldr	r3, [pc, #4]	; (80043b8 <HAL_GetTick+0x8>)
 80043b2:	6818      	ldr	r0, [r3, #0]
}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000478 	.word	0x20000478

080043bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80043bc:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80043be:	4604      	mov	r4, r0
 80043c0:	2800      	cmp	r0, #0
 80043c2:	d06e      	beq.n	80044a2 <HAL_CAN_Init+0xe6>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80043c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80043c8:	b90b      	cbnz	r3, 80043ce <HAL_CAN_Init+0x12>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80043ca:	f7ff f8e9 	bl	80035a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80043ce:	6822      	ldr	r2, [r4, #0]
 80043d0:	6813      	ldr	r3, [r2, #0]
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043d8:	f7ff ffea 	bl	80043b0 <HAL_GetTick>
 80043dc:	4605      	mov	r5, r0

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80043de:	6823      	ldr	r3, [r4, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	07d1      	lsls	r1, r2, #31
 80043e4:	d551      	bpl.n	800448a <HAL_CAN_Init+0xce>
      return HAL_ERROR;
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	f022 0202 	bic.w	r2, r2, #2
 80043ec:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80043ee:	f7ff ffdf 	bl	80043b0 <HAL_GetTick>
 80043f2:	4605      	mov	r5, r0

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	0792      	lsls	r2, r2, #30
 80043fa:	d454      	bmi.n	80044a6 <HAL_CAN_Init+0xea>
      return HAL_ERROR;
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80043fc:	7e22      	ldrb	r2, [r4, #24]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80043fe:	2000      	movs	r0, #0
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004400:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	bf0c      	ite	eq
 8004406:	f042 0280 	orreq.w	r2, r2, #128	; 0x80
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800440a:	f022 0280 	bicne.w	r2, r2, #128	; 0x80
 800440e:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoBusOff == ENABLE)
 8004410:	7e62      	ldrb	r2, [r4, #25]
 8004412:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	bf0c      	ite	eq
 8004418:	f042 0240 	orreq.w	r2, r2, #64	; 0x40
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800441c:	f022 0240 	bicne.w	r2, r2, #64	; 0x40
 8004420:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004422:	7ea2      	ldrb	r2, [r4, #26]
 8004424:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	bf0c      	ite	eq
 800442a:	f042 0220 	orreq.w	r2, r2, #32
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800442e:	f022 0220 	bicne.w	r2, r2, #32
 8004432:	601a      	str	r2, [r3, #0]
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004434:	7ee2      	ldrb	r2, [r4, #27]
 8004436:	2a01      	cmp	r2, #1
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	bf0c      	ite	eq
 800443c:	f022 0210 	biceq.w	r2, r2, #16
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004440:	f042 0210 	orrne.w	r2, r2, #16
 8004444:	601a      	str	r2, [r3, #0]
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004446:	7f22      	ldrb	r2, [r4, #28]
 8004448:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	bf0c      	ite	eq
 800444e:	f042 0208 	orreq.w	r2, r2, #8
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004452:	f022 0208 	bicne.w	r2, r2, #8
 8004456:	601a      	str	r2, [r3, #0]
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004458:	7f62      	ldrb	r2, [r4, #29]
 800445a:	2a01      	cmp	r2, #1
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	bf0c      	ite	eq
 8004460:	f042 0204 	orreq.w	r2, r2, #4
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004464:	f022 0204 	bicne.w	r2, r2, #4
 8004468:	601a      	str	r2, [r3, #0]
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800446a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800446e:	430a      	orrs	r2, r1
 8004470:	6921      	ldr	r1, [r4, #16]
 8004472:	430a      	orrs	r2, r1
 8004474:	6961      	ldr	r1, [r4, #20]
 8004476:	430a      	orrs	r2, r1
 8004478:	6861      	ldr	r1, [r4, #4]
 800447a:	3901      	subs	r1, #1
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004480:	2301      	movs	r3, #1
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004482:	6260      	str	r0, [r4, #36]	; 0x24
  hcan->State = HAL_CAN_STATE_READY;
 8004484:	f884 3020 	strb.w	r3, [r4, #32]

  /* Return function status */
  return HAL_OK;
}
 8004488:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800448a:	f7ff ff91 	bl	80043b0 <HAL_GetTick>
 800448e:	1b40      	subs	r0, r0, r5
 8004490:	280a      	cmp	r0, #10
 8004492:	d9a4      	bls.n	80043de <HAL_CAN_Init+0x22>
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800449a:	6263      	str	r3, [r4, #36]	; 0x24
      hcan->State = HAL_CAN_STATE_ERROR;
 800449c:	2305      	movs	r3, #5
 800449e:	f884 3020 	strb.w	r3, [r4, #32]
    return HAL_ERROR;
 80044a2:	2001      	movs	r0, #1
 80044a4:	e7f0      	b.n	8004488 <HAL_CAN_Init+0xcc>
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044a6:	f7ff ff83 	bl	80043b0 <HAL_GetTick>
 80044aa:	1b40      	subs	r0, r0, r5
 80044ac:	280a      	cmp	r0, #10
 80044ae:	d9a1      	bls.n	80043f4 <HAL_CAN_Init+0x38>
 80044b0:	e7f0      	b.n	8004494 <HAL_CAN_Init+0xd8>

080044b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80044b2:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80044b4:	f890 3020 	ldrb.w	r3, [r0, #32]
{
 80044b8:	4604      	mov	r4, r0
  if (hcan->State == HAL_CAN_STATE_READY)
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	b2dd      	uxtb	r5, r3
 80044be:	d120      	bne.n	8004502 <HAL_CAN_Start+0x50>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80044c0:	2302      	movs	r3, #2

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044c2:	6802      	ldr	r2, [r0, #0]
    hcan->State = HAL_CAN_STATE_LISTENING;
 80044c4:	f880 3020 	strb.w	r3, [r0, #32]
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80044c8:	6813      	ldr	r3, [r2, #0]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80044d0:	f7ff ff6e 	bl	80043b0 <HAL_GetTick>
 80044d4:	4606      	mov	r6, r0

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f013 0301 	ands.w	r3, r3, #1
 80044de:	d102      	bne.n	80044e6 <HAL_CAN_Start+0x34>

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;

    /* Return function status */
    return HAL_OK;
 80044e0:	461d      	mov	r5, r3
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80044e2:	6263      	str	r3, [r4, #36]	; 0x24
    return HAL_OK;
 80044e4:	e00b      	b.n	80044fe <HAL_CAN_Start+0x4c>
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80044e6:	f7ff ff63 	bl	80043b0 <HAL_GetTick>
 80044ea:	1b80      	subs	r0, r0, r6
 80044ec:	280a      	cmp	r0, #10
 80044ee:	d9f2      	bls.n	80044d6 <HAL_CAN_Start+0x24>
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80044f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80044f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044f6:	6263      	str	r3, [r4, #36]	; 0x24
        hcan->State = HAL_CAN_STATE_ERROR;
 80044f8:	2305      	movs	r3, #5
 80044fa:	f884 3020 	strb.w	r3, [r4, #32]
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;

    return HAL_ERROR;
  }
}
 80044fe:	4628      	mov	r0, r5
 8004500:	bd70      	pop	{r4, r5, r6, pc}
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004502:	6a43      	ldr	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 8004504:	2501      	movs	r5, #1
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004506:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800450a:	6243      	str	r3, [r0, #36]	; 0x24
    return HAL_ERROR;
 800450c:	e7f7      	b.n	80044fe <HAL_CAN_Start+0x4c>

0800450e <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800450e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004510:	f890 5020 	ldrb.w	r5, [r0, #32]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004514:	6806      	ldr	r6, [r0, #0]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004516:	3d01      	subs	r5, #1
 8004518:	2d01      	cmp	r5, #1
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800451a:	68b4      	ldr	r4, [r6, #8]
  if ((state == HAL_CAN_STATE_READY) ||
 800451c:	d841      	bhi.n	80045a2 <HAL_CAN_AddTxMessage+0x94>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800451e:	f014 5fe0 	tst.w	r4, #469762048	; 0x1c000000
 8004522:	d03a      	beq.n	800459a <HAL_CAN_AddTxMessage+0x8c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
        ((tsr & CAN_TSR_TME2) != 0U))
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004524:	f3c4 6401 	ubfx	r4, r4, #24, #2

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004528:	2c03      	cmp	r4, #3
 800452a:	f04f 0501 	mov.w	r5, #1
 800452e:	d105      	bne.n	800453c <HAL_CAN_AddTxMessage+0x2e>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004530:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004532:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004536:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 8004538:	2001      	movs	r0, #1
 800453a:	e028      	b.n	800458e <HAL_CAN_AddTxMessage+0x80>
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800453c:	40a5      	lsls	r5, r4
 800453e:	601d      	str	r5, [r3, #0]
      if (pHeader->IDE == CAN_ID_STD)
 8004540:	e9d1 0702 	ldrd	r0, r7, [r1, #8]
 8004544:	f104 0318 	add.w	r3, r4, #24
 8004548:	bb10      	cbnz	r0, 8004590 <HAL_CAN_AddTxMessage+0x82>
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800454a:	6808      	ldr	r0, [r1, #0]
 800454c:	ea47 5040 	orr.w	r0, r7, r0, lsl #21
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004550:	011b      	lsls	r3, r3, #4
 8004552:	50f0      	str	r0, [r6, r3]
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004554:	0120      	lsls	r0, r4, #4
 8004556:	eb06 1304 	add.w	r3, r6, r4, lsl #4
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800455a:	4406      	add	r6, r0
      return HAL_OK;
 800455c:	2000      	movs	r0, #0
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800455e:	690d      	ldr	r5, [r1, #16]
 8004560:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004564:	7d09      	ldrb	r1, [r1, #20]
 8004566:	2901      	cmp	r1, #1
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004568:	bf02      	ittt	eq
 800456a:	f8d3 1184 	ldreq.w	r1, [r3, #388]	; 0x184
 800456e:	f441 7180 	orreq.w	r1, r1, #256	; 0x100
 8004572:	f8c3 1184 	streq.w	r1, [r3, #388]	; 0x184
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004576:	6851      	ldr	r1, [r2, #4]
 8004578:	f8c6 118c 	str.w	r1, [r6, #396]	; 0x18c
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	f8c6 2188 	str.w	r2, [r6, #392]	; 0x188
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004582:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 8004586:	f042 0201 	orr.w	r2, r2, #1
 800458a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800458e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004590:	684d      	ldr	r5, [r1, #4]
                                                           pHeader->IDE |
 8004592:	4338      	orrs	r0, r7
 8004594:	ea40 00c5 	orr.w	r0, r0, r5, lsl #3
 8004598:	e7da      	b.n	8004550 <HAL_CAN_AddTxMessage+0x42>
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800459a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800459c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80045a0:	e7c9      	b.n	8004536 <HAL_CAN_AddTxMessage+0x28>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045a2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045a8:	e7c5      	b.n	8004536 <HAL_CAN_AddTxMessage+0x28>

080045aa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
  uint32_t freelevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80045aa:	f890 3020 	ldrb.w	r3, [r0, #32]

  if ((state == HAL_CAN_STATE_READY) ||
 80045ae:	3b01      	subs	r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d80c      	bhi.n	80045ce <HAL_CAN_GetTxMailboxesFreeLevel+0x24>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80045b4:	6803      	ldr	r3, [r0, #0]
 80045b6:	6898      	ldr	r0, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80045b8:	689a      	ldr	r2, [r3, #8]
    {
      freelevel++;
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80045ba:	689b      	ldr	r3, [r3, #8]
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80045bc:	0112      	lsls	r2, r2, #4
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80045be:	f3c0 6080 	ubfx	r0, r0, #26, #1
      freelevel++;
 80045c2:	bf48      	it	mi
 80045c4:	3001      	addmi	r0, #1
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	d502      	bpl.n	80045d0 <HAL_CAN_GetTxMailboxesFreeLevel+0x26>
    {
      freelevel++;
 80045ca:	3001      	adds	r0, #1
 80045cc:	4770      	bx	lr
  uint32_t freelevel = 0U;
 80045ce:	2000      	movs	r0, #0
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
}
 80045d0:	4770      	bx	lr

080045d2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80045d2:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_CAN_StateTypeDef state = hcan->State;
 80045d4:	f890 4020 	ldrb.w	r4, [r0, #32]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80045d8:	3c01      	subs	r4, #1
 80045da:	2c01      	cmp	r4, #1
 80045dc:	d86c      	bhi.n	80046b8 <HAL_CAN_GetRxMessage+0xe6>
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80045de:	6806      	ldr	r6, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80045e0:	b941      	cbnz	r1, 80045f4 <HAL_CAN_GetRxMessage+0x22>
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80045e2:	68f4      	ldr	r4, [r6, #12]
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80045e4:	07a4      	lsls	r4, r4, #30
 80045e6:	d107      	bne.n	80045f8 <HAL_CAN_GetRxMessage+0x26>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80045e8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80045ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    return HAL_OK;
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80045ee:	6243      	str	r3, [r0, #36]	; 0x24

    return HAL_ERROR;
 80045f0:	2001      	movs	r0, #1
 80045f2:	e056      	b.n	80046a2 <HAL_CAN_GetRxMessage+0xd0>
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80045f4:	6934      	ldr	r4, [r6, #16]
 80045f6:	e7f5      	b.n	80045e4 <HAL_CAN_GetRxMessage+0x12>
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80045f8:	eb06 1501 	add.w	r5, r6, r1, lsl #4
 80045fc:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004600:	010c      	lsls	r4, r1, #4
 8004602:	f007 0704 	and.w	r7, r7, #4
 8004606:	6097      	str	r7, [r2, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004608:	2f00      	cmp	r7, #0
 800460a:	d14b      	bne.n	80046a4 <HAL_CAN_GetRxMessage+0xd2>
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800460c:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 8004610:	0d7f      	lsrs	r7, r7, #21
 8004612:	6017      	str	r7, [r2, #0]
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004614:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004618:	4426      	add	r6, r4
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800461a:	f007 0702 	and.w	r7, r7, #2
 800461e:	60d7      	str	r7, [r2, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004620:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
 8004624:	f007 070f 	and.w	r7, r7, #15
 8004628:	6117      	str	r7, [r2, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800462a:	f8d5 71b4 	ldr.w	r7, [r5, #436]	; 0x1b4
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800462e:	f8d5 51b4 	ldr.w	r5, [r5, #436]	; 0x1b4
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004632:	f3c7 2707 	ubfx	r7, r7, #8, #8
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004636:	0c2d      	lsrs	r5, r5, #16
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004638:	6197      	str	r7, [r2, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800463a:	6155      	str	r5, [r2, #20]
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800463c:	f8d6 21b8 	ldr.w	r2, [r6, #440]	; 0x1b8
 8004640:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004642:	6802      	ldr	r2, [r0, #0]
 8004644:	4422      	add	r2, r4
 8004646:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 800464a:	0a12      	lsrs	r2, r2, #8
 800464c:	705a      	strb	r2, [r3, #1]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800464e:	6802      	ldr	r2, [r0, #0]
 8004650:	4422      	add	r2, r4
 8004652:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004656:	0c12      	lsrs	r2, r2, #16
 8004658:	709a      	strb	r2, [r3, #2]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800465a:	6802      	ldr	r2, [r0, #0]
 800465c:	4422      	add	r2, r4
 800465e:	f8d2 21b8 	ldr.w	r2, [r2, #440]	; 0x1b8
 8004662:	0e12      	lsrs	r2, r2, #24
 8004664:	70da      	strb	r2, [r3, #3]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004666:	6802      	ldr	r2, [r0, #0]
 8004668:	4422      	add	r2, r4
 800466a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 800466e:	711a      	strb	r2, [r3, #4]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004670:	6802      	ldr	r2, [r0, #0]
 8004672:	4422      	add	r2, r4
 8004674:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004678:	0a12      	lsrs	r2, r2, #8
 800467a:	715a      	strb	r2, [r3, #5]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800467c:	6802      	ldr	r2, [r0, #0]
 800467e:	4422      	add	r2, r4
 8004680:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004684:	0c12      	lsrs	r2, r2, #16
 8004686:	719a      	strb	r2, [r3, #6]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004688:	6802      	ldr	r2, [r0, #0]
 800468a:	4422      	add	r2, r4
 800468c:	f8d2 21bc 	ldr.w	r2, [r2, #444]	; 0x1bc
 8004690:	0e12      	lsrs	r2, r2, #24
 8004692:	71da      	strb	r2, [r3, #7]
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004694:	6803      	ldr	r3, [r0, #0]
 8004696:	b951      	cbnz	r1, 80046ae <HAL_CAN_GetRxMessage+0xdc>
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	f042 0220 	orr.w	r2, r2, #32
 800469e:	60da      	str	r2, [r3, #12]
    return HAL_OK;
 80046a0:	2000      	movs	r0, #0
  }
}
 80046a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80046a4:	f8d5 71b0 	ldr.w	r7, [r5, #432]	; 0x1b0
 80046a8:	08ff      	lsrs	r7, r7, #3
 80046aa:	6057      	str	r7, [r2, #4]
 80046ac:	e7b2      	b.n	8004614 <HAL_CAN_GetRxMessage+0x42>
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80046ae:	691a      	ldr	r2, [r3, #16]
 80046b0:	f042 0220 	orr.w	r2, r2, #32
 80046b4:	611a      	str	r2, [r3, #16]
 80046b6:	e7f3      	b.n	80046a0 <HAL_CAN_GetRxMessage+0xce>
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80046ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046be:	e796      	b.n	80045ee <HAL_CAN_GetRxMessage+0x1c>

080046c0 <HAL_CAN_GetRxFifoFillLevel>:
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
  uint32_t filllevel = 0U;
  HAL_CAN_StateTypeDef state = hcan->State;
 80046c0:	f890 3020 	ldrb.w	r3, [r0, #32]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80046c4:	3b01      	subs	r3, #1
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d807      	bhi.n	80046da <HAL_CAN_GetRxFifoFillLevel+0x1a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80046ca:	6803      	ldr	r3, [r0, #0]
    if (RxFifo == CAN_RX_FIFO0)
 80046cc:	b919      	cbnz	r1, 80046d6 <HAL_CAN_GetRxFifoFillLevel+0x16>
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80046ce:	68d8      	ldr	r0, [r3, #12]
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80046d0:	f000 0003 	and.w	r0, r0, #3
 80046d4:	4770      	bx	lr
 80046d6:	6918      	ldr	r0, [r3, #16]
 80046d8:	e7fa      	b.n	80046d0 <HAL_CAN_GetRxFifoFillLevel+0x10>
  uint32_t filllevel = 0U;
 80046da:	2000      	movs	r0, #0
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
}
 80046dc:	4770      	bx	lr
	...

080046e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e0:	4907      	ldr	r1, [pc, #28]	; (8004700 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046e2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046e4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80046e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80046ee:	0412      	lsls	r2, r2, #16
 80046f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80046f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80046f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80046f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80046fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80046fe:	4770      	bx	lr
 8004700:	e000ed00 	.word	0xe000ed00

08004704 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004704:	4b16      	ldr	r3, [pc, #88]	; (8004760 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004706:	b530      	push	{r4, r5, lr}
 8004708:	68dc      	ldr	r4, [r3, #12]
 800470a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800470e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004712:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004714:	2b04      	cmp	r3, #4
 8004716:	bf28      	it	cs
 8004718:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800471a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004720:	bf98      	it	ls
 8004722:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004724:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004728:	bf88      	it	hi
 800472a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800472c:	ea21 0303 	bic.w	r3, r1, r3
 8004730:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004732:	fa05 f404 	lsl.w	r4, r5, r4
 8004736:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 800473a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800473c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004740:	bfac      	ite	ge
 8004742:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004746:	4a07      	ldrlt	r2, [pc, #28]	; (8004764 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004748:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800474c:	b2db      	uxtb	r3, r3
 800474e:	bfab      	itete	ge
 8004750:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004754:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004758:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800475c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800475e:	bd30      	pop	{r4, r5, pc}
 8004760:	e000ed00 	.word	0xe000ed00
 8004764:	e000ed14 	.word	0xe000ed14

08004768 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004768:	2800      	cmp	r0, #0
 800476a:	db08      	blt.n	800477e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800476c:	2301      	movs	r3, #1
 800476e:	0942      	lsrs	r2, r0, #5
 8004770:	f000 001f 	and.w	r0, r0, #31
 8004774:	fa03 f000 	lsl.w	r0, r3, r0
 8004778:	4b01      	ldr	r3, [pc, #4]	; (8004780 <HAL_NVIC_EnableIRQ+0x18>)
 800477a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800477e:	4770      	bx	lr
 8004780:	e000e100 	.word	0xe000e100

08004784 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004784:	3801      	subs	r0, #1
 8004786:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800478a:	d20b      	bcs.n	80047a4 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800478c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004790:	21f0      	movs	r1, #240	; 0xf0
 8004792:	4a05      	ldr	r2, [pc, #20]	; (80047a8 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004794:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004796:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800479a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800479c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800479e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047a0:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047a2:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80047a4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80047a6:	4770      	bx	lr
 80047a8:	e000ed00 	.word	0xe000ed00

080047ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80047b0:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 80047b2:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80047b4:	4f61      	ldr	r7, [pc, #388]	; (800493c <HAL_GPIO_Init+0x190>)
 80047b6:	4b62      	ldr	r3, [pc, #392]	; (8004940 <HAL_GPIO_Init+0x194>)
      switch (GPIO_Init->Mode)
 80047b8:	f8df c188 	ldr.w	ip, [pc, #392]	; 8004944 <HAL_GPIO_Init+0x198>
 80047bc:	f8df e188 	ldr.w	lr, [pc, #392]	; 8004948 <HAL_GPIO_Init+0x19c>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c0:	680d      	ldr	r5, [r1, #0]
 80047c2:	fa35 f406 	lsrs.w	r4, r5, r6
 80047c6:	d102      	bne.n	80047ce <HAL_GPIO_Init+0x22>
      }
    }

	position++;
  }
}
 80047c8:	b003      	add	sp, #12
 80047ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 80047ce:	f04f 0801 	mov.w	r8, #1
 80047d2:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047d6:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 80047da:	ea38 0505 	bics.w	r5, r8, r5
 80047de:	d177      	bne.n	80048d0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80047e0:	684d      	ldr	r5, [r1, #4]
 80047e2:	2d03      	cmp	r5, #3
 80047e4:	d807      	bhi.n	80047f6 <HAL_GPIO_Init+0x4a>
 80047e6:	3d01      	subs	r5, #1
 80047e8:	2d02      	cmp	r5, #2
 80047ea:	f200 8082 	bhi.w	80048f2 <HAL_GPIO_Init+0x146>
 80047ee:	e8df f005 	tbb	[pc, r5]
 80047f2:	9792      	.short	0x9792
 80047f4:	9d          	.byte	0x9d
 80047f5:	00          	.byte	0x00
 80047f6:	2d12      	cmp	r5, #18
 80047f8:	f000 8095 	beq.w	8004926 <HAL_GPIO_Init+0x17a>
 80047fc:	d86a      	bhi.n	80048d4 <HAL_GPIO_Init+0x128>
 80047fe:	2d11      	cmp	r5, #17
 8004800:	f000 808b 	beq.w	800491a <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004804:	2cff      	cmp	r4, #255	; 0xff
 8004806:	bf98      	it	ls
 8004808:	4682      	movls	sl, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800480a:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800480e:	bf88      	it	hi
 8004810:	f100 0a04 	addhi.w	sl, r0, #4
 8004814:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004818:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800481c:	bf88      	it	hi
 800481e:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004820:	fa09 fb05 	lsl.w	fp, r9, r5
 8004824:	ea28 080b 	bic.w	r8, r8, fp
 8004828:	fa02 f505 	lsl.w	r5, r2, r5
 800482c:	ea48 0505 	orr.w	r5, r8, r5
 8004830:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004834:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8004838:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 800483c:	d048      	beq.n	80048d0 <HAL_GPIO_Init+0x124>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800483e:	69bd      	ldr	r5, [r7, #24]
 8004840:	f026 0803 	bic.w	r8, r6, #3
 8004844:	f045 0501 	orr.w	r5, r5, #1
 8004848:	61bd      	str	r5, [r7, #24]
 800484a:	69bd      	ldr	r5, [r7, #24]
 800484c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8004850:	f005 0501 	and.w	r5, r5, #1
 8004854:	9501      	str	r5, [sp, #4]
 8004856:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800485a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800485e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004860:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8004864:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004868:	fa09 f90b 	lsl.w	r9, r9, fp
 800486c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004870:	4d36      	ldr	r5, [pc, #216]	; (800494c <HAL_GPIO_Init+0x1a0>)
 8004872:	42a8      	cmp	r0, r5
 8004874:	d05e      	beq.n	8004934 <HAL_GPIO_Init+0x188>
 8004876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800487a:	42a8      	cmp	r0, r5
 800487c:	d05c      	beq.n	8004938 <HAL_GPIO_Init+0x18c>
 800487e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004882:	42a8      	cmp	r0, r5
 8004884:	bf0c      	ite	eq
 8004886:	2502      	moveq	r5, #2
 8004888:	2503      	movne	r5, #3
 800488a:	fa05 f50b 	lsl.w	r5, r5, fp
 800488e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8004892:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8004896:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004898:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800489c:	bf14      	ite	ne
 800489e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80048a0:	43a5      	biceq	r5, r4
 80048a2:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 80048a4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80048a6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80048aa:	bf14      	ite	ne
 80048ac:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80048ae:	43a5      	biceq	r5, r4
 80048b0:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 80048b2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80048b4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80048b8:	bf14      	ite	ne
 80048ba:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80048bc:	43a5      	biceq	r5, r4
 80048be:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80048c0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80048c2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80048c6:	bf14      	ite	ne
 80048c8:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80048ca:	ea25 0404 	biceq.w	r4, r5, r4
 80048ce:	60dc      	str	r4, [r3, #12]
	position++;
 80048d0:	3601      	adds	r6, #1
 80048d2:	e775      	b.n	80047c0 <HAL_GPIO_Init+0x14>
      switch (GPIO_Init->Mode)
 80048d4:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8004950 <HAL_GPIO_Init+0x1a4>
 80048d8:	454d      	cmp	r5, r9
 80048da:	d00a      	beq.n	80048f2 <HAL_GPIO_Init+0x146>
 80048dc:	d815      	bhi.n	800490a <HAL_GPIO_Init+0x15e>
 80048de:	4575      	cmp	r5, lr
 80048e0:	d007      	beq.n	80048f2 <HAL_GPIO_Init+0x146>
 80048e2:	f5a9 3980 	sub.w	r9, r9, #65536	; 0x10000
 80048e6:	454d      	cmp	r5, r9
 80048e8:	d003      	beq.n	80048f2 <HAL_GPIO_Init+0x146>
 80048ea:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 80048ee:	454d      	cmp	r5, r9
 80048f0:	d188      	bne.n	8004804 <HAL_GPIO_Init+0x58>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80048f2:	688a      	ldr	r2, [r1, #8]
 80048f4:	b1e2      	cbz	r2, 8004930 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80048f6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80048f8:	bf08      	it	eq
 80048fa:	f8c0 8010 	streq.w	r8, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80048fe:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8004902:	bf18      	it	ne
 8004904:	f8c0 8014 	strne.w	r8, [r0, #20]
 8004908:	e77c      	b.n	8004804 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800490a:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8004954 <HAL_GPIO_Init+0x1a8>
 800490e:	454d      	cmp	r5, r9
 8004910:	d0ef      	beq.n	80048f2 <HAL_GPIO_Init+0x146>
 8004912:	4565      	cmp	r5, ip
 8004914:	e7ec      	b.n	80048f0 <HAL_GPIO_Init+0x144>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004916:	68ca      	ldr	r2, [r1, #12]
          break;
 8004918:	e774      	b.n	8004804 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800491a:	68ca      	ldr	r2, [r1, #12]
 800491c:	3204      	adds	r2, #4
          break;
 800491e:	e771      	b.n	8004804 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004920:	68ca      	ldr	r2, [r1, #12]
 8004922:	3208      	adds	r2, #8
          break;
 8004924:	e76e      	b.n	8004804 <HAL_GPIO_Init+0x58>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004926:	68ca      	ldr	r2, [r1, #12]
 8004928:	320c      	adds	r2, #12
          break;
 800492a:	e76b      	b.n	8004804 <HAL_GPIO_Init+0x58>
      switch (GPIO_Init->Mode)
 800492c:	2200      	movs	r2, #0
 800492e:	e769      	b.n	8004804 <HAL_GPIO_Init+0x58>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004930:	2204      	movs	r2, #4
 8004932:	e767      	b.n	8004804 <HAL_GPIO_Init+0x58>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004934:	2500      	movs	r5, #0
 8004936:	e7a8      	b.n	800488a <HAL_GPIO_Init+0xde>
 8004938:	2501      	movs	r5, #1
 800493a:	e7a6      	b.n	800488a <HAL_GPIO_Init+0xde>
 800493c:	40021000 	.word	0x40021000
 8004940:	40010400 	.word	0x40010400
 8004944:	10320000 	.word	0x10320000
 8004948:	10120000 	.word	0x10120000
 800494c:	40010800 	.word	0x40010800
 8004950:	10220000 	.word	0x10220000
 8004954:	10310000 	.word	0x10310000

08004958 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004958:	6883      	ldr	r3, [r0, #8]
 800495a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800495c:	bf14      	ite	ne
 800495e:	2001      	movne	r0, #1
 8004960:	2000      	moveq	r0, #0
 8004962:	4770      	bx	lr

08004964 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004964:	b10a      	cbz	r2, 800496a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004966:	6101      	str	r1, [r0, #16]
  }
}
 8004968:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800496a:	0409      	lsls	r1, r1, #16
 800496c:	e7fb      	b.n	8004966 <HAL_GPIO_WritePin+0x2>
	...

08004970 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004970:	4a04      	ldr	r2, [pc, #16]	; (8004984 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004972:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004974:	6951      	ldr	r1, [r2, #20]
 8004976:	4201      	tst	r1, r0
 8004978:	d002      	beq.n	8004980 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800497a:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800497c:	f7ff f866 	bl	8003a4c <HAL_GPIO_EXTI_Callback>
  }
}
 8004980:	bd08      	pop	{r3, pc}
 8004982:	bf00      	nop
 8004984:	40010400 	.word	0x40010400

08004988 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004988:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800498c:	4605      	mov	r5, r0
 800498e:	b338      	cbz	r0, 80049e0 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004990:	6803      	ldr	r3, [r0, #0]
 8004992:	07db      	lsls	r3, r3, #31
 8004994:	d410      	bmi.n	80049b8 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004996:	682b      	ldr	r3, [r5, #0]
 8004998:	079f      	lsls	r7, r3, #30
 800499a:	d45e      	bmi.n	8004a5a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800499c:	682b      	ldr	r3, [r5, #0]
 800499e:	0719      	lsls	r1, r3, #28
 80049a0:	f100 8095 	bmi.w	8004ace <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	075a      	lsls	r2, r3, #29
 80049a8:	f100 80c1 	bmi.w	8004b2e <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ac:	69e8      	ldr	r0, [r5, #28]
 80049ae:	2800      	cmp	r0, #0
 80049b0:	f040 812c 	bne.w	8004c0c <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 80049b4:	2000      	movs	r0, #0
 80049b6:	e029      	b.n	8004a0c <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80049b8:	4c90      	ldr	r4, [pc, #576]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 80049ba:	6863      	ldr	r3, [r4, #4]
 80049bc:	f003 030c 	and.w	r3, r3, #12
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d007      	beq.n	80049d4 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80049c4:	6863      	ldr	r3, [r4, #4]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d10a      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c>
 80049ce:	6863      	ldr	r3, [r4, #4]
 80049d0:	03de      	lsls	r6, r3, #15
 80049d2:	d507      	bpl.n	80049e4 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	6823      	ldr	r3, [r4, #0]
 80049d6:	039c      	lsls	r4, r3, #14
 80049d8:	d5dd      	bpl.n	8004996 <HAL_RCC_OscConfig+0xe>
 80049da:	686b      	ldr	r3, [r5, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1da      	bne.n	8004996 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 80049e0:	2001      	movs	r0, #1
 80049e2:	e013      	b.n	8004a0c <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049e4:	686b      	ldr	r3, [r5, #4]
 80049e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049ea:	d112      	bne.n	8004a12 <HAL_RCC_OscConfig+0x8a>
 80049ec:	6823      	ldr	r3, [r4, #0]
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80049f4:	f7ff fcdc 	bl	80043b0 <HAL_GetTick>
 80049f8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	0398      	lsls	r0, r3, #14
 80049fe:	d4ca      	bmi.n	8004996 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a00:	f7ff fcd6 	bl	80043b0 <HAL_GetTick>
 8004a04:	1b80      	subs	r0, r0, r6
 8004a06:	2864      	cmp	r0, #100	; 0x64
 8004a08:	d9f7      	bls.n	80049fa <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8004a0a:	2003      	movs	r0, #3
}
 8004a0c:	b002      	add	sp, #8
 8004a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a12:	b99b      	cbnz	r3, 8004a3c <HAL_RCC_OscConfig+0xb4>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a22:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004a24:	f7ff fcc4 	bl	80043b0 <HAL_GetTick>
 8004a28:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	0399      	lsls	r1, r3, #14
 8004a2e:	d5b2      	bpl.n	8004996 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a30:	f7ff fcbe 	bl	80043b0 <HAL_GetTick>
 8004a34:	1b80      	subs	r0, r0, r6
 8004a36:	2864      	cmp	r0, #100	; 0x64
 8004a38:	d9f7      	bls.n	8004a2a <HAL_RCC_OscConfig+0xa2>
 8004a3a:	e7e6      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	d103      	bne.n	8004a4c <HAL_RCC_OscConfig+0xc4>
 8004a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a48:	6023      	str	r3, [r4, #0]
 8004a4a:	e7cf      	b.n	80049ec <HAL_RCC_OscConfig+0x64>
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	6023      	str	r3, [r4, #0]
 8004a52:	6823      	ldr	r3, [r4, #0]
 8004a54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a58:	e7cb      	b.n	80049f2 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a5a:	4c68      	ldr	r4, [pc, #416]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 8004a5c:	6863      	ldr	r3, [r4, #4]
 8004a5e:	f013 0f0c 	tst.w	r3, #12
 8004a62:	d007      	beq.n	8004a74 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	f003 030c 	and.w	r3, r3, #12
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d110      	bne.n	8004a90 <HAL_RCC_OscConfig+0x108>
 8004a6e:	6863      	ldr	r3, [r4, #4]
 8004a70:	03da      	lsls	r2, r3, #15
 8004a72:	d40d      	bmi.n	8004a90 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a74:	6823      	ldr	r3, [r4, #0]
 8004a76:	079b      	lsls	r3, r3, #30
 8004a78:	d502      	bpl.n	8004a80 <HAL_RCC_OscConfig+0xf8>
 8004a7a:	692b      	ldr	r3, [r5, #16]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d1af      	bne.n	80049e0 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	696a      	ldr	r2, [r5, #20]
 8004a84:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a88:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004a8c:	6023      	str	r3, [r4, #0]
 8004a8e:	e785      	b.n	800499c <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a90:	692a      	ldr	r2, [r5, #16]
 8004a92:	4b5b      	ldr	r3, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x278>)
 8004a94:	b16a      	cbz	r2, 8004ab2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 8004a96:	2201      	movs	r2, #1
 8004a98:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004a9a:	f7ff fc89 	bl	80043b0 <HAL_GetTick>
 8004a9e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	6823      	ldr	r3, [r4, #0]
 8004aa2:	079f      	lsls	r7, r3, #30
 8004aa4:	d4ec      	bmi.n	8004a80 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004aa6:	f7ff fc83 	bl	80043b0 <HAL_GetTick>
 8004aaa:	1b80      	subs	r0, r0, r6
 8004aac:	2802      	cmp	r0, #2
 8004aae:	d9f7      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x118>
 8004ab0:	e7ab      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8004ab2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004ab4:	f7ff fc7c 	bl	80043b0 <HAL_GetTick>
 8004ab8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	0798      	lsls	r0, r3, #30
 8004abe:	f57f af6d 	bpl.w	800499c <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ac2:	f7ff fc75 	bl	80043b0 <HAL_GetTick>
 8004ac6:	1b80      	subs	r0, r0, r6
 8004ac8:	2802      	cmp	r0, #2
 8004aca:	d9f6      	bls.n	8004aba <HAL_RCC_OscConfig+0x132>
 8004acc:	e79d      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ace:	69aa      	ldr	r2, [r5, #24]
 8004ad0:	4e4a      	ldr	r6, [pc, #296]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 8004ad2:	4b4b      	ldr	r3, [pc, #300]	; (8004c00 <HAL_RCC_OscConfig+0x278>)
 8004ad4:	b1e2      	cbz	r2, 8004b10 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004adc:	f7ff fc68 	bl	80043b0 <HAL_GetTick>
 8004ae0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ae2:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004ae4:	079b      	lsls	r3, r3, #30
 8004ae6:	d50d      	bpl.n	8004b04 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004ae8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004aec:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <HAL_RCC_OscConfig+0x27c>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004af4:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8004af6:	bf00      	nop
  }
  while (Delay --);
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	1e5a      	subs	r2, r3, #1
 8004afc:	9201      	str	r2, [sp, #4]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1f9      	bne.n	8004af6 <HAL_RCC_OscConfig+0x16e>
 8004b02:	e74f      	b.n	80049a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b04:	f7ff fc54 	bl	80043b0 <HAL_GetTick>
 8004b08:	1b00      	subs	r0, r0, r4
 8004b0a:	2802      	cmp	r0, #2
 8004b0c:	d9e9      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x15a>
 8004b0e:	e77c      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8004b10:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
      tickstart = HAL_GetTick();
 8004b14:	f7ff fc4c 	bl	80043b0 <HAL_GetTick>
 8004b18:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004b1c:	079f      	lsls	r7, r3, #30
 8004b1e:	f57f af41 	bpl.w	80049a4 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b22:	f7ff fc45 	bl	80043b0 <HAL_GetTick>
 8004b26:	1b00      	subs	r0, r0, r4
 8004b28:	2802      	cmp	r0, #2
 8004b2a:	d9f6      	bls.n	8004b1a <HAL_RCC_OscConfig+0x192>
 8004b2c:	e76d      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2e:	4c33      	ldr	r4, [pc, #204]	; (8004bfc <HAL_RCC_OscConfig+0x274>)
 8004b30:	69e3      	ldr	r3, [r4, #28]
 8004b32:	00d8      	lsls	r0, r3, #3
 8004b34:	d424      	bmi.n	8004b80 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8004b36:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b38:	69e3      	ldr	r3, [r4, #28]
 8004b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	61e3      	str	r3, [r4, #28]
 8004b40:	69e3      	ldr	r3, [r4, #28]
 8004b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b46:	9300      	str	r3, [sp, #0]
 8004b48:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4a:	4e2f      	ldr	r6, [pc, #188]	; (8004c08 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	05d9      	lsls	r1, r3, #23
 8004b50:	d518      	bpl.n	8004b84 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b52:	68eb      	ldr	r3, [r5, #12]
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d126      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x21e>
 8004b58:	6a23      	ldr	r3, [r4, #32]
 8004b5a:	f043 0301 	orr.w	r3, r3, #1
 8004b5e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004b60:	f7ff fc26 	bl	80043b0 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b64:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004b68:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	6a23      	ldr	r3, [r4, #32]
 8004b6c:	079b      	lsls	r3, r3, #30
 8004b6e:	d53f      	bpl.n	8004bf0 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8004b70:	2f00      	cmp	r7, #0
 8004b72:	f43f af1b 	beq.w	80049ac <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b76:	69e3      	ldr	r3, [r4, #28]
 8004b78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	61e3      	str	r3, [r4, #28]
 8004b7e:	e715      	b.n	80049ac <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8004b80:	2700      	movs	r7, #0
 8004b82:	e7e2      	b.n	8004b4a <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b84:	6833      	ldr	r3, [r6, #0]
 8004b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004b8c:	f7ff fc10 	bl	80043b0 <HAL_GetTick>
 8004b90:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b92:	6833      	ldr	r3, [r6, #0]
 8004b94:	05da      	lsls	r2, r3, #23
 8004b96:	d4dc      	bmi.n	8004b52 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b98:	f7ff fc0a 	bl	80043b0 <HAL_GetTick>
 8004b9c:	eba0 0008 	sub.w	r0, r0, r8
 8004ba0:	2864      	cmp	r0, #100	; 0x64
 8004ba2:	d9f6      	bls.n	8004b92 <HAL_RCC_OscConfig+0x20a>
 8004ba4:	e731      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba6:	b9ab      	cbnz	r3, 8004bd4 <HAL_RCC_OscConfig+0x24c>
 8004ba8:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bae:	f023 0301 	bic.w	r3, r3, #1
 8004bb2:	6223      	str	r3, [r4, #32]
 8004bb4:	6a23      	ldr	r3, [r4, #32]
 8004bb6:	f023 0304 	bic.w	r3, r3, #4
 8004bba:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8004bbc:	f7ff fbf8 	bl	80043b0 <HAL_GetTick>
 8004bc0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bc2:	6a23      	ldr	r3, [r4, #32]
 8004bc4:	0798      	lsls	r0, r3, #30
 8004bc6:	d5d3      	bpl.n	8004b70 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc8:	f7ff fbf2 	bl	80043b0 <HAL_GetTick>
 8004bcc:	1b80      	subs	r0, r0, r6
 8004bce:	4540      	cmp	r0, r8
 8004bd0:	d9f7      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x23a>
 8004bd2:	e71a      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd4:	2b05      	cmp	r3, #5
 8004bd6:	6a23      	ldr	r3, [r4, #32]
 8004bd8:	d103      	bne.n	8004be2 <HAL_RCC_OscConfig+0x25a>
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6223      	str	r3, [r4, #32]
 8004be0:	e7ba      	b.n	8004b58 <HAL_RCC_OscConfig+0x1d0>
 8004be2:	f023 0301 	bic.w	r3, r3, #1
 8004be6:	6223      	str	r3, [r4, #32]
 8004be8:	6a23      	ldr	r3, [r4, #32]
 8004bea:	f023 0304 	bic.w	r3, r3, #4
 8004bee:	e7b6      	b.n	8004b5e <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7ff fbde 	bl	80043b0 <HAL_GetTick>
 8004bf4:	1b80      	subs	r0, r0, r6
 8004bf6:	4540      	cmp	r0, r8
 8004bf8:	d9b7      	bls.n	8004b6a <HAL_RCC_OscConfig+0x1e2>
 8004bfa:	e706      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
 8004bfc:	40021000 	.word	0x40021000
 8004c00:	42420000 	.word	0x42420000
 8004c04:	20000004 	.word	0x20000004
 8004c08:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c0c:	4c2a      	ldr	r4, [pc, #168]	; (8004cb8 <HAL_RCC_OscConfig+0x330>)
 8004c0e:	6863      	ldr	r3, [r4, #4]
 8004c10:	f003 030c 	and.w	r3, r3, #12
 8004c14:	2b08      	cmp	r3, #8
 8004c16:	d03e      	beq.n	8004c96 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c18:	2200      	movs	r2, #0
 8004c1a:	4b28      	ldr	r3, [pc, #160]	; (8004cbc <HAL_RCC_OscConfig+0x334>)
 8004c1c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c1e:	661a      	str	r2, [r3, #96]	; 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c20:	d12c      	bne.n	8004c7c <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8004c22:	f7ff fbc5 	bl	80043b0 <HAL_GetTick>
 8004c26:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c28:	6823      	ldr	r3, [r4, #0]
 8004c2a:	0199      	lsls	r1, r3, #6
 8004c2c:	d420      	bmi.n	8004c70 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c2e:	6a2b      	ldr	r3, [r5, #32]
 8004c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c34:	d105      	bne.n	8004c42 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c36:	6862      	ldr	r2, [r4, #4]
 8004c38:	68a9      	ldr	r1, [r5, #8]
 8004c3a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c42:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8004c44:	6862      	ldr	r2, [r4, #4]
 8004c46:	430b      	orrs	r3, r1
 8004c48:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004c4c:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8004c4e:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c50:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8004c52:	4b1a      	ldr	r3, [pc, #104]	; (8004cbc <HAL_RCC_OscConfig+0x334>)
 8004c54:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004c56:	f7ff fbab 	bl	80043b0 <HAL_GetTick>
 8004c5a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	019a      	lsls	r2, r3, #6
 8004c60:	f53f aea8 	bmi.w	80049b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c64:	f7ff fba4 	bl	80043b0 <HAL_GetTick>
 8004c68:	1b40      	subs	r0, r0, r5
 8004c6a:	2802      	cmp	r0, #2
 8004c6c:	d9f6      	bls.n	8004c5c <HAL_RCC_OscConfig+0x2d4>
 8004c6e:	e6cc      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7ff fb9e 	bl	80043b0 <HAL_GetTick>
 8004c74:	1b80      	subs	r0, r0, r6
 8004c76:	2802      	cmp	r0, #2
 8004c78:	d9d6      	bls.n	8004c28 <HAL_RCC_OscConfig+0x2a0>
 8004c7a:	e6c6      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8004c7c:	f7ff fb98 	bl	80043b0 <HAL_GetTick>
 8004c80:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c82:	6823      	ldr	r3, [r4, #0]
 8004c84:	019b      	lsls	r3, r3, #6
 8004c86:	f57f ae95 	bpl.w	80049b4 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c8a:	f7ff fb91 	bl	80043b0 <HAL_GetTick>
 8004c8e:	1b40      	subs	r0, r0, r5
 8004c90:	2802      	cmp	r0, #2
 8004c92:	d9f6      	bls.n	8004c82 <HAL_RCC_OscConfig+0x2fa>
 8004c94:	e6b9      	b.n	8004a0a <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c96:	2801      	cmp	r0, #1
 8004c98:	f43f aeb8 	beq.w	8004a0c <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 8004c9c:	6863      	ldr	r3, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c9e:	6a2a      	ldr	r2, [r5, #32]
 8004ca0:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8004ca4:	4291      	cmp	r1, r2
 8004ca6:	f47f ae9b 	bne.w	80049e0 <HAL_RCC_OscConfig+0x58>
 8004caa:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	f43f ae7f 	beq.w	80049b4 <HAL_RCC_OscConfig+0x2c>
 8004cb6:	e693      	b.n	80049e0 <HAL_RCC_OscConfig+0x58>
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	42420000 	.word	0x42420000

08004cc0 <HAL_RCC_GetSysClockFreq>:
{
 8004cc0:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8004cc4:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004cc6:	ac02      	add	r4, sp, #8
 8004cc8:	f103 0510 	add.w	r5, r3, #16
 8004ccc:	4622      	mov	r2, r4
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	c203      	stmia	r2!, {r0, r1}
 8004cd6:	42ab      	cmp	r3, r5
 8004cd8:	4614      	mov	r4, r2
 8004cda:	d1f7      	bne.n	8004ccc <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004cdc:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8004ce0:	4911      	ldr	r1, [pc, #68]	; (8004d28 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ce2:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8004ce6:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8004ce8:	f003 020c 	and.w	r2, r3, #12
 8004cec:	2a08      	cmp	r2, #8
 8004cee:	d117      	bne.n	8004d20 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cf0:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8004cf4:	3218      	adds	r2, #24
 8004cf6:	446a      	add	r2, sp
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cf8:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cfa:	f812 0c10 	ldrb.w	r0, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cfe:	d50c      	bpl.n	8004d1a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d00:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d04:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d08:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d0a:	3318      	adds	r3, #24
 8004d0c:	446b      	add	r3, sp
 8004d0e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d12:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004d16:	b007      	add	sp, #28
 8004d18:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d1a:	4b05      	ldr	r3, [pc, #20]	; (8004d30 <HAL_RCC_GetSysClockFreq+0x70>)
 8004d1c:	4358      	muls	r0, r3
 8004d1e:	e7fa      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8004d20:	4802      	ldr	r0, [pc, #8]	; (8004d2c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8004d22:	e7f8      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0x56>
 8004d24:	08006f33 	.word	0x08006f33
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	007a1200 	.word	0x007a1200
 8004d30:	003d0900 	.word	0x003d0900

08004d34 <HAL_RCC_ClockConfig>:
{
 8004d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d38:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	b910      	cbnz	r0, 8004d44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8004d3e:	2001      	movs	r0, #1
}
 8004d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d44:	4a44      	ldr	r2, [pc, #272]	; (8004e58 <HAL_RCC_ClockConfig+0x124>)
 8004d46:	6813      	ldr	r3, [r2, #0]
 8004d48:	f003 0307 	and.w	r3, r3, #7
 8004d4c:	428b      	cmp	r3, r1
 8004d4e:	d328      	bcc.n	8004da2 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d50:	6821      	ldr	r1, [r4, #0]
 8004d52:	078e      	lsls	r6, r1, #30
 8004d54:	d430      	bmi.n	8004db8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d56:	07ca      	lsls	r2, r1, #31
 8004d58:	d443      	bmi.n	8004de2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d5a:	4a3f      	ldr	r2, [pc, #252]	; (8004e58 <HAL_RCC_ClockConfig+0x124>)
 8004d5c:	6813      	ldr	r3, [r2, #0]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	42ab      	cmp	r3, r5
 8004d64:	d865      	bhi.n	8004e32 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	4d3c      	ldr	r5, [pc, #240]	; (8004e5c <HAL_RCC_ClockConfig+0x128>)
 8004d6a:	f012 0f04 	tst.w	r2, #4
 8004d6e:	d16c      	bne.n	8004e4a <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d70:	0713      	lsls	r3, r2, #28
 8004d72:	d506      	bpl.n	8004d82 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004d74:	686b      	ldr	r3, [r5, #4]
 8004d76:	6922      	ldr	r2, [r4, #16]
 8004d78:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8004d7c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004d80:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d82:	f7ff ff9d 	bl	8004cc0 <HAL_RCC_GetSysClockFreq>
 8004d86:	686b      	ldr	r3, [r5, #4]
 8004d88:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <HAL_RCC_ClockConfig+0x12c>)
 8004d8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8004d8e:	5cd3      	ldrb	r3, [r2, r3]
 8004d90:	40d8      	lsrs	r0, r3
 8004d92:	4b34      	ldr	r3, [pc, #208]	; (8004e64 <HAL_RCC_ClockConfig+0x130>)
 8004d94:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8004d96:	4b34      	ldr	r3, [pc, #208]	; (8004e68 <HAL_RCC_ClockConfig+0x134>)
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	f7ff fac7 	bl	800432c <HAL_InitTick>
  return HAL_OK;
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e7ce      	b.n	8004d40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	f023 0307 	bic.w	r3, r3, #7
 8004da8:	430b      	orrs	r3, r1
 8004daa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dac:	6813      	ldr	r3, [r2, #0]
 8004dae:	f003 0307 	and.w	r3, r3, #7
 8004db2:	428b      	cmp	r3, r1
 8004db4:	d1c3      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xa>
 8004db6:	e7cb      	b.n	8004d50 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004db8:	4b28      	ldr	r3, [pc, #160]	; (8004e5c <HAL_RCC_ClockConfig+0x128>)
 8004dba:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dbe:	bf1e      	ittt	ne
 8004dc0:	685a      	ldrne	r2, [r3, #4]
 8004dc2:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8004dc6:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dc8:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dca:	bf42      	ittt	mi
 8004dcc:	685a      	ldrmi	r2, [r3, #4]
 8004dce:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8004dd2:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	68a0      	ldr	r0, [r4, #8]
 8004dd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004ddc:	4302      	orrs	r2, r0
 8004dde:	605a      	str	r2, [r3, #4]
 8004de0:	e7b9      	b.n	8004d56 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	4e1d      	ldr	r6, [pc, #116]	; (8004e5c <HAL_RCC_ClockConfig+0x128>)
 8004de6:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de8:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dea:	d11a      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dec:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df0:	d0a5      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df2:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004df8:	f023 0303 	bic.w	r3, r3, #3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004e00:	f7ff fad6 	bl	80043b0 <HAL_GetTick>
 8004e04:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e06:	6873      	ldr	r3, [r6, #4]
 8004e08:	6862      	ldr	r2, [r4, #4]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004e12:	d0a2      	beq.n	8004d5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e14:	f7ff facc 	bl	80043b0 <HAL_GetTick>
 8004e18:	1bc0      	subs	r0, r0, r7
 8004e1a:	4540      	cmp	r0, r8
 8004e1c:	d9f3      	bls.n	8004e06 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8004e1e:	2003      	movs	r0, #3
 8004e20:	e78e      	b.n	8004d40 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e22:	2a02      	cmp	r2, #2
 8004e24:	d102      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e26:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8004e2a:	e7e1      	b.n	8004df0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e2c:	f013 0f02 	tst.w	r3, #2
 8004e30:	e7de      	b.n	8004df0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e32:	6813      	ldr	r3, [r2, #0]
 8004e34:	f023 0307 	bic.w	r3, r3, #7
 8004e38:	432b      	orrs	r3, r5
 8004e3a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	42ab      	cmp	r3, r5
 8004e44:	f47f af7b 	bne.w	8004d3e <HAL_RCC_ClockConfig+0xa>
 8004e48:	e78d      	b.n	8004d66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e4a:	686b      	ldr	r3, [r5, #4]
 8004e4c:	68e1      	ldr	r1, [r4, #12]
 8004e4e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004e52:	430b      	orrs	r3, r1
 8004e54:	606b      	str	r3, [r5, #4]
 8004e56:	e78b      	b.n	8004d70 <HAL_RCC_ClockConfig+0x3c>
 8004e58:	40022000 	.word	0x40022000
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	08006df0 	.word	0x08006df0
 8004e64:	20000004 	.word	0x20000004
 8004e68:	2000000c 	.word	0x2000000c

08004e6c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e6c:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <HAL_RCC_GetPCLK1Freq+0x14>)
 8004e6e:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <HAL_RCC_GetPCLK1Freq+0x18>)
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8004e76:	5cd3      	ldrb	r3, [r2, r3]
 8004e78:	4a03      	ldr	r2, [pc, #12]	; (8004e88 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004e7a:	6810      	ldr	r0, [r2, #0]
}
 8004e7c:	40d8      	lsrs	r0, r3
 8004e7e:	4770      	bx	lr
 8004e80:	40021000 	.word	0x40021000
 8004e84:	08006e00 	.word	0x08006e00
 8004e88:	20000004 	.word	0x20000004

08004e8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e8c:	6a03      	ldr	r3, [r0, #32]
{
 8004e8e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e90:	f023 0301 	bic.w	r3, r3, #1
 8004e94:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e98:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e9a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e9e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004ea2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ea4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004ea6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004eaa:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004eac:	4d0a      	ldr	r5, [pc, #40]	; (8004ed8 <TIM_OC1_SetConfig+0x4c>)
 8004eae:	42a8      	cmp	r0, r5
 8004eb0:	d10b      	bne.n	8004eca <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004eb2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004eb4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004eb8:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004eba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ebe:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004ec2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ec4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ec8:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eca:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ecc:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ece:	684a      	ldr	r2, [r1, #4]
 8004ed0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed2:	6203      	str	r3, [r0, #32]
}
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	bf00      	nop
 8004ed8:	40012c00 	.word	0x40012c00

08004edc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004edc:	6a03      	ldr	r3, [r0, #32]
{
 8004ede:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ee4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ee6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eee:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004ef2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ef4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004ef6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004efa:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004efe:	4d0b      	ldr	r5, [pc, #44]	; (8004f2c <TIM_OC3_SetConfig+0x50>)
 8004f00:	42a8      	cmp	r0, r5
 8004f02:	d10d      	bne.n	8004f20 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f04:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f0e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f12:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 8004f16:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f1c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f22:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f24:	684a      	ldr	r2, [r1, #4]
 8004f26:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f28:	6203      	str	r3, [r0, #32]
}
 8004f2a:	bd70      	pop	{r4, r5, r6, pc}
 8004f2c:	40012c00 	.word	0x40012c00

08004f30 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f30:	6a03      	ldr	r3, [r0, #32]
{
 8004f32:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f38:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f3c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f3e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f40:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f42:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f46:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f4a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004f4c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f50:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f54:	4d06      	ldr	r5, [pc, #24]	; (8004f70 <TIM_OC4_SetConfig+0x40>)
 8004f56:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f58:	bf02      	ittt	eq
 8004f5a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f5c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f60:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f64:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f66:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f68:	684a      	ldr	r2, [r1, #4]
 8004f6a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6c:	6203      	str	r3, [r0, #32]
}
 8004f6e:	bd30      	pop	{r4, r5, pc}
 8004f70:	40012c00 	.word	0x40012c00

08004f74 <HAL_TIM_PWM_MspInit>:
 8004f74:	4770      	bx	lr
	...

08004f78 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f78:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <TIM_Base_SetConfig+0x5c>)
{
 8004f7a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f7c:	4290      	cmp	r0, r2
  tmpcr1 = TIMx->CR1;
 8004f7e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f80:	d005      	beq.n	8004f8e <TIM_Base_SetConfig+0x16>
 8004f82:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004f86:	d002      	beq.n	8004f8e <TIM_Base_SetConfig+0x16>
 8004f88:	4c13      	ldr	r4, [pc, #76]	; (8004fd8 <TIM_Base_SetConfig+0x60>)
 8004f8a:	42a0      	cmp	r0, r4
 8004f8c:	d110      	bne.n	8004fb0 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= Structure->CounterMode;
 8004f8e:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f94:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8004f96:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9a:	d005      	beq.n	8004fa8 <TIM_Base_SetConfig+0x30>
 8004f9c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004fa0:	d002      	beq.n	8004fa8 <TIM_Base_SetConfig+0x30>
 8004fa2:	4a0d      	ldr	r2, [pc, #52]	; (8004fd8 <TIM_Base_SetConfig+0x60>)
 8004fa4:	4290      	cmp	r0, r2
 8004fa6:	d103      	bne.n	8004fb0 <TIM_Base_SetConfig+0x38>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fa8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fae:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fb0:	694a      	ldr	r2, [r1, #20]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8004fb8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fba:	688b      	ldr	r3, [r1, #8]
 8004fbc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004fbe:	680b      	ldr	r3, [r1, #0]
 8004fc0:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc2:	4b04      	ldr	r3, [pc, #16]	; (8004fd4 <TIM_Base_SetConfig+0x5c>)
 8004fc4:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8004fc6:	bf04      	itt	eq
 8004fc8:	690b      	ldreq	r3, [r1, #16]
 8004fca:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	6143      	str	r3, [r0, #20]
}
 8004fd0:	bd10      	pop	{r4, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40012c00 	.word	0x40012c00
 8004fd8:	40000400 	.word	0x40000400

08004fdc <HAL_TIM_Base_Init>:
{
 8004fdc:	b510      	push	{r4, lr}
  if (htim == NULL)
 8004fde:	4604      	mov	r4, r0
 8004fe0:	b330      	cbz	r0, 8005030 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004fe6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004fea:	b91b      	cbnz	r3, 8004ff4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8004fec:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004ff0:	f7fe fb1a 	bl	8003628 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff6:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	1d21      	adds	r1, r4, #4
 8004ffe:	f7ff ffbb 	bl	8004f78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005002:	2301      	movs	r3, #1
  return HAL_OK;
 8005004:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005006:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800500e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005012:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005016:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800501a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800501e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005022:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005026:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800502a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800502e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005030:	2001      	movs	r0, #1
 8005032:	e7fc      	b.n	800502e <HAL_TIM_Base_Init+0x52>

08005034 <HAL_TIM_PWM_Init>:
{
 8005034:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005036:	4604      	mov	r4, r0
 8005038:	b330      	cbz	r0, 8005088 <HAL_TIM_PWM_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800503e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005042:	b91b      	cbnz	r3, 800504c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005044:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005048:	f7ff ff94 	bl	8004f74 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800504e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005054:	1d21      	adds	r1, r4, #4
 8005056:	f7ff ff8f 	bl	8004f78 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505a:	2301      	movs	r3, #1
  return HAL_OK;
 800505c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800505e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005062:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005066:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800506a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800506e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005072:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005076:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800507a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800507e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005082:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005088:	2001      	movs	r0, #1
 800508a:	e7fc      	b.n	8005086 <HAL_TIM_PWM_Init+0x52>

0800508c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800508c:	6a03      	ldr	r3, [r0, #32]
{
 800508e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005090:	f023 0310 	bic.w	r3, r3, #16
 8005094:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005096:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8005098:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800509a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800509c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800509e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050a6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80050a8:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050b0:	4d0b      	ldr	r5, [pc, #44]	; (80050e0 <TIM_OC2_SetConfig+0x54>)
 80050b2:	42a8      	cmp	r0, r5
 80050b4:	d10d      	bne.n	80050d2 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050b6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80050b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050bc:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050c0:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c4:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80050c8:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80050ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050ce:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80050d2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80050d4:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80050d6:	684a      	ldr	r2, [r1, #4]
 80050d8:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80050da:	6203      	str	r3, [r0, #32]
}
 80050dc:	bd70      	pop	{r4, r5, r6, pc}
 80050de:	bf00      	nop
 80050e0:	40012c00 	.word	0x40012c00

080050e4 <HAL_TIM_PWM_ConfigChannel>:
{
 80050e4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80050e6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80050ea:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d052      	beq.n	8005196 <HAL_TIM_PWM_ConfigChannel+0xb2>
 80050f0:	2301      	movs	r3, #1
  switch (Channel)
 80050f2:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80050f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80050f8:	d03c      	beq.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x90>
 80050fa:	d806      	bhi.n	800510a <HAL_TIM_PWM_ConfigChannel+0x26>
 80050fc:	b1c2      	cbz	r2, 8005130 <HAL_TIM_PWM_ConfigChannel+0x4c>
 80050fe:	2a04      	cmp	r2, #4
 8005100:	d027      	beq.n	8005152 <HAL_TIM_PWM_ConfigChannel+0x6e>
  __HAL_UNLOCK(htim);
 8005102:	2000      	movs	r0, #0
 8005104:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005108:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 800510a:	2a0c      	cmp	r2, #12
 800510c:	d1f9      	bne.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800510e:	6800      	ldr	r0, [r0, #0]
 8005110:	f7ff ff0e 	bl	8004f30 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005114:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005116:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005118:	69da      	ldr	r2, [r3, #28]
 800511a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800511e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005126:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005128:	69da      	ldr	r2, [r3, #28]
 800512a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800512e:	e030      	b.n	8005192 <HAL_TIM_PWM_ConfigChannel+0xae>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005130:	6800      	ldr	r0, [r0, #0]
 8005132:	f7ff feab 	bl	8004e8c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005136:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005138:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	f022 0204 	bic.w	r2, r2, #4
 8005148:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800514a:	699a      	ldr	r2, [r3, #24]
 800514c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800514e:	619a      	str	r2, [r3, #24]
      break;
 8005150:	e7d7      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x1e>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005152:	6800      	ldr	r0, [r0, #0]
 8005154:	f7ff ff9a 	bl	800508c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005158:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800515a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005164:	699a      	ldr	r2, [r3, #24]
 8005166:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800516c:	699a      	ldr	r2, [r3, #24]
 800516e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005172:	e7ec      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x6a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005174:	6800      	ldr	r0, [r0, #0]
 8005176:	f7ff feb1 	bl	8004edc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800517a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800517c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800517e:	69da      	ldr	r2, [r3, #28]
 8005180:	f042 0208 	orr.w	r2, r2, #8
 8005184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	f022 0204 	bic.w	r2, r2, #4
 800518c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800518e:	69da      	ldr	r2, [r3, #28]
 8005190:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	61da      	str	r2, [r3, #28]
      break;
 8005194:	e7b5      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x1e>
  __HAL_LOCK(htim);
 8005196:	2002      	movs	r0, #2
 8005198:	e7b6      	b.n	8005108 <HAL_TIM_PWM_ConfigChannel+0x24>

0800519a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800519a:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800519c:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800519e:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051a0:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a4:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 80051a8:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051aa:	6082      	str	r2, [r0, #8]
}
 80051ac:	bd10      	pop	{r4, pc}

080051ae <HAL_TIM_ConfigClockSource>:
{
 80051ae:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80051b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80051b4:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	f04f 0002 	mov.w	r0, #2
 80051bc:	d027      	beq.n	800520e <HAL_TIM_ConfigClockSource+0x60>
 80051be:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80051c4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80051c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80051ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051d0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80051d4:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80051d6:	680b      	ldr	r3, [r1, #0]
 80051d8:	2b60      	cmp	r3, #96	; 0x60
 80051da:	d04d      	beq.n	8005278 <HAL_TIM_ConfigClockSource+0xca>
 80051dc:	d832      	bhi.n	8005244 <HAL_TIM_ConfigClockSource+0x96>
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d062      	beq.n	80052a8 <HAL_TIM_ConfigClockSource+0xfa>
 80051e2:	d815      	bhi.n	8005210 <HAL_TIM_ConfigClockSource+0x62>
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d003      	beq.n	80051f0 <HAL_TIM_ConfigClockSource+0x42>
 80051e8:	d809      	bhi.n	80051fe <HAL_TIM_ConfigClockSource+0x50>
 80051ea:	f033 0210 	bics.w	r2, r3, #16
 80051ee:	d108      	bne.n	8005202 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 80051f0:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051f6:	4313      	orrs	r3, r2
 80051f8:	f043 0307 	orr.w	r3, r3, #7
 80051fc:	e020      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80051fe:	2b30      	cmp	r3, #48	; 0x30
 8005200:	d0f6      	beq.n	80051f0 <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8005202:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005204:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005206:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800520a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800520e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8005210:	2b50      	cmp	r3, #80	; 0x50
 8005212:	d1f6      	bne.n	8005202 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005214:	684a      	ldr	r2, [r1, #4]
 8005216:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8005218:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800521a:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800521c:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005220:	f025 0501 	bic.w	r5, r5, #1
 8005224:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005226:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8005228:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800522a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800522e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8005232:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8005234:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8005236:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800523c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 8005240:	6083      	str	r3, [r0, #8]
}
 8005242:	e7de      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 8005244:	2b70      	cmp	r3, #112	; 0x70
 8005246:	d00c      	beq.n	8005262 <HAL_TIM_ConfigClockSource+0xb4>
 8005248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800524c:	d1d9      	bne.n	8005202 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 800524e:	68cb      	ldr	r3, [r1, #12]
 8005250:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005254:	f7ff ffa1 	bl	800519a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005258:	6822      	ldr	r2, [r4, #0]
 800525a:	6893      	ldr	r3, [r2, #8]
 800525c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005260:	e008      	b.n	8005274 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 8005262:	68cb      	ldr	r3, [r1, #12]
 8005264:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8005268:	f7ff ff97 	bl	800519a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005270:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005274:	6093      	str	r3, [r2, #8]
      break;
 8005276:	e7c4      	b.n	8005202 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005278:	684d      	ldr	r5, [r1, #4]
 800527a:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527c:	6a01      	ldr	r1, [r0, #32]
 800527e:	f021 0110 	bic.w	r1, r1, #16
 8005282:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005284:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8005286:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005288:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800528c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005290:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005294:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005298:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800529a:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800529c:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800529e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052a2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80052a6:	e7cb      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a8:	684a      	ldr	r2, [r1, #4]
 80052aa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80052ac:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ae:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052b0:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b4:	f025 0501 	bic.w	r5, r5, #1
 80052b8:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052ba:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80052bc:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052c2:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80052c6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80052c8:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80052ca:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80052cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052d0:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80052d4:	e7b4      	b.n	8005240 <HAL_TIM_ConfigClockSource+0x92>

080052d6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80052d6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052d8:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80052da:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80052dc:	f001 011f 	and.w	r1, r1, #31
 80052e0:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80052e2:	ea23 0304 	bic.w	r3, r3, r4
 80052e6:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80052e8:	6a03      	ldr	r3, [r0, #32]
 80052ea:	408a      	lsls	r2, r1
 80052ec:	431a      	orrs	r2, r3
 80052ee:	6202      	str	r2, [r0, #32]
}
 80052f0:	bd10      	pop	{r4, pc}
	...

080052f4 <HAL_TIM_OC_Start>:
{
 80052f4:	b510      	push	{r4, lr}
 80052f6:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80052f8:	b929      	cbnz	r1, 8005306 <HAL_TIM_OC_Start+0x12>
 80052fa:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d021      	beq.n	8005346 <HAL_TIM_OC_Start+0x52>
    return HAL_ERROR;
 8005302:	2001      	movs	r0, #1
}
 8005304:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005306:	2904      	cmp	r1, #4
 8005308:	d107      	bne.n	800531a <HAL_TIM_OC_Start+0x26>
 800530a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800530e:	2b01      	cmp	r3, #1
 8005310:	d1f7      	bne.n	8005302 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	2302      	movs	r3, #2
 8005314:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005318:	e018      	b.n	800534c <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	2908      	cmp	r1, #8
 800531c:	d107      	bne.n	800532e <HAL_TIM_OC_Start+0x3a>
 800531e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8005322:	2b01      	cmp	r3, #1
 8005324:	d1ed      	bne.n	8005302 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005326:	2302      	movs	r3, #2
 8005328:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800532c:	e00e      	b.n	800534c <HAL_TIM_OC_Start+0x58>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800532e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8005332:	2b01      	cmp	r3, #1
 8005334:	d1e5      	bne.n	8005302 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005336:	2904      	cmp	r1, #4
 8005338:	d0eb      	beq.n	8005312 <HAL_TIM_OC_Start+0x1e>
 800533a:	2908      	cmp	r1, #8
 800533c:	d0f3      	beq.n	8005326 <HAL_TIM_OC_Start+0x32>
 800533e:	2302      	movs	r3, #2
 8005340:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8005344:	e002      	b.n	800534c <HAL_TIM_OC_Start+0x58>
 8005346:	2302      	movs	r3, #2
 8005348:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800534c:	2201      	movs	r2, #1
 800534e:	6820      	ldr	r0, [r4, #0]
 8005350:	f7ff ffc1 	bl	80052d6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	4a0c      	ldr	r2, [pc, #48]	; (8005388 <HAL_TIM_OC_Start+0x94>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10a      	bne.n	8005372 <HAL_TIM_OC_Start+0x7e>
    __HAL_TIM_MOE_ENABLE(htim);
 800535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800535e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005362:	645a      	str	r2, [r3, #68]	; 0x44
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005364:	689a      	ldr	r2, [r3, #8]
 8005366:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800536a:	2a06      	cmp	r2, #6
 800536c:	d107      	bne.n	800537e <HAL_TIM_OC_Start+0x8a>
  return HAL_OK;
 800536e:	2000      	movs	r0, #0
 8005370:	e7c8      	b.n	8005304 <HAL_TIM_OC_Start+0x10>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005376:	d0f5      	beq.n	8005364 <HAL_TIM_OC_Start+0x70>
 8005378:	4a04      	ldr	r2, [pc, #16]	; (800538c <HAL_TIM_OC_Start+0x98>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d0f2      	beq.n	8005364 <HAL_TIM_OC_Start+0x70>
    __HAL_TIM_ENABLE(htim);
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	f042 0201 	orr.w	r2, r2, #1
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	e7f2      	b.n	800536e <HAL_TIM_OC_Start+0x7a>
 8005388:	40012c00 	.word	0x40012c00
 800538c:	40000400 	.word	0x40000400

08005390 <HAL_TIM_PWM_Start>:
 8005390:	f7ff bfb0 	b.w	80052f4 <HAL_TIM_OC_Start>

08005394 <HAL_TIM_OC_Stop>:
{
 8005394:	b538      	push	{r3, r4, r5, lr}
 8005396:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005398:	2200      	movs	r2, #0
 800539a:	6800      	ldr	r0, [r0, #0]
{
 800539c:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800539e:	f7ff ff9a 	bl	80052d6 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <HAL_TIM_OC_Stop+0x74>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d10d      	bne.n	80053c6 <HAL_TIM_OC_Stop+0x32>
    __HAL_TIM_MOE_DISABLE(htim);
 80053aa:	f241 1211 	movw	r2, #4369	; 0x1111
 80053ae:	6a19      	ldr	r1, [r3, #32]
 80053b0:	4211      	tst	r1, r2
 80053b2:	d108      	bne.n	80053c6 <HAL_TIM_OC_Stop+0x32>
 80053b4:	f240 4244 	movw	r2, #1092	; 0x444
 80053b8:	6a19      	ldr	r1, [r3, #32]
 80053ba:	4211      	tst	r1, r2
 80053bc:	bf02      	ittt	eq
 80053be:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 80053c0:	f422 4200 	biceq.w	r2, r2, #32768	; 0x8000
 80053c4:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 80053c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80053ca:	6a19      	ldr	r1, [r3, #32]
 80053cc:	4211      	tst	r1, r2
 80053ce:	d108      	bne.n	80053e2 <HAL_TIM_OC_Stop+0x4e>
 80053d0:	f240 4244 	movw	r2, #1092	; 0x444
 80053d4:	6a19      	ldr	r1, [r3, #32]
 80053d6:	4211      	tst	r1, r2
 80053d8:	bf02      	ittt	eq
 80053da:	681a      	ldreq	r2, [r3, #0]
 80053dc:	f022 0201 	biceq.w	r2, r2, #1
 80053e0:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053e2:	2301      	movs	r3, #1
 80053e4:	b91d      	cbnz	r5, 80053ee <HAL_TIM_OC_Stop+0x5a>
 80053e6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80053ea:	2000      	movs	r0, #0
 80053ec:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80053ee:	2d04      	cmp	r5, #4
 80053f0:	d102      	bne.n	80053f8 <HAL_TIM_OC_Stop+0x64>
 80053f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80053f6:	e7f8      	b.n	80053ea <HAL_TIM_OC_Stop+0x56>
 80053f8:	2d08      	cmp	r5, #8
 80053fa:	bf0c      	ite	eq
 80053fc:	f884 3040 	strbeq.w	r3, [r4, #64]	; 0x40
 8005400:	f884 3041 	strbne.w	r3, [r4, #65]	; 0x41
 8005404:	e7f1      	b.n	80053ea <HAL_TIM_OC_Stop+0x56>
 8005406:	bf00      	nop
 8005408:	40012c00 	.word	0x40012c00

0800540c <HAL_TIM_PWM_Stop>:
 800540c:	f7ff bfc2 	b.w	8005394 <HAL_TIM_OC_Stop>

08005410 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005410:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005412:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
{
 8005416:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005418:	2a01      	cmp	r2, #1
 800541a:	f04f 0002 	mov.w	r0, #2
 800541e:	d01e      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005420:	681a      	ldr	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005422:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005426:	6854      	ldr	r4, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005428:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800542a:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800542e:	432c      	orrs	r4, r5
  tmpsmcr = htim->Instance->SMCR;
 8005430:	6890      	ldr	r0, [r2, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005432:	6054      	str	r4, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005434:	4c0a      	ldr	r4, [pc, #40]	; (8005460 <HAL_TIMEx_MasterConfigSynchronization+0x50>)
 8005436:	42a2      	cmp	r2, r4
 8005438:	d006      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 800543a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800543e:	d003      	beq.n	8005448 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8005440:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8005444:	42a2      	cmp	r2, r4
 8005446:	d104      	bne.n	8005452 <HAL_TIMEx_MasterConfigSynchronization+0x42>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005448:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800544a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800544e:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005450:	6091      	str	r1, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005452:	2201      	movs	r2, #1

  __HAL_UNLOCK(htim);
 8005454:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800545a:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c

  return HAL_OK;
}
 800545e:	bd30      	pop	{r4, r5, pc}
 8005460:	40012c00 	.word	0x40012c00

08005464 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005464:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005468:	2b01      	cmp	r3, #1
 800546a:	d01f      	beq.n	80054ac <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800546c:	68cb      	ldr	r3, [r1, #12]
 800546e:	688a      	ldr	r2, [r1, #8]
 8005470:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005474:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005476:	684a      	ldr	r2, [r1, #4]
 8005478:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800547c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800547e:	680a      	ldr	r2, [r1, #0]
 8005480:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005484:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005486:	690a      	ldr	r2, [r1, #16]
 8005488:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548c:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800548e:	694a      	ldr	r2, [r1, #20]
 8005490:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005494:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005496:	69ca      	ldr	r2, [r1, #28]
 8005498:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549c:	4313      	orrs	r3, r2


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800549e:	6802      	ldr	r2, [r0, #0]
 80054a0:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80054a2:	2300      	movs	r3, #0
 80054a4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80054a8:	4618      	mov	r0, r3
 80054aa:	4770      	bx	lr
  __HAL_LOCK(htim);
 80054ac:	2002      	movs	r0, #2
}
 80054ae:	4770      	bx	lr

080054b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 80054b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80054b2:	2400      	movs	r4, #0
 80054b4:	2310      	movs	r3, #16
 80054b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80054ba:	6803      	ldr	r3, [r0, #0]
 80054bc:	4615      	mov	r5, r2
 80054be:	699e      	ldr	r6, [r3, #24]
 80054c0:	e9cd 4400 	strd	r4, r4, [sp]
 80054c4:	466b      	mov	r3, sp
 80054c6:	6812      	ldr	r2, [r2, #0]
 80054c8:	47b0      	blx	r6
 80054ca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80054ce:	f003 0306 	and.w	r3, r3, #6
 80054d2:	2b06      	cmp	r3, #6
 80054d4:	bf09      	itett	eq
 80054d6:	2001      	moveq	r0, #1
 80054d8:	4620      	movne	r0, r4
 80054da:	9b00      	ldreq	r3, [sp, #0]
 80054dc:	602b      	streq	r3, [r5, #0]
 80054de:	b004      	add	sp, #16
 80054e0:	bd70      	pop	{r4, r5, r6, pc}

080054e2 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80054e2:	9800      	ldr	r0, [sp, #0]
 80054e4:	4290      	cmp	r0, r2
 80054e6:	bf14      	ite	ne
 80054e8:	2001      	movne	r0, #1
 80054ea:	2006      	moveq	r0, #6
 80054ec:	4770      	bx	lr
	...

080054f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	4604      	mov	r4, r0
 80054f4:	4b02      	ldr	r3, [pc, #8]	; (8005500 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
 80054f6:	6003      	str	r3, [r0, #0]
 80054f8:	f000 fd3b 	bl	8005f72 <_ZNSt9type_infoD1Ev>
 80054fc:	4620      	mov	r0, r4
 80054fe:	bd10      	pop	{r4, pc}
 8005500:	08006f7c 	.word	0x08006f7c

08005504 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8005504:	b510      	push	{r4, lr}
 8005506:	4604      	mov	r4, r0
 8005508:	f7ff fff2 	bl	80054f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 800550c:	4620      	mov	r0, r4
 800550e:	2108      	movs	r1, #8
 8005510:	f000 f842 	bl	8005598 <_ZdlPvj>
 8005514:	4620      	mov	r0, r4
 8005516:	bd10      	pop	{r4, pc}

08005518 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8005518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800551c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005520:	461f      	mov	r7, r3
 8005522:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 8005526:	4598      	cmp	r8, r3
 8005528:	4606      	mov	r6, r0
 800552a:	4615      	mov	r5, r2
 800552c:	d107      	bne.n	800553e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 800552e:	9907      	ldr	r1, [sp, #28]
 8005530:	f000 fd22 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005534:	b118      	cbz	r0, 800553e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
 8005536:	7165      	strb	r5, [r4, #5]
 8005538:	2000      	movs	r0, #0
 800553a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800553e:	4639      	mov	r1, r7
 8005540:	4630      	mov	r0, r6
 8005542:	f000 fd19 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005546:	2800      	cmp	r0, #0
 8005548:	d0f6      	beq.n	8005538 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
 800554a:	2301      	movs	r3, #1
 800554c:	f8c4 8000 	str.w	r8, [r4]
 8005550:	7125      	strb	r5, [r4, #4]
 8005552:	71a3      	strb	r3, [r4, #6]
 8005554:	e7f0      	b.n	8005538 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

08005556 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8005556:	b538      	push	{r3, r4, r5, lr}
 8005558:	4615      	mov	r5, r2
 800555a:	461c      	mov	r4, r3
 800555c:	f000 fd0c 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005560:	b120      	cbz	r0, 800556c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
 8005562:	2308      	movs	r3, #8
 8005564:	60e3      	str	r3, [r4, #12]
 8005566:	2306      	movs	r3, #6
 8005568:	6025      	str	r5, [r4, #0]
 800556a:	7123      	strb	r3, [r4, #4]
 800556c:	bd38      	pop	{r3, r4, r5, pc}

0800556e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 800556e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005572:	4605      	mov	r5, r0
 8005574:	460c      	mov	r4, r1
 8005576:	4616      	mov	r6, r2
 8005578:	461f      	mov	r7, r3
 800557a:	f000 fcfd 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 800557e:	b948      	cbnz	r0, 8005594 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005580:	2f03      	cmp	r7, #3
 8005582:	d807      	bhi.n	8005594 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	4632      	mov	r2, r6
 8005588:	4629      	mov	r1, r5
 800558a:	4620      	mov	r0, r4
 800558c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	4718      	bx	r3
 8005594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005598 <_ZdlPvj>:
 8005598:	f001 b804 	b.w	80065a4 <_ZdlPv>

0800559c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>:
 800559c:	4a19      	ldr	r2, [pc, #100]	; (8005604 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x68>)
 800559e:	b570      	push	{r4, r5, r6, lr}
 80055a0:	6853      	ldr	r3, [r2, #4]
 80055a2:	f1a0 0408 	sub.w	r4, r0, #8
 80055a6:	b123      	cbz	r3, 80055b2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x16>
 80055a8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80055ac:	1865      	adds	r5, r4, r1
 80055ae:	42ab      	cmp	r3, r5
 80055b0:	d903      	bls.n	80055ba <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1e>
 80055b2:	f840 3c04 	str.w	r3, [r0, #-4]
 80055b6:	6054      	str	r4, [r2, #4]
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	d105      	bne.n	80055c8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2c>
 80055bc:	e9d3 3500 	ldrd	r3, r5, [r3]
 80055c0:	4419      	add	r1, r3
 80055c2:	e940 1502 	strd	r1, r5, [r0, #-8]
 80055c6:	e7f6      	b.n	80055b6 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1a>
 80055c8:	3204      	adds	r2, #4
 80055ca:	685e      	ldr	r6, [r3, #4]
 80055cc:	b14e      	cbz	r6, 80055e2 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x46>
 80055ce:	42b5      	cmp	r5, r6
 80055d0:	d202      	bcs.n	80055d8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x3c>
 80055d2:	1d1a      	adds	r2, r3, #4
 80055d4:	4633      	mov	r3, r6
 80055d6:	e7f8      	b.n	80055ca <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x2e>
 80055d8:	bf01      	itttt	eq
 80055da:	682e      	ldreq	r6, [r5, #0]
 80055dc:	686d      	ldreq	r5, [r5, #4]
 80055de:	1989      	addeq	r1, r1, r6
 80055e0:	605d      	streq	r5, [r3, #4]
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	681d      	ldr	r5, [r3, #0]
 80055e6:	195e      	adds	r6, r3, r5
 80055e8:	42b4      	cmp	r4, r6
 80055ea:	bf17      	itett	ne
 80055ec:	685b      	ldrne	r3, [r3, #4]
 80055ee:	1949      	addeq	r1, r1, r5
 80055f0:	f840 3c04 	strne.w	r3, [r0, #-4]
 80055f4:	6813      	ldrne	r3, [r2, #0]
 80055f6:	bf16      	itet	ne
 80055f8:	f840 1c08 	strne.w	r1, [r0, #-8]
 80055fc:	6019      	streq	r1, [r3, #0]
 80055fe:	605c      	strne	r4, [r3, #4]
 8005600:	e7da      	b.n	80055b8 <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0+0x1c>
 8005602:	bf00      	nop
 8005604:	2000047c 	.word	0x2000047c

08005608 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>:
 8005608:	f100 0308 	add.w	r3, r0, #8
 800560c:	2b08      	cmp	r3, #8
 800560e:	bf38      	it	cc
 8005610:	2308      	movcc	r3, #8
 8005612:	b530      	push	{r4, r5, lr}
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x44>)
 8005616:	3307      	adds	r3, #7
 8005618:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800561c:	f023 0307 	bic.w	r3, r3, #7
 8005620:	b168      	cbz	r0, 800563e <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x36>
 8005622:	e9d0 1400 	ldrd	r1, r4, [r0]
 8005626:	428b      	cmp	r3, r1
 8005628:	d90a      	bls.n	8005640 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x38>
 800562a:	1d02      	adds	r2, r0, #4
 800562c:	4620      	mov	r0, r4
 800562e:	e7f7      	b.n	8005620 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x18>
 8005630:	18c1      	adds	r1, r0, r3
 8005632:	604c      	str	r4, [r1, #4]
 8005634:	50c5      	str	r5, [r0, r3]
 8005636:	6810      	ldr	r0, [r2, #0]
 8005638:	6003      	str	r3, [r0, #0]
 800563a:	6011      	str	r1, [r2, #0]
 800563c:	3008      	adds	r0, #8
 800563e:	bd30      	pop	{r4, r5, pc}
 8005640:	1acd      	subs	r5, r1, r3
 8005642:	2d07      	cmp	r5, #7
 8005644:	d8f4      	bhi.n	8005630 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x28>
 8005646:	6001      	str	r1, [r0, #0]
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	e7f7      	b.n	800563c <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0+0x34>
 800564c:	2000047c 	.word	0x2000047c

08005650 <__cxa_allocate_exception>:
 8005650:	b510      	push	{r4, lr}
 8005652:	f100 0480 	add.w	r4, r0, #128	; 0x80
 8005656:	4620      	mov	r0, r4
 8005658:	f001 f866 	bl	8006728 <malloc>
 800565c:	4603      	mov	r3, r0
 800565e:	b930      	cbnz	r0, 800566e <__cxa_allocate_exception+0x1e>
 8005660:	4620      	mov	r0, r4
 8005662:	f7ff ffd1 	bl	8005608 <_ZN12_GLOBAL__N_14pool8allocateEj.constprop.0>
 8005666:	4603      	mov	r3, r0
 8005668:	b908      	cbnz	r0, 800566e <__cxa_allocate_exception+0x1e>
 800566a:	f000 fb6f 	bl	8005d4c <_ZSt9terminatev>
 800566e:	2280      	movs	r2, #128	; 0x80
 8005670:	2100      	movs	r1, #0
 8005672:	4618      	mov	r0, r3
 8005674:	f001 f890 	bl	8006798 <memset>
 8005678:	3080      	adds	r0, #128	; 0x80
 800567a:	bd10      	pop	{r4, pc}

0800567c <__cxa_free_exception>:
 800567c:	4a06      	ldr	r2, [pc, #24]	; (8005698 <__cxa_free_exception+0x1c>)
 800567e:	3880      	subs	r0, #128	; 0x80
 8005680:	6893      	ldr	r3, [r2, #8]
 8005682:	4298      	cmp	r0, r3
 8005684:	d905      	bls.n	8005692 <__cxa_free_exception+0x16>
 8005686:	68d2      	ldr	r2, [r2, #12]
 8005688:	4413      	add	r3, r2
 800568a:	4298      	cmp	r0, r3
 800568c:	d201      	bcs.n	8005692 <__cxa_free_exception+0x16>
 800568e:	f7ff bf85 	b.w	800559c <_ZN12_GLOBAL__N_14pool4freeEPv.constprop.0>
 8005692:	f001 b851 	b.w	8006738 <free>
 8005696:	bf00      	nop
 8005698:	2000047c 	.word	0x2000047c

0800569c <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv>:
 800569c:	b538      	push	{r3, r4, r5, lr}
 800569e:	f44f 651e 	mov.w	r5, #2528	; 0x9e0
 80056a2:	4c07      	ldr	r4, [pc, #28]	; (80056c0 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x24>)
 80056a4:	4628      	mov	r0, r5
 80056a6:	60e5      	str	r5, [r4, #12]
 80056a8:	f001 f83e 	bl	8006728 <malloc>
 80056ac:	60a0      	str	r0, [r4, #8]
 80056ae:	b910      	cbnz	r0, 80056b6 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x1a>
 80056b0:	60e0      	str	r0, [r4, #12]
 80056b2:	6060      	str	r0, [r4, #4]
 80056b4:	bd38      	pop	{r3, r4, r5, pc}
 80056b6:	2300      	movs	r3, #0
 80056b8:	6060      	str	r0, [r4, #4]
 80056ba:	6005      	str	r5, [r0, #0]
 80056bc:	6043      	str	r3, [r0, #4]
 80056be:	e7f9      	b.n	80056b4 <_GLOBAL__sub_I__ZN9__gnu_cxx9__freeresEv+0x18>
 80056c0:	2000047c 	.word	0x2000047c

080056c4 <__cxa_end_cleanup>:
 80056c4:	b41e      	push	{r1, r2, r3, r4}
 80056c6:	f000 f89c 	bl	8005802 <__gnu_end_cleanup>
 80056ca:	bc1e      	pop	{r1, r2, r3, r4}
 80056cc:	f7fb fdea 	bl	80012a4 <_Unwind_Resume>

080056d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80056d0:	7803      	ldrb	r3, [r0, #0]
 80056d2:	2b47      	cmp	r3, #71	; 0x47
 80056d4:	d117      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056d6:	7843      	ldrb	r3, [r0, #1]
 80056d8:	2b4e      	cmp	r3, #78	; 0x4e
 80056da:	d114      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056dc:	7883      	ldrb	r3, [r0, #2]
 80056de:	2b55      	cmp	r3, #85	; 0x55
 80056e0:	d111      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056e2:	78c3      	ldrb	r3, [r0, #3]
 80056e4:	2b43      	cmp	r3, #67	; 0x43
 80056e6:	d10e      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056e8:	7903      	ldrb	r3, [r0, #4]
 80056ea:	2b43      	cmp	r3, #67	; 0x43
 80056ec:	d10b      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056ee:	7943      	ldrb	r3, [r0, #5]
 80056f0:	2b2b      	cmp	r3, #43	; 0x2b
 80056f2:	d108      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056f4:	7983      	ldrb	r3, [r0, #6]
 80056f6:	2b2b      	cmp	r3, #43	; 0x2b
 80056f8:	d105      	bne.n	8005706 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80056fa:	79c0      	ldrb	r0, [r0, #7]
 80056fc:	2801      	cmp	r0, #1
 80056fe:	bf8c      	ite	hi
 8005700:	2000      	movhi	r0, #0
 8005702:	2001      	movls	r0, #1
 8005704:	4770      	bx	lr
 8005706:	2000      	movs	r0, #0
 8005708:	4770      	bx	lr
	...

0800570c <__cxa_type_match>:
 800570c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005710:	461d      	mov	r5, r3
 8005712:	7803      	ldrb	r3, [r0, #0]
 8005714:	460e      	mov	r6, r1
 8005716:	2b47      	cmp	r3, #71	; 0x47
 8005718:	4602      	mov	r2, r0
 800571a:	79c1      	ldrb	r1, [r0, #7]
 800571c:	d113      	bne.n	8005746 <__cxa_type_match+0x3a>
 800571e:	7843      	ldrb	r3, [r0, #1]
 8005720:	2b4e      	cmp	r3, #78	; 0x4e
 8005722:	d110      	bne.n	8005746 <__cxa_type_match+0x3a>
 8005724:	7883      	ldrb	r3, [r0, #2]
 8005726:	2b55      	cmp	r3, #85	; 0x55
 8005728:	d10d      	bne.n	8005746 <__cxa_type_match+0x3a>
 800572a:	78c3      	ldrb	r3, [r0, #3]
 800572c:	2b43      	cmp	r3, #67	; 0x43
 800572e:	d10a      	bne.n	8005746 <__cxa_type_match+0x3a>
 8005730:	7903      	ldrb	r3, [r0, #4]
 8005732:	2b46      	cmp	r3, #70	; 0x46
 8005734:	d107      	bne.n	8005746 <__cxa_type_match+0x3a>
 8005736:	7943      	ldrb	r3, [r0, #5]
 8005738:	2b4f      	cmp	r3, #79	; 0x4f
 800573a:	d104      	bne.n	8005746 <__cxa_type_match+0x3a>
 800573c:	7983      	ldrb	r3, [r0, #6]
 800573e:	2b52      	cmp	r3, #82	; 0x52
 8005740:	d101      	bne.n	8005746 <__cxa_type_match+0x3a>
 8005742:	2900      	cmp	r1, #0
 8005744:	d030      	beq.n	80057a8 <__cxa_type_match+0x9c>
 8005746:	4610      	mov	r0, r2
 8005748:	f7ff ffc2 	bl	80056d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800574c:	2300      	movs	r3, #0
 800574e:	f080 0401 	eor.w	r4, r0, #1
 8005752:	b2e4      	uxtb	r4, r4
 8005754:	2000      	movs	r0, #0
 8005756:	9001      	str	r0, [sp, #4]
 8005758:	bb4b      	cbnz	r3, 80057ae <__cxa_type_match+0xa2>
 800575a:	bb54      	cbnz	r4, 80057b2 <__cxa_type_match+0xa6>
 800575c:	2901      	cmp	r1, #1
 800575e:	bf0a      	itet	eq
 8005760:	f852 3c20 	ldreq.w	r3, [r2, #-32]
 8005764:	f1a2 0320 	subne.w	r3, r2, #32
 8005768:	3b78      	subeq	r3, #120	; 0x78
 800576a:	2901      	cmp	r1, #1
 800576c:	bf0c      	ite	eq
 800576e:	f852 2c20 	ldreq.w	r2, [r2, #-32]
 8005772:	3258      	addne	r2, #88	; 0x58
 8005774:	681c      	ldr	r4, [r3, #0]
 8005776:	9201      	str	r2, [sp, #4]
 8005778:	6823      	ldr	r3, [r4, #0]
 800577a:	4620      	mov	r0, r4
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	4798      	blx	r3
 8005780:	b1c8      	cbz	r0, 80057b6 <__cxa_type_match+0xaa>
 8005782:	2702      	movs	r7, #2
 8005784:	9b01      	ldr	r3, [sp, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	6833      	ldr	r3, [r6, #0]
 800578c:	4621      	mov	r1, r4
 800578e:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8005792:	4630      	mov	r0, r6
 8005794:	2301      	movs	r3, #1
 8005796:	aa01      	add	r2, sp, #4
 8005798:	47c0      	blx	r8
 800579a:	b170      	cbz	r0, 80057ba <__cxa_type_match+0xae>
 800579c:	9b01      	ldr	r3, [sp, #4]
 800579e:	602b      	str	r3, [r5, #0]
 80057a0:	4638      	mov	r0, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a8:	2301      	movs	r3, #1
 80057aa:	460c      	mov	r4, r1
 80057ac:	e7d2      	b.n	8005754 <__cxa_type_match+0x48>
 80057ae:	4c04      	ldr	r4, [pc, #16]	; (80057c0 <__cxa_type_match+0xb4>)
 80057b0:	e7e2      	b.n	8005778 <__cxa_type_match+0x6c>
 80057b2:	4c04      	ldr	r4, [pc, #16]	; (80057c4 <__cxa_type_match+0xb8>)
 80057b4:	e7e0      	b.n	8005778 <__cxa_type_match+0x6c>
 80057b6:	2701      	movs	r7, #1
 80057b8:	e7e7      	b.n	800578a <__cxa_type_match+0x7e>
 80057ba:	4607      	mov	r7, r0
 80057bc:	e7f0      	b.n	80057a0 <__cxa_type_match+0x94>
 80057be:	bf00      	nop
 80057c0:	08006fa0 	.word	0x08006fa0
 80057c4:	08006fa8 	.word	0x08006fa8

080057c8 <__cxa_begin_cleanup>:
 80057c8:	b510      	push	{r4, lr}
 80057ca:	4604      	mov	r4, r0
 80057cc:	f000 f834 	bl	8005838 <__cxa_get_globals>
 80057d0:	4602      	mov	r2, r0
 80057d2:	4620      	mov	r0, r4
 80057d4:	f1a4 0120 	sub.w	r1, r4, #32
 80057d8:	f7ff ff7a 	bl	80056d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80057dc:	b160      	cbz	r0, 80057f8 <__cxa_begin_cleanup+0x30>
 80057de:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80057e2:	3301      	adds	r3, #1
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80057ea:	d103      	bne.n	80057f4 <__cxa_begin_cleanup+0x2c>
 80057ec:	6893      	ldr	r3, [r2, #8]
 80057ee:	f844 3c08 	str.w	r3, [r4, #-8]
 80057f2:	6091      	str	r1, [r2, #8]
 80057f4:	2001      	movs	r0, #1
 80057f6:	bd10      	pop	{r4, pc}
 80057f8:	6893      	ldr	r3, [r2, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0f9      	beq.n	80057f2 <__cxa_begin_cleanup+0x2a>
 80057fe:	f000 faa5 	bl	8005d4c <_ZSt9terminatev>

08005802 <__gnu_end_cleanup>:
 8005802:	b510      	push	{r4, lr}
 8005804:	f000 f818 	bl	8005838 <__cxa_get_globals>
 8005808:	6882      	ldr	r2, [r0, #8]
 800580a:	4601      	mov	r1, r0
 800580c:	b90a      	cbnz	r2, 8005812 <__gnu_end_cleanup+0x10>
 800580e:	f000 fa9d 	bl	8005d4c <_ZSt9terminatev>
 8005812:	f102 0420 	add.w	r4, r2, #32
 8005816:	4620      	mov	r0, r4
 8005818:	f7ff ff5a 	bl	80056d0 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 800581c:	b140      	cbz	r0, 8005830 <__gnu_end_cleanup+0x2e>
 800581e:	69d3      	ldr	r3, [r2, #28]
 8005820:	3b01      	subs	r3, #1
 8005822:	61d3      	str	r3, [r2, #28]
 8005824:	b913      	cbnz	r3, 800582c <__gnu_end_cleanup+0x2a>
 8005826:	6990      	ldr	r0, [r2, #24]
 8005828:	6088      	str	r0, [r1, #8]
 800582a:	6193      	str	r3, [r2, #24]
 800582c:	4620      	mov	r0, r4
 800582e:	bd10      	pop	{r4, pc}
 8005830:	6088      	str	r0, [r1, #8]
 8005832:	e7fb      	b.n	800582c <__gnu_end_cleanup+0x2a>

08005834 <_ZNSt9exceptionD1Ev>:
 8005834:	4770      	bx	lr
	...

08005838 <__cxa_get_globals>:
 8005838:	4800      	ldr	r0, [pc, #0]	; (800583c <__cxa_get_globals+0x4>)
 800583a:	4770      	bx	lr
 800583c:	2000048c 	.word	0x2000048c

08005840 <_ZL12read_uleb128PKhPm>:
 8005840:	2300      	movs	r3, #0
 8005842:	461a      	mov	r2, r3
 8005844:	b530      	push	{r4, r5, lr}
 8005846:	f810 5b01 	ldrb.w	r5, [r0], #1
 800584a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
 800584e:	4094      	lsls	r4, r2
 8005850:	4323      	orrs	r3, r4
 8005852:	062c      	lsls	r4, r5, #24
 8005854:	f102 0207 	add.w	r2, r2, #7
 8005858:	d4f5      	bmi.n	8005846 <_ZL12read_uleb128PKhPm+0x6>
 800585a:	600b      	str	r3, [r1, #0]
 800585c:	bd30      	pop	{r4, r5, pc}

0800585e <_ZL12read_sleb128PKhPl>:
 800585e:	2300      	movs	r3, #0
 8005860:	461a      	mov	r2, r3
 8005862:	b530      	push	{r4, r5, lr}
 8005864:	f810 4b01 	ldrb.w	r4, [r0], #1
 8005868:	f004 057f 	and.w	r5, r4, #127	; 0x7f
 800586c:	4095      	lsls	r5, r2
 800586e:	432b      	orrs	r3, r5
 8005870:	0625      	lsls	r5, r4, #24
 8005872:	f102 0207 	add.w	r2, r2, #7
 8005876:	d4f5      	bmi.n	8005864 <_ZL12read_sleb128PKhPl+0x6>
 8005878:	2a1f      	cmp	r2, #31
 800587a:	d806      	bhi.n	800588a <_ZL12read_sleb128PKhPl+0x2c>
 800587c:	0664      	lsls	r4, r4, #25
 800587e:	bf42      	ittt	mi
 8005880:	f04f 34ff 	movmi.w	r4, #4294967295
 8005884:	fa04 f202 	lslmi.w	r2, r4, r2
 8005888:	4313      	orrmi	r3, r2
 800588a:	600b      	str	r3, [r1, #0]
 800588c:	bd30      	pop	{r4, r5, pc}

0800588e <_ZL28read_encoded_value_with_basehjPKhPj>:
 800588e:	2850      	cmp	r0, #80	; 0x50
 8005890:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005894:	4606      	mov	r6, r0
 8005896:	4688      	mov	r8, r1
 8005898:	4615      	mov	r5, r2
 800589a:	461f      	mov	r7, r3
 800589c:	d108      	bne.n	80058b0 <_ZL28read_encoded_value_with_basehjPKhPj+0x22>
 800589e:	1cd0      	adds	r0, r2, #3
 80058a0:	f020 0003 	bic.w	r0, r0, #3
 80058a4:	f850 4b04 	ldr.w	r4, [r0], #4
 80058a8:	603c      	str	r4, [r7, #0]
 80058aa:	b002      	add	sp, #8
 80058ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058b0:	f000 030f 	and.w	r3, r0, #15
 80058b4:	2b0c      	cmp	r3, #12
 80058b6:	d82e      	bhi.n	8005916 <_ZL28read_encoded_value_with_basehjPKhPj+0x88>
 80058b8:	e8df f003 	tbb	[pc, r3]
 80058bc:	251d0725 	.word	0x251d0725
 80058c0:	2d2d2d29 	.word	0x2d2d2d29
 80058c4:	2521182d 	.word	0x2521182d
 80058c8:	29          	.byte	0x29
 80058c9:	00          	.byte	0x00
 80058ca:	4628      	mov	r0, r5
 80058cc:	a901      	add	r1, sp, #4
 80058ce:	f7ff ffb7 	bl	8005840 <_ZL12read_uleb128PKhPm>
 80058d2:	9c01      	ldr	r4, [sp, #4]
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d0e7      	beq.n	80058a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80058d8:	f006 0370 	and.w	r3, r6, #112	; 0x70
 80058dc:	2b10      	cmp	r3, #16
 80058de:	bf08      	it	eq
 80058e0:	46a8      	moveq	r8, r5
 80058e2:	0633      	lsls	r3, r6, #24
 80058e4:	4444      	add	r4, r8
 80058e6:	bf48      	it	mi
 80058e8:	6824      	ldrmi	r4, [r4, #0]
 80058ea:	e7dd      	b.n	80058a8 <_ZL28read_encoded_value_with_basehjPKhPj+0x1a>
 80058ec:	4628      	mov	r0, r5
 80058ee:	a901      	add	r1, sp, #4
 80058f0:	f7ff ffb5 	bl	800585e <_ZL12read_sleb128PKhPl>
 80058f4:	e7ed      	b.n	80058d2 <_ZL28read_encoded_value_with_basehjPKhPj+0x44>
 80058f6:	4628      	mov	r0, r5
 80058f8:	f830 4b02 	ldrh.w	r4, [r0], #2
 80058fc:	e7ea      	b.n	80058d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 80058fe:	4628      	mov	r0, r5
 8005900:	f930 4b02 	ldrsh.w	r4, [r0], #2
 8005904:	e7e6      	b.n	80058d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005906:	4628      	mov	r0, r5
 8005908:	f850 4b04 	ldr.w	r4, [r0], #4
 800590c:	e7e2      	b.n	80058d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 800590e:	4628      	mov	r0, r5
 8005910:	f850 4b08 	ldr.w	r4, [r0], #8
 8005914:	e7de      	b.n	80058d4 <_ZL28read_encoded_value_with_basehjPKhPj+0x46>
 8005916:	f000 fed5 	bl	80066c4 <abort>

0800591a <_ZL21base_of_encoded_valuehP15_Unwind_Context>:
 800591a:	b508      	push	{r3, lr}
 800591c:	4603      	mov	r3, r0
 800591e:	2bff      	cmp	r3, #255	; 0xff
 8005920:	4608      	mov	r0, r1
 8005922:	d010      	beq.n	8005946 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 8005924:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005928:	2a30      	cmp	r2, #48	; 0x30
 800592a:	d012      	beq.n	8005952 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x38>
 800592c:	d807      	bhi.n	800593e <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x24>
 800592e:	2a20      	cmp	r2, #32
 8005930:	d00b      	beq.n	800594a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x30>
 8005932:	d802      	bhi.n	800593a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005934:	f013 0f60 	tst.w	r3, #96	; 0x60
 8005938:	d005      	beq.n	8005946 <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x2c>
 800593a:	f000 fec3 	bl	80066c4 <abort>
 800593e:	2a40      	cmp	r2, #64	; 0x40
 8005940:	d00b      	beq.n	800595a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x40>
 8005942:	2a50      	cmp	r2, #80	; 0x50
 8005944:	d1f9      	bne.n	800593a <_ZL21base_of_encoded_valuehP15_Unwind_Context+0x20>
 8005946:	2000      	movs	r0, #0
 8005948:	bd08      	pop	{r3, pc}
 800594a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800594e:	f001 b86c 	b.w	8006a2a <_Unwind_GetTextRelBase>
 8005952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005956:	f001 b865 	b.w	8006a24 <_Unwind_GetDataRelBase>
 800595a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800595e:	f7fb be9f 	b.w	80016a0 <_Unwind_GetRegionStart>

08005962 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>:
 8005962:	b570      	push	{r4, r5, r6, lr}
 8005964:	460c      	mov	r4, r1
 8005966:	4601      	mov	r1, r0
 8005968:	4620      	mov	r0, r4
 800596a:	4615      	mov	r5, r2
 800596c:	461e      	mov	r6, r3
 800596e:	f7ff ffd4 	bl	800591a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005972:	4633      	mov	r3, r6
 8005974:	4601      	mov	r1, r0
 8005976:	462a      	mov	r2, r5
 8005978:	4620      	mov	r0, r4
 800597a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800597e:	f7ff bf86 	b.w	800588e <_ZL28read_encoded_value_with_basehjPKhPj>

08005982 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>:
 8005982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005984:	460c      	mov	r4, r1
 8005986:	4615      	mov	r5, r2
 8005988:	4606      	mov	r6, r0
 800598a:	b328      	cbz	r0, 80059d8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x56>
 800598c:	f7fb fe88 	bl	80016a0 <_Unwind_GetRegionStart>
 8005990:	4603      	mov	r3, r0
 8005992:	4620      	mov	r0, r4
 8005994:	602b      	str	r3, [r5, #0]
 8005996:	f810 1b01 	ldrb.w	r1, [r0], #1
 800599a:	29ff      	cmp	r1, #255	; 0xff
 800599c:	d01e      	beq.n	80059dc <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5a>
 800599e:	4602      	mov	r2, r0
 80059a0:	1d2b      	adds	r3, r5, #4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f7ff ffdd 	bl	8005962 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 80059a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059ac:	2bff      	cmp	r3, #255	; 0xff
 80059ae:	752b      	strb	r3, [r5, #20]
 80059b0:	d016      	beq.n	80059e0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x5e>
 80059b2:	2310      	movs	r3, #16
 80059b4:	a901      	add	r1, sp, #4
 80059b6:	752b      	strb	r3, [r5, #20]
 80059b8:	f7ff ff42 	bl	8005840 <_ZL12read_uleb128PKhPm>
 80059bc:	9b01      	ldr	r3, [sp, #4]
 80059be:	4403      	add	r3, r0
 80059c0:	60eb      	str	r3, [r5, #12]
 80059c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80059c6:	a901      	add	r1, sp, #4
 80059c8:	756b      	strb	r3, [r5, #21]
 80059ca:	f7ff ff39 	bl	8005840 <_ZL12read_uleb128PKhPm>
 80059ce:	9b01      	ldr	r3, [sp, #4]
 80059d0:	4403      	add	r3, r0
 80059d2:	612b      	str	r3, [r5, #16]
 80059d4:	b002      	add	sp, #8
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	4603      	mov	r3, r0
 80059da:	e7da      	b.n	8005992 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x10>
 80059dc:	606b      	str	r3, [r5, #4]
 80059de:	e7e3      	b.n	80059a8 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x26>
 80059e0:	2300      	movs	r3, #0
 80059e2:	e7ed      	b.n	80059c0 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info+0x3e>

080059e4 <_Unwind_GetGR>:
 80059e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	2300      	movs	r3, #0
 80059ec:	460a      	mov	r2, r1
 80059ee:	4619      	mov	r1, r3
 80059f0:	f7fb f8ac 	bl	8000b4c <_Unwind_VRS_Get>
 80059f4:	9803      	ldr	r0, [sp, #12]
 80059f6:	b005      	add	sp, #20
 80059f8:	f85d fb04 	ldr.w	pc, [sp], #4

080059fc <__gxx_personality_v0>:
 80059fc:	2300      	movs	r3, #0
 80059fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a02:	b091      	sub	sp, #68	; 0x44
 8005a04:	9305      	str	r3, [sp, #20]
 8005a06:	f000 0303 	and.w	r3, r0, #3
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	4606      	mov	r6, r0
 8005a0e:	460c      	mov	r4, r1
 8005a10:	4617      	mov	r7, r2
 8005a12:	d00e      	beq.n	8005a32 <__gxx_personality_v0+0x36>
 8005a14:	2b02      	cmp	r3, #2
 8005a16:	d003      	beq.n	8005a20 <__gxx_personality_v0+0x24>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d13b      	bne.n	8005a94 <__gxx_personality_v0+0x98>
 8005a1c:	0701      	lsls	r1, r0, #28
 8005a1e:	d53b      	bpl.n	8005a98 <__gxx_personality_v0+0x9c>
 8005a20:	4639      	mov	r1, r7
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7fb fe24 	bl	8001670 <__gnu_unwind_frame>
 8005a28:	b390      	cbz	r0, 8005a90 <__gxx_personality_v0+0x94>
 8005a2a:	2009      	movs	r0, #9
 8005a2c:	b011      	add	sp, #68	; 0x44
 8005a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a32:	0702      	lsls	r2, r0, #28
 8005a34:	d406      	bmi.n	8005a44 <__gxx_personality_v0+0x48>
 8005a36:	6a0d      	ldr	r5, [r1, #32]
 8005a38:	4638      	mov	r0, r7
 8005a3a:	210d      	movs	r1, #13
 8005a3c:	f7ff ffd2 	bl	80059e4 <_Unwind_GetGR>
 8005a40:	4285      	cmp	r5, r0
 8005a42:	d02b      	beq.n	8005a9c <__gxx_personality_v0+0xa0>
 8005a44:	2002      	movs	r0, #2
 8005a46:	2300      	movs	r3, #0
 8005a48:	f006 0608 	and.w	r6, r6, #8
 8005a4c:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
 8005a50:	4306      	orrs	r6, r0
 8005a52:	220c      	movs	r2, #12
 8005a54:	4619      	mov	r1, r3
 8005a56:	4638      	mov	r0, r7
 8005a58:	f8cd a000 	str.w	sl, [sp]
 8005a5c:	940a      	str	r4, [sp, #40]	; 0x28
 8005a5e:	f7fb f89b 	bl	8000b98 <_Unwind_VRS_Set>
 8005a62:	2e06      	cmp	r6, #6
 8005a64:	d11c      	bne.n	8005aa0 <__gxx_personality_v0+0xa4>
 8005a66:	e9d4 590a 	ldrd	r5, r9, [r4, #40]	; 0x28
 8005a6a:	f8d4 8030 	ldr.w	r8, [r4, #48]	; 0x30
 8005a6e:	f1b8 0f00 	cmp.w	r8, #0
 8005a72:	bf0c      	ite	eq
 8005a74:	f04f 0b01 	moveq.w	fp, #1
 8005a78:	f04f 0b03 	movne.w	fp, #3
 8005a7c:	f016 0608 	ands.w	r6, r6, #8
 8005a80:	f000 8107 	beq.w	8005c92 <__gxx_personality_v0+0x296>
 8005a84:	f1bb 0f01 	cmp.w	fp, #1
 8005a88:	f040 80ff 	bne.w	8005c8a <__gxx_personality_v0+0x28e>
 8005a8c:	f000 f95e 	bl	8005d4c <_ZSt9terminatev>
 8005a90:	2008      	movs	r0, #8
 8005a92:	e7cb      	b.n	8005a2c <__gxx_personality_v0+0x30>
 8005a94:	f000 fe16 	bl	80066c4 <abort>
 8005a98:	2001      	movs	r0, #1
 8005a9a:	e7d4      	b.n	8005a46 <__gxx_personality_v0+0x4a>
 8005a9c:	2006      	movs	r0, #6
 8005a9e:	e7d2      	b.n	8005a46 <__gxx_personality_v0+0x4a>
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7fb fe03 	bl	80016ac <_Unwind_GetLanguageSpecificData>
 8005aa6:	4681      	mov	r9, r0
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	d0b9      	beq.n	8005a20 <__gxx_personality_v0+0x24>
 8005aac:	4652      	mov	r2, sl
 8005aae:	4601      	mov	r1, r0
 8005ab0:	4638      	mov	r0, r7
 8005ab2:	f7ff ff66 	bl	8005982 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005ab6:	4639      	mov	r1, r7
 8005ab8:	4605      	mov	r5, r0
 8005aba:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005abe:	f7ff ff2c 	bl	800591a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005ac2:	210f      	movs	r1, #15
 8005ac4:	900c      	str	r0, [sp, #48]	; 0x30
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	f7ff ff8c 	bl	80059e4 <_Unwind_GetGR>
 8005acc:	f020 0801 	bic.w	r8, r0, #1
 8005ad0:	f108 38ff 	add.w	r8, r8, #4294967295
 8005ad4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005ad6:	42ab      	cmp	r3, r5
 8005ad8:	f240 80bf 	bls.w	8005c5a <__gxx_personality_v0+0x25e>
 8005adc:	462a      	mov	r2, r5
 8005ade:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005ae2:	ab06      	add	r3, sp, #24
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	f7ff ff3c 	bl	8005962 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005aea:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005aee:	4602      	mov	r2, r0
 8005af0:	ab07      	add	r3, sp, #28
 8005af2:	2000      	movs	r0, #0
 8005af4:	f7ff ff35 	bl	8005962 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005af8:	ab08      	add	r3, sp, #32
 8005afa:	4602      	mov	r2, r0
 8005afc:	f89d 103d 	ldrb.w	r1, [sp, #61]	; 0x3d
 8005b00:	2000      	movs	r0, #0
 8005b02:	f7ff ff2e 	bl	8005962 <_ZL18read_encoded_valueP15_Unwind_ContexthPKhPj>
 8005b06:	a909      	add	r1, sp, #36	; 0x24
 8005b08:	f7ff fe9a 	bl	8005840 <_ZL12read_uleb128PKhPm>
 8005b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b0e:	9a06      	ldr	r2, [sp, #24]
 8005b10:	4605      	mov	r5, r0
 8005b12:	4413      	add	r3, r2
 8005b14:	4543      	cmp	r3, r8
 8005b16:	d901      	bls.n	8005b1c <__gxx_personality_v0+0x120>
 8005b18:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005b1a:	e7db      	b.n	8005ad4 <__gxx_personality_v0+0xd8>
 8005b1c:	9a07      	ldr	r2, [sp, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	4543      	cmp	r3, r8
 8005b22:	d9d7      	bls.n	8005ad4 <__gxx_personality_v0+0xd8>
 8005b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b28:	f1b8 0f00 	cmp.w	r8, #0
 8005b2c:	d001      	beq.n	8005b32 <__gxx_personality_v0+0x136>
 8005b2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b30:	4498      	add	r8, r3
 8005b32:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005b34:	b115      	cbz	r5, 8005b3c <__gxx_personality_v0+0x140>
 8005b36:	980e      	ldr	r0, [sp, #56]	; 0x38
 8005b38:	3d01      	subs	r5, #1
 8005b3a:	4405      	add	r5, r0
 8005b3c:	f1b8 0f00 	cmp.w	r8, #0
 8005b40:	f43f af6e 	beq.w	8005a20 <__gxx_personality_v0+0x24>
 8005b44:	2d00      	cmp	r5, #0
 8005b46:	f000 80f2 	beq.w	8005d2e <__gxx_personality_v0+0x332>
 8005b4a:	f016 0308 	ands.w	r3, r6, #8
 8005b4e:	9302      	str	r3, [sp, #8]
 8005b50:	d034      	beq.n	8005bbc <__gxx_personality_v0+0x1c0>
 8005b52:	2347      	movs	r3, #71	; 0x47
 8005b54:	7023      	strb	r3, [r4, #0]
 8005b56:	234e      	movs	r3, #78	; 0x4e
 8005b58:	7063      	strb	r3, [r4, #1]
 8005b5a:	2355      	movs	r3, #85	; 0x55
 8005b5c:	70a3      	strb	r3, [r4, #2]
 8005b5e:	2343      	movs	r3, #67	; 0x43
 8005b60:	70e3      	strb	r3, [r4, #3]
 8005b62:	2346      	movs	r3, #70	; 0x46
 8005b64:	7123      	strb	r3, [r4, #4]
 8005b66:	234f      	movs	r3, #79	; 0x4f
 8005b68:	7163      	strb	r3, [r4, #5]
 8005b6a:	2352      	movs	r3, #82	; 0x52
 8005b6c:	71a3      	strb	r3, [r4, #6]
 8005b6e:	2300      	movs	r3, #0
 8005b70:	71e3      	strb	r3, [r4, #7]
 8005b72:	f04f 0b00 	mov.w	fp, #0
 8005b76:	a907      	add	r1, sp, #28
 8005b78:	4628      	mov	r0, r5
 8005b7a:	f7ff fe70 	bl	800585e <_ZL12read_sleb128PKhPl>
 8005b7e:	a908      	add	r1, sp, #32
 8005b80:	9003      	str	r0, [sp, #12]
 8005b82:	f7ff fe6c 	bl	800585e <_ZL12read_sleb128PKhPl>
 8005b86:	9907      	ldr	r1, [sp, #28]
 8005b88:	2900      	cmp	r1, #0
 8005b8a:	d063      	beq.n	8005c54 <__gxx_personality_v0+0x258>
 8005b8c:	dd3a      	ble.n	8005c04 <__gxx_personality_v0+0x208>
 8005b8e:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005b92:	28ff      	cmp	r0, #255	; 0xff
 8005b94:	d032      	beq.n	8005bfc <__gxx_personality_v0+0x200>
 8005b96:	f000 0307 	and.w	r3, r0, #7
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	f63f af7a 	bhi.w	8005a94 <__gxx_personality_v0+0x98>
 8005ba0:	a201      	add	r2, pc, #4	; (adr r2, 8005ba8 <__gxx_personality_v0+0x1ac>)
 8005ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ba6:	bf00      	nop
 8005ba8:	08005c01 	.word	0x08005c01
 8005bac:	08005a95 	.word	0x08005a95
 8005bb0:	08005bcf 	.word	0x08005bcf
 8005bb4:	08005c01 	.word	0x08005c01
 8005bb8:	08005bf9 	.word	0x08005bf9
 8005bbc:	79e3      	ldrb	r3, [r4, #7]
 8005bbe:	2b01      	cmp	r3, #1
 8005bc0:	bf0c      	ite	eq
 8005bc2:	f854 3c20 	ldreq.w	r3, [r4, #-32]
 8005bc6:	f104 0358 	addne.w	r3, r4, #88	; 0x58
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	e7d1      	b.n	8005b72 <__gxx_personality_v0+0x176>
 8005bce:	2502      	movs	r5, #2
 8005bd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bd2:	ab09      	add	r3, sp, #36	; 0x24
 8005bd4:	fb05 2211 	mls	r2, r5, r1, r2
 8005bd8:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005bda:	f7ff fe58 	bl	800588e <_ZL28read_encoded_value_with_basehjPKhPj>
 8005bde:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005be0:	b131      	cbz	r1, 8005bf0 <__gxx_personality_v0+0x1f4>
 8005be2:	b35c      	cbz	r4, 8005c3c <__gxx_personality_v0+0x240>
 8005be4:	2200      	movs	r2, #0
 8005be6:	4620      	mov	r0, r4
 8005be8:	ab05      	add	r3, sp, #20
 8005bea:	f7ff fd8f 	bl	800570c <__cxa_type_match>
 8005bee:	b328      	cbz	r0, 8005c3c <__gxx_personality_v0+0x240>
 8005bf0:	f04f 0b03 	mov.w	fp, #3
 8005bf4:	9d07      	ldr	r5, [sp, #28]
 8005bf6:	e034      	b.n	8005c62 <__gxx_personality_v0+0x266>
 8005bf8:	2508      	movs	r5, #8
 8005bfa:	e7e9      	b.n	8005bd0 <__gxx_personality_v0+0x1d4>
 8005bfc:	2500      	movs	r5, #0
 8005bfe:	e7e7      	b.n	8005bd0 <__gxx_personality_v0+0x1d4>
 8005c00:	2504      	movs	r5, #4
 8005c02:	e7e5      	b.n	8005bd0 <__gxx_personality_v0+0x1d4>
 8005c04:	f1c1 517f 	rsb	r1, r1, #1069547520	; 0x3fc00000
 8005c08:	f501 117f 	add.w	r1, r1, #4177920	; 0x3fc000
 8005c0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c0e:	f501 517f 	add.w	r1, r1, #16320	; 0x3fc0
 8005c12:	313f      	adds	r1, #63	; 0x3f
 8005c14:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8005c18:	b1bc      	cbz	r4, 8005c4a <__gxx_personality_v0+0x24e>
 8005c1a:	9a02      	ldr	r2, [sp, #8]
 8005c1c:	b9aa      	cbnz	r2, 8005c4a <__gxx_personality_v0+0x24e>
 8005c1e:	9b05      	ldr	r3, [sp, #20]
 8005c20:	3d04      	subs	r5, #4
 8005c22:	9309      	str	r3, [sp, #36]	; 0x24
 8005c24:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8005c28:	2900      	cmp	r1, #0
 8005c2a:	d0e1      	beq.n	8005bf0 <__gxx_personality_v0+0x1f4>
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	4620      	mov	r0, r4
 8005c30:	ab09      	add	r3, sp, #36	; 0x24
 8005c32:	4429      	add	r1, r5
 8005c34:	f7ff fd6a 	bl	800570c <__cxa_type_match>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d0f3      	beq.n	8005c24 <__gxx_personality_v0+0x228>
 8005c3c:	9d08      	ldr	r5, [sp, #32]
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	d071      	beq.n	8005d26 <__gxx_personality_v0+0x32a>
 8005c42:	9b03      	ldr	r3, [sp, #12]
 8005c44:	442b      	add	r3, r5
 8005c46:	461d      	mov	r5, r3
 8005c48:	e795      	b.n	8005b76 <__gxx_personality_v0+0x17a>
 8005c4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1f4      	bne.n	8005c3c <__gxx_personality_v0+0x240>
 8005c52:	e7cd      	b.n	8005bf0 <__gxx_personality_v0+0x1f4>
 8005c54:	f04f 0b01 	mov.w	fp, #1
 8005c58:	e7f0      	b.n	8005c3c <__gxx_personality_v0+0x240>
 8005c5a:	2500      	movs	r5, #0
 8005c5c:	f04f 0b01 	mov.w	fp, #1
 8005c60:	46a8      	mov	r8, r5
 8005c62:	07f3      	lsls	r3, r6, #31
 8005c64:	f57f af0a 	bpl.w	8005a7c <__gxx_personality_v0+0x80>
 8005c68:	f1bb 0f02 	cmp.w	fp, #2
 8005c6c:	f43f aed8 	beq.w	8005a20 <__gxx_personality_v0+0x24>
 8005c70:	210d      	movs	r1, #13
 8005c72:	4638      	mov	r0, r7
 8005c74:	9e05      	ldr	r6, [sp, #20]
 8005c76:	f7ff feb5 	bl	80059e4 <_Unwind_GetGR>
 8005c7a:	e9c4 590a 	strd	r5, r9, [r4, #40]	; 0x28
 8005c7e:	e9c4 0608 	strd	r0, r6, [r4, #32]
 8005c82:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
 8005c86:	2006      	movs	r0, #6
 8005c88:	e6d0      	b.n	8005a2c <__gxx_personality_v0+0x30>
 8005c8a:	2d00      	cmp	r5, #0
 8005c8c:	da22      	bge.n	8005cd4 <__gxx_personality_v0+0x2d8>
 8005c8e:	f000 f86f 	bl	8005d70 <_ZSt10unexpectedv>
 8005c92:	f1bb 0f01 	cmp.w	fp, #1
 8005c96:	d102      	bne.n	8005c9e <__gxx_personality_v0+0x2a2>
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 fca2 	bl	80065e2 <__cxa_call_terminate>
 8005c9e:	2d00      	cmp	r5, #0
 8005ca0:	da18      	bge.n	8005cd4 <__gxx_personality_v0+0x2d8>
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4649      	mov	r1, r9
 8005ca6:	4638      	mov	r0, r7
 8005ca8:	f7ff fe6b 	bl	8005982 <_ZL17parse_lsda_headerP15_Unwind_ContextPKhP16lsda_header_info>
 8005cac:	4639      	mov	r1, r7
 8005cae:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
 8005cb2:	f7ff fe32 	bl	800591a <_ZL21base_of_encoded_valuehP15_Unwind_Context>
 8005cb6:	43eb      	mvns	r3, r5
 8005cb8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cba:	900c      	str	r0, [sp, #48]	; 0x30
 8005cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cc0:	f853 2026 	ldr.w	r2, [r3, r6, lsl #2]
 8005cc4:	b10a      	cbz	r2, 8005cca <__gxx_personality_v0+0x2ce>
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	e7fa      	b.n	8005cc0 <__gxx_personality_v0+0x2c4>
 8005cca:	2204      	movs	r2, #4
 8005ccc:	e9c4 600a 	strd	r6, r0, [r4, #40]	; 0x28
 8005cd0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	ae09      	add	r6, sp, #36	; 0x24
 8005cd8:	461a      	mov	r2, r3
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4638      	mov	r0, r7
 8005cde:	9600      	str	r6, [sp, #0]
 8005ce0:	9409      	str	r4, [sp, #36]	; 0x24
 8005ce2:	f7fa ff59 	bl	8000b98 <_Unwind_VRS_Set>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2201      	movs	r2, #1
 8005cea:	4619      	mov	r1, r3
 8005cec:	4638      	mov	r0, r7
 8005cee:	9600      	str	r6, [sp, #0]
 8005cf0:	9509      	str	r5, [sp, #36]	; 0x24
 8005cf2:	f7fa ff51 	bl	8000b98 <_Unwind_VRS_Set>
 8005cf6:	210f      	movs	r1, #15
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	f7ff fe73 	bl	80059e4 <_Unwind_GetGR>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	f000 0001 	and.w	r0, r0, #1
 8005d04:	ea40 0008 	orr.w	r0, r0, r8
 8005d08:	9009      	str	r0, [sp, #36]	; 0x24
 8005d0a:	220f      	movs	r2, #15
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4638      	mov	r0, r7
 8005d10:	9600      	str	r6, [sp, #0]
 8005d12:	f7fa ff41 	bl	8000b98 <_Unwind_VRS_Set>
 8005d16:	f1bb 0f02 	cmp.w	fp, #2
 8005d1a:	d102      	bne.n	8005d22 <__gxx_personality_v0+0x326>
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f7ff fd53 	bl	80057c8 <__cxa_begin_cleanup>
 8005d22:	2007      	movs	r0, #7
 8005d24:	e682      	b.n	8005a2c <__gxx_personality_v0+0x30>
 8005d26:	f1bb 0f00 	cmp.w	fp, #0
 8005d2a:	f43f ae79 	beq.w	8005a20 <__gxx_personality_v0+0x24>
 8005d2e:	f04f 0b02 	mov.w	fp, #2
 8005d32:	e796      	b.n	8005c62 <__gxx_personality_v0+0x266>

08005d34 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005d34:	b508      	push	{r3, lr}
 8005d36:	4780      	blx	r0
 8005d38:	f000 fcc4 	bl	80066c4 <abort>

08005d3c <_ZSt13get_terminatev>:
 8005d3c:	4b02      	ldr	r3, [pc, #8]	; (8005d48 <_ZSt13get_terminatev+0xc>)
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	f3bf 8f5b 	dmb	ish
 8005d44:	4770      	bx	lr
 8005d46:	bf00      	nop
 8005d48:	20000014 	.word	0x20000014

08005d4c <_ZSt9terminatev>:
 8005d4c:	b508      	push	{r3, lr}
 8005d4e:	f7ff fff5 	bl	8005d3c <_ZSt13get_terminatev>
 8005d52:	f7ff ffef 	bl	8005d34 <_ZN10__cxxabiv111__terminateEPFvvE>

08005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>:
 8005d56:	b508      	push	{r3, lr}
 8005d58:	4780      	blx	r0
 8005d5a:	f7ff fff7 	bl	8005d4c <_ZSt9terminatev>
	...

08005d60 <_ZSt14get_unexpectedv>:
 8005d60:	4b02      	ldr	r3, [pc, #8]	; (8005d6c <_ZSt14get_unexpectedv+0xc>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f3bf 8f5b 	dmb	ish
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000010 	.word	0x20000010

08005d70 <_ZSt10unexpectedv>:
 8005d70:	b508      	push	{r3, lr}
 8005d72:	f7ff fff5 	bl	8005d60 <_ZSt14get_unexpectedv>
 8005d76:	f7ff ffee 	bl	8005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08005d7a <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block>:
 8005d7a:	2801      	cmp	r0, #1
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	d903      	bls.n	8005d88 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0xe>
 8005d80:	f851 0c14 	ldr.w	r0, [r1, #-20]
 8005d84:	f7ff ffd6 	bl	8005d34 <_ZN10__cxxabiv111__terminateEPFvvE>
 8005d88:	f3bf 8f5b 	dmb	ish
 8005d8c:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
 8005d90:	e853 2f00 	ldrex	r2, [r3]
 8005d94:	3a01      	subs	r2, #1
 8005d96:	e843 2000 	strex	r0, r2, [r3]
 8005d9a:	2800      	cmp	r0, #0
 8005d9c:	d1f8      	bne.n	8005d90 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x16>
 8005d9e:	f3bf 8f5b 	dmb	ish
 8005da2:	b95a      	cbnz	r2, 8005dbc <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x42>
 8005da4:	f851 3c1c 	ldr.w	r3, [r1, #-28]
 8005da8:	f101 0458 	add.w	r4, r1, #88	; 0x58
 8005dac:	b10b      	cbz	r3, 8005db2 <_ZL23__gxx_exception_cleanup19_Unwind_Reason_CodeP21_Unwind_Control_Block+0x38>
 8005dae:	4620      	mov	r0, r4
 8005db0:	4798      	blx	r3
 8005db2:	4620      	mov	r0, r4
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005db8:	f7ff bc60 	b.w	800567c <__cxa_free_exception>
 8005dbc:	bd10      	pop	{r4, pc}
	...

08005dc0 <__cxa_init_primary_exception>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	2500      	movs	r5, #0
 8005dc4:	e940 121e 	strd	r1, r2, [r0, #-120]	; 0x78
 8005dc8:	f840 5c80 	str.w	r5, [r0, #-128]
 8005dcc:	4604      	mov	r4, r0
 8005dce:	f7ff ffc7 	bl	8005d60 <_ZSt14get_unexpectedv>
 8005dd2:	f844 0c70 	str.w	r0, [r4, #-112]
 8005dd6:	f7ff ffb1 	bl	8005d3c <_ZSt13get_terminatev>
 8005dda:	2347      	movs	r3, #71	; 0x47
 8005ddc:	f804 3c58 	strb.w	r3, [r4, #-88]
 8005de0:	234e      	movs	r3, #78	; 0x4e
 8005de2:	f804 3c57 	strb.w	r3, [r4, #-87]
 8005de6:	2355      	movs	r3, #85	; 0x55
 8005de8:	f804 3c56 	strb.w	r3, [r4, #-86]
 8005dec:	2343      	movs	r3, #67	; 0x43
 8005dee:	f804 3c55 	strb.w	r3, [r4, #-85]
 8005df2:	f804 3c54 	strb.w	r3, [r4, #-84]
 8005df6:	232b      	movs	r3, #43	; 0x2b
 8005df8:	f804 3c53 	strb.w	r3, [r4, #-83]
 8005dfc:	f804 3c52 	strb.w	r3, [r4, #-82]
 8005e00:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <__cxa_init_primary_exception+0x54>)
 8005e02:	f844 0c6c 	str.w	r0, [r4, #-108]
 8005e06:	f804 5c51 	strb.w	r5, [r4, #-81]
 8005e0a:	f844 3c50 	str.w	r3, [r4, #-80]
 8005e0e:	f1a4 0080 	sub.w	r0, r4, #128	; 0x80
 8005e12:	bd38      	pop	{r3, r4, r5, pc}
 8005e14:	08005d7b 	.word	0x08005d7b

08005e18 <__cxa_throw>:
 8005e18:	b508      	push	{r3, lr}
 8005e1a:	4604      	mov	r4, r0
 8005e1c:	460d      	mov	r5, r1
 8005e1e:	4616      	mov	r6, r2
 8005e20:	f7ff fd0a 	bl	8005838 <__cxa_get_globals>
 8005e24:	6843      	ldr	r3, [r0, #4]
 8005e26:	4632      	mov	r2, r6
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4629      	mov	r1, r5
 8005e2c:	6043      	str	r3, [r0, #4]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f7ff ffc6 	bl	8005dc0 <__cxa_init_primary_exception>
 8005e34:	2301      	movs	r3, #1
 8005e36:	4604      	mov	r4, r0
 8005e38:	f844 3b28 	str.w	r3, [r4], #40
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	f7fb fa1f 	bl	8001280 <_Unwind_RaiseException>
 8005e42:	4620      	mov	r0, r4
 8005e44:	f000 fc0d 	bl	8006662 <__cxa_begin_catch>
 8005e48:	f7ff ff80 	bl	8005d4c <_ZSt9terminatev>

08005e4c <_Znwj>:
 8005e4c:	2801      	cmp	r0, #1
 8005e4e:	bf38      	it	cc
 8005e50:	2001      	movcc	r0, #1
 8005e52:	b510      	push	{r4, lr}
 8005e54:	4604      	mov	r4, r0
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fc66 	bl	8006728 <malloc>
 8005e5c:	b930      	cbnz	r0, 8005e6c <_Znwj+0x20>
 8005e5e:	f000 fc29 	bl	80066b4 <_ZSt15get_new_handlerv>
 8005e62:	b908      	cbnz	r0, 8005e68 <_Znwj+0x1c>
 8005e64:	f000 fc2e 	bl	80066c4 <abort>
 8005e68:	4780      	blx	r0
 8005e6a:	e7f4      	b.n	8005e56 <_Znwj+0xa>
 8005e6c:	bd10      	pop	{r4, pc}
	...

08005e70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4604      	mov	r4, r0
 8005e74:	4b02      	ldr	r3, [pc, #8]	; (8005e80 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
 8005e76:	6003      	str	r3, [r0, #0]
 8005e78:	f7ff fb3a 	bl	80054f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005e7c:	4620      	mov	r0, r4
 8005e7e:	bd10      	pop	{r4, pc}
 8005e80:	08007048 	.word	0x08007048

08005e84 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8005e84:	b510      	push	{r4, lr}
 8005e86:	4604      	mov	r4, r0
 8005e88:	f7ff fff2 	bl	8005e70 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	210c      	movs	r1, #12
 8005e90:	f7ff fb82 	bl	8005598 <_ZdlPvj>
 8005e94:	4620      	mov	r0, r4
 8005e96:	bd10      	pop	{r4, pc}

08005e98 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005ea0:	4606      	mov	r6, r0
 8005ea2:	4590      	cmp	r8, r2
 8005ea4:	460f      	mov	r7, r1
 8005ea6:	4615      	mov	r5, r2
 8005ea8:	461c      	mov	r4, r3
 8005eaa:	d00b      	beq.n	8005ec4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x2c>
 8005eac:	68b0      	ldr	r0, [r6, #8]
 8005eae:	462a      	mov	r2, r5
 8005eb0:	6803      	ldr	r3, [r0, #0]
 8005eb2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005eb6:	6a1e      	ldr	r6, [r3, #32]
 8005eb8:	4639      	mov	r1, r7
 8005eba:	4623      	mov	r3, r4
 8005ebc:	46b4      	mov	ip, r6
 8005ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ec2:	4760      	bx	ip
 8005ec4:	4619      	mov	r1, r3
 8005ec6:	f000 f857 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005eca:	2800      	cmp	r0, #0
 8005ecc:	d0ee      	beq.n	8005eac <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8005ece:	2006      	movs	r0, #6
 8005ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005ed4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8005ed4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	460d      	mov	r5, r1
 8005eda:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
 8005ede:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4681      	mov	r9, r0
 8005ee6:	4617      	mov	r7, r2
 8005ee8:	4698      	mov	r8, r3
 8005eea:	f000 f845 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005eee:	b190      	cbz	r0, 8005f16 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
 8005ef0:	2d00      	cmp	r5, #0
 8005ef2:	6034      	str	r4, [r6, #0]
 8005ef4:	7137      	strb	r7, [r6, #4]
 8005ef6:	db09      	blt.n	8005f0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
 8005ef8:	442c      	add	r4, r5
 8005efa:	45a2      	cmp	sl, r4
 8005efc:	bf0c      	ite	eq
 8005efe:	2406      	moveq	r4, #6
 8005f00:	2401      	movne	r4, #1
 8005f02:	71b4      	strb	r4, [r6, #6]
 8005f04:	2000      	movs	r0, #0
 8005f06:	b001      	add	sp, #4
 8005f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0c:	3502      	adds	r5, #2
 8005f0e:	d1f9      	bne.n	8005f04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f10:	2301      	movs	r3, #1
 8005f12:	71b3      	strb	r3, [r6, #6]
 8005f14:	e7f6      	b.n	8005f04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f16:	4554      	cmp	r4, sl
 8005f18:	d106      	bne.n	8005f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005f1a:	4659      	mov	r1, fp
 8005f1c:	4648      	mov	r0, r9
 8005f1e:	f000 f82b 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8005f22:	b108      	cbz	r0, 8005f28 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
 8005f24:	7177      	strb	r7, [r6, #5]
 8005f26:	e7ed      	b.n	8005f04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 8005f28:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8005f2c:	463a      	mov	r2, r7
 8005f2e:	6803      	ldr	r3, [r0, #0]
 8005f30:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
 8005f34:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
 8005f38:	69dc      	ldr	r4, [r3, #28]
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	4643      	mov	r3, r8
 8005f3e:	46a4      	mov	ip, r4
 8005f40:	b001      	add	sp, #4
 8005f42:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f46:	4760      	bx	ip

08005f48 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8005f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	4615      	mov	r5, r2
 8005f52:	461e      	mov	r6, r3
 8005f54:	f7ff faff 	bl	8005556 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8005f58:	b948      	cbnz	r0, 8005f6e <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
 8005f5a:	68b8      	ldr	r0, [r7, #8]
 8005f5c:	462a      	mov	r2, r5
 8005f5e:	6803      	ldr	r3, [r0, #0]
 8005f60:	4621      	mov	r1, r4
 8005f62:	699f      	ldr	r7, [r3, #24]
 8005f64:	4633      	mov	r3, r6
 8005f66:	46bc      	mov	ip, r7
 8005f68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f6c:	4760      	bx	ip
 8005f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f72 <_ZNSt9type_infoD1Ev>:
 8005f72:	4770      	bx	lr

08005f74 <_ZNKSt9type_info14__is_pointer_pEv>:
 8005f74:	2000      	movs	r0, #0
 8005f76:	4770      	bx	lr

08005f78 <_ZNKSt9type_infoeqERKS_>:
 8005f78:	4281      	cmp	r1, r0
 8005f7a:	b508      	push	{r3, lr}
 8005f7c:	d00e      	beq.n	8005f9c <_ZNKSt9type_infoeqERKS_+0x24>
 8005f7e:	6840      	ldr	r0, [r0, #4]
 8005f80:	7803      	ldrb	r3, [r0, #0]
 8005f82:	2b2a      	cmp	r3, #42	; 0x2a
 8005f84:	d00c      	beq.n	8005fa0 <_ZNKSt9type_infoeqERKS_+0x28>
 8005f86:	6849      	ldr	r1, [r1, #4]
 8005f88:	780b      	ldrb	r3, [r1, #0]
 8005f8a:	2b2a      	cmp	r3, #42	; 0x2a
 8005f8c:	bf08      	it	eq
 8005f8e:	3101      	addeq	r1, #1
 8005f90:	f7fa f8dc 	bl	800014c <strcmp>
 8005f94:	fab0 f080 	clz	r0, r0
 8005f98:	0940      	lsrs	r0, r0, #5
 8005f9a:	bd08      	pop	{r3, pc}
 8005f9c:	2001      	movs	r0, #1
 8005f9e:	e7fc      	b.n	8005f9a <_ZNKSt9type_infoeqERKS_+0x22>
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	e7fa      	b.n	8005f9a <_ZNKSt9type_infoeqERKS_+0x22>

08005fa4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>:
 8005fa4:	b510      	push	{r4, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4b02      	ldr	r3, [pc, #8]	; (8005fb4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev+0x10>)
 8005faa:	6003      	str	r3, [r0, #0]
 8005fac:	f7ff faa0 	bl	80054f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8005fb0:	4620      	mov	r0, r4
 8005fb2:	bd10      	pop	{r4, pc}
 8005fb4:	080070c0 	.word	0x080070c0

08005fb8 <_ZN10__cxxabiv121__vmi_class_type_infoD0Ev>:
 8005fb8:	b510      	push	{r4, lr}
 8005fba:	4604      	mov	r4, r0
 8005fbc:	f7ff fff2 	bl	8005fa4 <_ZN10__cxxabiv121__vmi_class_type_infoD1Ev>
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	2118      	movs	r1, #24
 8005fc4:	f7ff fae8 	bl	8005598 <_ZdlPvj>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8005fcc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd0:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8005fd4:	4604      	mov	r4, r0
 8005fd6:	454a      	cmp	r2, r9
 8005fd8:	460f      	mov	r7, r1
 8005fda:	4616      	mov	r6, r2
 8005fdc:	469a      	mov	sl, r3
 8005fde:	d024      	beq.n	800602a <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x5e>
 8005fe0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8005fe4:	eb04 04c8 	add.w	r4, r4, r8, lsl #3
 8005fe8:	f1b8 0f00 	cmp.w	r8, #0
 8005fec:	d028      	beq.n	8006040 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x74>
 8005fee:	68e5      	ldr	r5, [r4, #12]
 8005ff0:	07aa      	lsls	r2, r5, #30
 8005ff2:	d521      	bpl.n	8006038 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8005ff4:	122a      	asrs	r2, r5, #8
 8005ff6:	f015 0501 	ands.w	r5, r5, #1
 8005ffa:	d003      	beq.n	8006004 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x38>
 8005ffc:	1cfb      	adds	r3, r7, #3
 8005ffe:	d01b      	beq.n	8006038 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 8006000:	6833      	ldr	r3, [r6, #0]
 8006002:	589a      	ldr	r2, [r3, r2]
 8006004:	68a0      	ldr	r0, [r4, #8]
 8006006:	4639      	mov	r1, r7
 8006008:	6803      	ldr	r3, [r0, #0]
 800600a:	f8cd 9000 	str.w	r9, [sp]
 800600e:	f8d3 b020 	ldr.w	fp, [r3, #32]
 8006012:	4432      	add	r2, r6
 8006014:	4653      	mov	r3, sl
 8006016:	47d8      	blx	fp
 8006018:	2803      	cmp	r0, #3
 800601a:	d90d      	bls.n	8006038 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x6c>
 800601c:	b115      	cbz	r5, 8006024 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 800601e:	f040 0001 	orr.w	r0, r0, #1
 8006022:	b2c0      	uxtb	r0, r0
 8006024:	b003      	add	sp, #12
 8006026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800602a:	4619      	mov	r1, r3
 800602c:	f7ff ffa4 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8006030:	2800      	cmp	r0, #0
 8006032:	d0d5      	beq.n	8005fe0 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x14>
 8006034:	2006      	movs	r0, #6
 8006036:	e7f5      	b.n	8006024 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>
 8006038:	f108 38ff 	add.w	r8, r8, #4294967295
 800603c:	3c08      	subs	r4, #8
 800603e:	e7d3      	b.n	8005fe8 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x1c>
 8006040:	2001      	movs	r0, #1
 8006042:	e7ef      	b.n	8006024 <_ZNK10__cxxabiv121__vmi_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x58>

08006044 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>:
 8006044:	b4f0      	push	{r4, r5, r6, r7}
 8006046:	1e0d      	subs	r5, r1, #0
 8006048:	9c04      	ldr	r4, [sp, #16]
 800604a:	db06      	blt.n	800605a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x16>
 800604c:	1950      	adds	r0, r2, r5
 800604e:	4284      	cmp	r4, r0
 8006050:	bf14      	ite	ne
 8006052:	2001      	movne	r0, #1
 8006054:	2006      	moveq	r0, #6
 8006056:	bcf0      	pop	{r4, r5, r6, r7}
 8006058:	4770      	bx	lr
 800605a:	3502      	adds	r5, #2
 800605c:	d005      	beq.n	800606a <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x26>
 800605e:	6805      	ldr	r5, [r0, #0]
 8006060:	9404      	str	r4, [sp, #16]
 8006062:	6a2c      	ldr	r4, [r5, #32]
 8006064:	46a4      	mov	ip, r4
 8006066:	bcf0      	pop	{r4, r5, r6, r7}
 8006068:	4760      	bx	ip
 800606a:	2001      	movs	r0, #1
 800606c:	e7f3      	b.n	8006056 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_+0x12>

0800606e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 800606e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006072:	b091      	sub	sp, #68	; 0x44
 8006074:	9c1d      	ldr	r4, [sp, #116]	; 0x74
 8006076:	469a      	mov	sl, r3
 8006078:	68a3      	ldr	r3, [r4, #8]
 800607a:	4688      	mov	r8, r1
 800607c:	06d9      	lsls	r1, r3, #27
 800607e:	bf48      	it	mi
 8006080:	6883      	ldrmi	r3, [r0, #8]
 8006082:	9206      	str	r2, [sp, #24]
 8006084:	bf48      	it	mi
 8006086:	60a3      	strmi	r3, [r4, #8]
 8006088:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800608a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800608c:	4681      	mov	r9, r0
 800608e:	4293      	cmp	r3, r2
 8006090:	d107      	bne.n	80060a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 8006092:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006094:	f7ff ff70 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8006098:	b118      	cbz	r0, 80060a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x34>
 800609a:	9b06      	ldr	r3, [sp, #24]
 800609c:	7163      	strb	r3, [r4, #5]
 800609e:	2700      	movs	r7, #0
 80060a0:	e085      	b.n	80061ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80060a2:	4651      	mov	r1, sl
 80060a4:	4648      	mov	r0, r9
 80060a6:	f7ff ff67 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 80060aa:	b1c0      	cbz	r0, 80060de <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x70>
 80060ac:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80060ae:	f1b8 0f00 	cmp.w	r8, #0
 80060b2:	6023      	str	r3, [r4, #0]
 80060b4:	9b06      	ldr	r3, [sp, #24]
 80060b6:	7123      	strb	r3, [r4, #4]
 80060b8:	db0b      	blt.n	80060d2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x64>
 80060ba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80060bc:	4498      	add	r8, r3
 80060be:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80060c0:	4543      	cmp	r3, r8
 80060c2:	bf0c      	ite	eq
 80060c4:	f04f 0806 	moveq.w	r8, #6
 80060c8:	f04f 0801 	movne.w	r8, #1
 80060cc:	f884 8006 	strb.w	r8, [r4, #6]
 80060d0:	e7e5      	b.n	800609e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80060d2:	f118 0f02 	cmn.w	r8, #2
 80060d6:	d1e2      	bne.n	800609e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80060d8:	2301      	movs	r3, #1
 80060da:	71a3      	strb	r3, [r4, #6]
 80060dc:	e7df      	b.n	800609e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
 80060de:	f1b8 0f00 	cmp.w	r8, #0
 80060e2:	bfa8      	it	ge
 80060e4:	9b1c      	ldrge	r3, [sp, #112]	; 0x70
 80060e6:	f04f 0700 	mov.w	r7, #0
 80060ea:	bfa4      	itt	ge
 80060ec:	eba3 0308 	subge.w	r3, r3, r8
 80060f0:	9307      	strge	r3, [sp, #28]
 80060f2:	f04f 0302 	mov.w	r3, #2
 80060f6:	e9cd 7309 	strd	r7, r3, [sp, #36]	; 0x24
 80060fa:	f04f 0301 	mov.w	r3, #1
 80060fe:	9308      	str	r3, [sp, #32]
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	bfb8      	it	lt
 8006104:	9007      	strlt	r0, [sp, #28]
 8006106:	f043 0301 	orr.w	r3, r3, #1
 800610a:	930b      	str	r3, [sp, #44]	; 0x2c
 800610c:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8006110:	eb09 03cb 	add.w	r3, r9, fp, lsl #3
 8006114:	9305      	str	r3, [sp, #20]
 8006116:	f1bb 0f00 	cmp.w	fp, #0
 800611a:	f000 80d5 	beq.w	80062c8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x25a>
 800611e:	2300      	movs	r3, #0
 8006120:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 8006124:	9b05      	ldr	r3, [sp, #20]
 8006126:	68a5      	ldr	r5, [r4, #8]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	950f      	str	r5, [sp, #60]	; 0x3c
 800612c:	07da      	lsls	r2, r3, #31
 800612e:	bf48      	it	mi
 8006130:	981a      	ldrmi	r0, [sp, #104]	; 0x68
 8006132:	ea4f 2123 	mov.w	r1, r3, asr #8
 8006136:	bf42      	ittt	mi
 8006138:	6800      	ldrmi	r0, [r0, #0]
 800613a:	9a0b      	ldrmi	r2, [sp, #44]	; 0x2c
 800613c:	5841      	ldrmi	r1, [r0, r1]
 800613e:	981a      	ldr	r0, [sp, #104]	; 0x68
 8006140:	bf58      	it	pl
 8006142:	9a06      	ldrpl	r2, [sp, #24]
 8006144:	4401      	add	r1, r0
 8006146:	9807      	ldr	r0, [sp, #28]
 8006148:	b138      	cbz	r0, 800615a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 800614a:	4288      	cmp	r0, r1
 800614c:	bf2c      	ite	cs
 800614e:	2000      	movcs	r0, #0
 8006150:	2001      	movcc	r0, #1
 8006152:	9e08      	ldr	r6, [sp, #32]
 8006154:	42b0      	cmp	r0, r6
 8006156:	f000 80b3 	beq.w	80062c0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x252>
 800615a:	079b      	lsls	r3, r3, #30
 800615c:	d407      	bmi.n	800616e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x100>
 800615e:	f118 0f02 	cmn.w	r8, #2
 8006162:	d102      	bne.n	800616a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xfc>
 8006164:	07ae      	lsls	r6, r5, #30
 8006166:	f000 80ad 	beq.w	80062c4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x256>
 800616a:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
 800616e:	9b05      	ldr	r3, [sp, #20]
 8006170:	ad0d      	add	r5, sp, #52	; 0x34
 8006172:	6898      	ldr	r0, [r3, #8]
 8006174:	6803      	ldr	r3, [r0, #0]
 8006176:	9503      	str	r5, [sp, #12]
 8006178:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800617a:	9502      	str	r5, [sp, #8]
 800617c:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800617e:	e9cd 1500 	strd	r1, r5, [sp]
 8006182:	4641      	mov	r1, r8
 8006184:	69dd      	ldr	r5, [r3, #28]
 8006186:	4653      	mov	r3, sl
 8006188:	47a8      	blx	r5
 800618a:	7963      	ldrb	r3, [r4, #5]
 800618c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
 8006190:	f89d 503a 	ldrb.w	r5, [sp, #58]	; 0x3a
 8006194:	4313      	orrs	r3, r2
 8006196:	2d06      	cmp	r5, #6
 8006198:	990d      	ldr	r1, [sp, #52]	; 0x34
 800619a:	7163      	strb	r3, [r4, #5]
 800619c:	d001      	beq.n	80061a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x134>
 800619e:	2d02      	cmp	r5, #2
 80061a0:	d109      	bne.n	80061b6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x148>
 80061a2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80061a6:	6021      	str	r1, [r4, #0]
 80061a8:	7123      	strb	r3, [r4, #4]
 80061aa:	71a5      	strb	r5, [r4, #6]
 80061ac:	4607      	mov	r7, r0
 80061ae:	4638      	mov	r0, r7
 80061b0:	b011      	add	sp, #68	; 0x44
 80061b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b6:	6822      	ldr	r2, [r4, #0]
 80061b8:	b9a7      	cbnz	r7, 80061e4 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x176>
 80061ba:	b9aa      	cbnz	r2, 80061e8 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x17a>
 80061bc:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80061c0:	6021      	str	r1, [r4, #0]
 80061c2:	7122      	strb	r2, [r4, #4]
 80061c4:	b121      	cbz	r1, 80061d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80061c6:	b11b      	cbz	r3, 80061d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80061c8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80061cc:	07dd      	lsls	r5, r3, #31
 80061ce:	d5ed      	bpl.n	80061ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80061d0:	7963      	ldrb	r3, [r4, #5]
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d0ea      	beq.n	80061ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80061d6:	9b05      	ldr	r3, [sp, #20]
 80061d8:	4607      	mov	r7, r0
 80061da:	3b08      	subs	r3, #8
 80061dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80061e0:	9305      	str	r3, [sp, #20]
 80061e2:	e798      	b.n	8006116 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xa8>
 80061e4:	2a00      	cmp	r2, #0
 80061e6:	d037      	beq.n	8006258 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1ea>
 80061e8:	4291      	cmp	r1, r2
 80061ea:	d106      	bne.n	80061fa <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x18c>
 80061ec:	7923      	ldrb	r3, [r4, #4]
 80061ee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 80061f2:	4313      	orrs	r3, r2
 80061f4:	7123      	strb	r3, [r4, #4]
 80061f6:	4638      	mov	r0, r7
 80061f8:	e7ea      	b.n	80061d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80061fa:	b909      	cbnz	r1, 8006200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 80061fc:	2800      	cmp	r0, #0
 80061fe:	d0fa      	beq.n	80061f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 8006200:	2b03      	cmp	r3, #3
 8006202:	79a6      	ldrb	r6, [r4, #6]
 8006204:	d904      	bls.n	8006210 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1a2>
 8006206:	07d9      	lsls	r1, r3, #31
 8006208:	d529      	bpl.n	800625e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	079b      	lsls	r3, r3, #30
 800620e:	d526      	bpl.n	800625e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1f0>
 8006210:	b97e      	cbnz	r6, 8006232 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1c4>
 8006212:	2d03      	cmp	r5, #3
 8006214:	d905      	bls.n	8006222 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1b4>
 8006216:	07ee      	lsls	r6, r5, #31
 8006218:	d541      	bpl.n	800629e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 800621a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800621e:	0798      	lsls	r0, r3, #30
 8006220:	d53d      	bpl.n	800629e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x230>
 8006222:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006224:	4641      	mov	r1, r8
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4650      	mov	r0, sl
 800622a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622c:	f7ff ff0a 	bl	8006044 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8006230:	4606      	mov	r6, r0
 8006232:	b9e5      	cbnz	r5, 800626e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8006234:	2e03      	cmp	r6, #3
 8006236:	d905      	bls.n	8006244 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x1d6>
 8006238:	07f1      	lsls	r1, r6, #31
 800623a:	d532      	bpl.n	80062a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 800623c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006240:	079a      	lsls	r2, r3, #30
 8006242:	d52e      	bpl.n	80062a2 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x234>
 8006244:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006246:	4641      	mov	r1, r8
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	4650      	mov	r0, sl
 800624c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800624e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006250:	f7ff fef8 	bl	8006044 <_ZNK10__cxxabiv117__class_type_info17__find_public_srcEiPKvPKS0_S2_>
 8006254:	4605      	mov	r5, r0
 8006256:	e00a      	b.n	800626e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 8006258:	2900      	cmp	r1, #0
 800625a:	d1d1      	bne.n	8006200 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x192>
 800625c:	e7cb      	b.n	80061f6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x188>
 800625e:	2e01      	cmp	r6, #1
 8006260:	bf38      	it	cc
 8006262:	2601      	movcc	r6, #1
 8006264:	2d01      	cmp	r5, #1
 8006266:	bf38      	it	cc
 8006268:	2501      	movcc	r5, #1
 800626a:	b2f6      	uxtb	r6, r6
 800626c:	b2ed      	uxtb	r5, r5
 800626e:	ea85 0306 	eor.w	r3, r5, r6
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b03      	cmp	r3, #3
 8006276:	d916      	bls.n	80062a6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x238>
 8006278:	2d03      	cmp	r5, #3
 800627a:	bf81      	itttt	hi
 800627c:	462e      	movhi	r6, r5
 800627e:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 8006280:	2000      	movhi	r0, #0
 8006282:	6023      	strhi	r3, [r4, #0]
 8006284:	bf8a      	itet	hi
 8006286:	f89d 3038 	ldrbhi.w	r3, [sp, #56]	; 0x38
 800628a:	4638      	movls	r0, r7
 800628c:	7123      	strbhi	r3, [r4, #4]
 800628e:	07b3      	lsls	r3, r6, #30
 8006290:	71a6      	strb	r6, [r4, #6]
 8006292:	d402      	bmi.n	800629a <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x22c>
 8006294:	f016 0601 	ands.w	r6, r6, #1
 8006298:	d19a      	bne.n	80061d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 800629a:	2000      	movs	r0, #0
 800629c:	e786      	b.n	80061ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 800629e:	2601      	movs	r6, #1
 80062a0:	e7e5      	b.n	800626e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80062a2:	2501      	movs	r5, #1
 80062a4:	e7e3      	b.n	800626e <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x200>
 80062a6:	2300      	movs	r3, #0
 80062a8:	4035      	ands	r5, r6
 80062aa:	b2ed      	uxtb	r5, r5
 80062ac:	2d03      	cmp	r5, #3
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	d903      	bls.n	80062ba <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x24c>
 80062b2:	2302      	movs	r3, #2
 80062b4:	2001      	movs	r0, #1
 80062b6:	71a3      	strb	r3, [r4, #6]
 80062b8:	e778      	b.n	80061ac <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x13e>
 80062ba:	2001      	movs	r0, #1
 80062bc:	71a0      	strb	r0, [r4, #6]
 80062be:	e787      	b.n	80061d0 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x162>
 80062c0:	2301      	movs	r3, #1
 80062c2:	9309      	str	r3, [sp, #36]	; 0x24
 80062c4:	4638      	mov	r0, r7
 80062c6:	e786      	b.n	80061d6 <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x168>
 80062c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f43f af6f 	beq.w	80061ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80062d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	f43f af6b 	beq.w	80061ae <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x140>
 80062d8:	2301      	movs	r3, #1
 80062da:	f8cd b020 	str.w	fp, [sp, #32]
 80062de:	930a      	str	r3, [sp, #40]	; 0x28
 80062e0:	e714      	b.n	800610c <_ZNK10__cxxabiv121__vmi_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x9e>

080062e2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 80062e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	4606      	mov	r6, r0
 80062ea:	4617      	mov	r7, r2
 80062ec:	461c      	mov	r4, r3
 80062ee:	9102      	str	r1, [sp, #8]
 80062f0:	f7ff f931 	bl	8005556 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 80062f4:	4605      	mov	r5, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d15f      	bne.n	80063ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80062fa:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80062fe:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8006302:	f019 0f10 	tst.w	r9, #16
 8006306:	bf18      	it	ne
 8006308:	f8d6 9008 	ldrne.w	r9, [r6, #8]
 800630c:	eb06 08ca 	add.w	r8, r6, sl, lsl #3
 8006310:	f009 0301 	and.w	r3, r9, #1
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	f10d 0b10 	add.w	fp, sp, #16
 800631a:	f1ba 0f00 	cmp.w	sl, #0
 800631e:	d072      	beq.n	8006406 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x124>
 8006320:	2300      	movs	r3, #0
 8006322:	9304      	str	r3, [sp, #16]
 8006324:	f88d 3014 	strb.w	r3, [sp, #20]
 8006328:	2300      	movs	r3, #0
 800632a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800632e:	9307      	str	r3, [sp, #28]
 8006330:	f002 0301 	and.w	r3, r2, #1
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	f002 0302 	and.w	r3, r2, #2
 800633a:	9301      	str	r3, [sp, #4]
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	f002 0102 	and.w	r1, r2, #2
 8006342:	430b      	orrs	r3, r1
 8006344:	f8cd 9018 	str.w	r9, [sp, #24]
 8006348:	d104      	bne.n	8006354 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x72>
 800634a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800634e:	f1a8 0808 	sub.w	r8, r8, #8
 8006352:	e7e2      	b.n	800631a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x38>
 8006354:	2f00      	cmp	r7, #0
 8006356:	d034      	beq.n	80063c2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe0>
 8006358:	9b00      	ldr	r3, [sp, #0]
 800635a:	1212      	asrs	r2, r2, #8
 800635c:	b10b      	cbz	r3, 8006362 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x80>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	589a      	ldr	r2, [r3, r2]
 8006362:	443a      	add	r2, r7
 8006364:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8006368:	9902      	ldr	r1, [sp, #8]
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	699d      	ldr	r5, [r3, #24]
 800636e:	465b      	mov	r3, fp
 8006370:	47a8      	blx	r5
 8006372:	4605      	mov	r5, r0
 8006374:	2800      	cmp	r0, #0
 8006376:	d0e8      	beq.n	800634a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 8006378:	9b07      	ldr	r3, [sp, #28]
 800637a:	2b08      	cmp	r3, #8
 800637c:	d104      	bne.n	8006388 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 800637e:	9b00      	ldr	r3, [sp, #0]
 8006380:	b113      	cbz	r3, 8006388 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xa6>
 8006382:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006386:	9307      	str	r3, [sp, #28]
 8006388:	f89d 3014 	ldrb.w	r3, [sp, #20]
 800638c:	2b03      	cmp	r3, #3
 800638e:	d905      	bls.n	800639c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8006390:	9a01      	ldr	r2, [sp, #4]
 8006392:	b91a      	cbnz	r2, 800639c <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xba>
 8006394:	f023 0302 	bic.w	r3, r3, #2
 8006398:	f88d 3014 	strb.w	r3, [sp, #20]
 800639c:	68e1      	ldr	r1, [r4, #12]
 800639e:	b9c1      	cbnz	r1, 80063d2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xf0>
 80063a0:	e89b 000f 	ldmia.w	fp, {r0, r1, r2, r3}
 80063a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80063a8:	7923      	ldrb	r3, [r4, #4]
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d905      	bls.n	80063ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80063ae:	079a      	lsls	r2, r3, #30
 80063b0:	d509      	bpl.n	80063c6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xe4>
 80063b2:	68b3      	ldr	r3, [r6, #8]
 80063b4:	f013 0f01 	tst.w	r3, #1
 80063b8:	d1c7      	bne.n	800634a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 80063ba:	4628      	mov	r0, r5
 80063bc:	b009      	add	sp, #36	; 0x24
 80063be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063c2:	463a      	mov	r2, r7
 80063c4:	e7ce      	b.n	8006364 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x82>
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d5f7      	bpl.n	80063ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80063ca:	68b3      	ldr	r3, [r6, #8]
 80063cc:	f013 0f02 	tst.w	r3, #2
 80063d0:	e7f2      	b.n	80063b8 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd6>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	9a04      	ldr	r2, [sp, #16]
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d004      	beq.n	80063e4 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x102>
 80063da:	2300      	movs	r3, #0
 80063dc:	6023      	str	r3, [r4, #0]
 80063de:	2302      	movs	r3, #2
 80063e0:	7123      	strb	r3, [r4, #4]
 80063e2:	e7ea      	b.n	80063ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>
 80063e4:	b12b      	cbz	r3, 80063f2 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x110>
 80063e6:	7923      	ldrb	r3, [r4, #4]
 80063e8:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	7123      	strb	r3, [r4, #4]
 80063f0:	e7ab      	b.n	800634a <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x68>
 80063f2:	9807      	ldr	r0, [sp, #28]
 80063f4:	2808      	cmp	r0, #8
 80063f6:	d0f2      	beq.n	80063de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 80063f8:	2908      	cmp	r1, #8
 80063fa:	d0f0      	beq.n	80063de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 80063fc:	f7ff fdbc 	bl	8005f78 <_ZNKSt9type_infoeqERKS_>
 8006400:	2800      	cmp	r0, #0
 8006402:	d1f0      	bne.n	80063e6 <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x104>
 8006404:	e7eb      	b.n	80063de <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xfc>
 8006406:	7925      	ldrb	r5, [r4, #4]
 8006408:	3d00      	subs	r5, #0
 800640a:	bf18      	it	ne
 800640c:	2501      	movne	r5, #1
 800640e:	e7d4      	b.n	80063ba <_ZNK10__cxxabiv121__vmi_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0xd8>

08006410 <_ZNSt8__detail15_List_node_base7_M_hookEPS0_>:
 8006410:	684b      	ldr	r3, [r1, #4]
 8006412:	6001      	str	r1, [r0, #0]
 8006414:	6043      	str	r3, [r0, #4]
 8006416:	684b      	ldr	r3, [r1, #4]
 8006418:	6018      	str	r0, [r3, #0]
 800641a:	6048      	str	r0, [r1, #4]
 800641c:	4770      	bx	lr

0800641e <_ZNKSt11logic_error4whatEv>:
 800641e:	6840      	ldr	r0, [r0, #4]
 8006420:	4770      	bx	lr
	...

08006424 <_ZNSt11logic_errorD1Ev>:
 8006424:	b513      	push	{r0, r1, r4, lr}
 8006426:	4604      	mov	r4, r0
 8006428:	4b06      	ldr	r3, [pc, #24]	; (8006444 <_ZNSt11logic_errorD1Ev+0x20>)
 800642a:	a901      	add	r1, sp, #4
 800642c:	6003      	str	r3, [r0, #0]
 800642e:	6840      	ldr	r0, [r0, #4]
 8006430:	380c      	subs	r0, #12
 8006432:	f000 f89d 	bl	8006570 <_ZNSs4_Rep10_M_disposeERKSaIcE>
 8006436:	4620      	mov	r0, r4
 8006438:	f7ff f9fc 	bl	8005834 <_ZNSt9exceptionD1Ev>
 800643c:	4620      	mov	r0, r4
 800643e:	b002      	add	sp, #8
 8006440:	bd10      	pop	{r4, pc}
 8006442:	bf00      	nop
 8006444:	08007108 	.word	0x08007108

08006448 <_ZNSt11logic_errorD0Ev>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4604      	mov	r4, r0
 800644c:	f7ff ffea 	bl	8006424 <_ZNSt11logic_errorD1Ev>
 8006450:	4620      	mov	r0, r4
 8006452:	f000 f8a7 	bl	80065a4 <_ZdlPv>
 8006456:	4620      	mov	r0, r4
 8006458:	bd10      	pop	{r4, pc}
	...

0800645c <_ZNSsC2EPKcRKSaIcE.isra.0>:
 800645c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006460:	4607      	mov	r7, r0
 8006462:	4615      	mov	r5, r2
 8006464:	460c      	mov	r4, r1
 8006466:	b1d9      	cbz	r1, 80064a0 <_ZNSsC2EPKcRKSaIcE.isra.0+0x44>
 8006468:	4608      	mov	r0, r1
 800646a:	f7f9 fe79 	bl	8000160 <strlen>
 800646e:	eb04 0900 	add.w	r9, r4, r0
 8006472:	454c      	cmp	r4, r9
 8006474:	4606      	mov	r6, r0
 8006476:	d016      	beq.n	80064a6 <_ZNSsC2EPKcRKSaIcE.isra.0+0x4a>
 8006478:	462a      	mov	r2, r5
 800647a:	2100      	movs	r1, #0
 800647c:	f000 f846 	bl	800650c <_ZNSs4_Rep9_S_createEjjRKSaIcE>
 8006480:	4605      	mov	r5, r0
 8006482:	f100 080c 	add.w	r8, r0, #12
 8006486:	4621      	mov	r1, r4
 8006488:	4640      	mov	r0, r8
 800648a:	464a      	mov	r2, r9
 800648c:	f000 f82c 	bl	80064e8 <_ZNSs13_S_copy_charsEPcPKcS1_>
 8006490:	4631      	mov	r1, r6
 8006492:	4628      	mov	r0, r5
 8006494:	f000 f82e 	bl	80064f4 <_ZNSs4_Rep26_M_set_length_and_sharableEj>
 8006498:	f8c7 8000 	str.w	r8, [r7]
 800649c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064a0:	4802      	ldr	r0, [pc, #8]	; (80064ac <_ZNSsC2EPKcRKSaIcE.isra.0+0x50>)
 80064a2:	f000 f876 	bl	8006592 <_ZSt19__throw_logic_errorPKc>
 80064a6:	f8df 8008 	ldr.w	r8, [pc, #8]	; 80064b0 <_ZNSsC2EPKcRKSaIcE.isra.0+0x54>
 80064aa:	e7f5      	b.n	8006498 <_ZNSsC2EPKcRKSaIcE.isra.0+0x3c>
 80064ac:	08007114 	.word	0x08007114
 80064b0:	200004a4 	.word	0x200004a4

080064b4 <_ZNSt11logic_errorC1EPKc>:
 80064b4:	b513      	push	{r0, r1, r4, lr}
 80064b6:	4604      	mov	r4, r0
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <_ZNSt11logic_errorC1EPKc+0x18>)
 80064ba:	aa01      	add	r2, sp, #4
 80064bc:	f840 3b04 	str.w	r3, [r0], #4
 80064c0:	f7ff ffcc 	bl	800645c <_ZNSsC2EPKcRKSaIcE.isra.0>
 80064c4:	4620      	mov	r0, r4
 80064c6:	b002      	add	sp, #8
 80064c8:	bd10      	pop	{r4, pc}
 80064ca:	bf00      	nop
 80064cc:	08007108 	.word	0x08007108

080064d0 <_ZNSs7_M_copyEPcPKcj>:
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	b430      	push	{r4, r5}
 80064d4:	d103      	bne.n	80064de <_ZNSs7_M_copyEPcPKcj+0xe>
 80064d6:	780b      	ldrb	r3, [r1, #0]
 80064d8:	7003      	strb	r3, [r0, #0]
 80064da:	bc30      	pop	{r4, r5}
 80064dc:	4770      	bx	lr
 80064de:	2a00      	cmp	r2, #0
 80064e0:	d0fb      	beq.n	80064da <_ZNSs7_M_copyEPcPKcj+0xa>
 80064e2:	bc30      	pop	{r4, r5}
 80064e4:	f000 b930 	b.w	8006748 <memcpy>

080064e8 <_ZNSs13_S_copy_charsEPcPKcS1_>:
 80064e8:	b508      	push	{r3, lr}
 80064ea:	1a52      	subs	r2, r2, r1
 80064ec:	f7ff fff0 	bl	80064d0 <_ZNSs7_M_copyEPcPKcj>
 80064f0:	bd08      	pop	{r3, pc}
	...

080064f4 <_ZNSs4_Rep26_M_set_length_and_sharableEj>:
 80064f4:	4b04      	ldr	r3, [pc, #16]	; (8006508 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x14>)
 80064f6:	4298      	cmp	r0, r3
 80064f8:	d004      	beq.n	8006504 <_ZNSs4_Rep26_M_set_length_and_sharableEj+0x10>
 80064fa:	2300      	movs	r3, #0
 80064fc:	6001      	str	r1, [r0, #0]
 80064fe:	6083      	str	r3, [r0, #8]
 8006500:	4408      	add	r0, r1
 8006502:	7303      	strb	r3, [r0, #12]
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000498 	.word	0x20000498

0800650c <_ZNSs4_Rep9_S_createEjjRKSaIcE>:
 800650c:	4b15      	ldr	r3, [pc, #84]	; (8006564 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 800650e:	b510      	push	{r4, lr}
 8006510:	4298      	cmp	r0, r3
 8006512:	4604      	mov	r4, r0
 8006514:	d902      	bls.n	800651c <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x10>
 8006516:	4814      	ldr	r0, [pc, #80]	; (8006568 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x5c>)
 8006518:	f000 f83e 	bl	8006598 <_ZSt20__throw_length_errorPKc>
 800651c:	4288      	cmp	r0, r1
 800651e:	d903      	bls.n	8006528 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x1c>
 8006520:	004b      	lsls	r3, r1, #1
 8006522:	4298      	cmp	r0, r3
 8006524:	bf38      	it	cc
 8006526:	461c      	movcc	r4, r3
 8006528:	f104 031d 	add.w	r3, r4, #29
 800652c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006530:	f104 000d 	add.w	r0, r4, #13
 8006534:	d90c      	bls.n	8006550 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 8006536:	428c      	cmp	r4, r1
 8006538:	d90a      	bls.n	8006550 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x44>
 800653a:	480a      	ldr	r0, [pc, #40]	; (8006564 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x58>)
 800653c:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 8006540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006544:	1ae4      	subs	r4, r4, r3
 8006546:	4284      	cmp	r4, r0
 8006548:	bf28      	it	cs
 800654a:	4604      	movcs	r4, r0
 800654c:	f104 000d 	add.w	r0, r4, #13
 8006550:	2800      	cmp	r0, #0
 8006552:	da01      	bge.n	8006558 <_ZNSs4_Rep9_S_createEjjRKSaIcE+0x4c>
 8006554:	f000 f81a 	bl	800658c <_ZSt17__throw_bad_allocv>
 8006558:	f7ff fc78 	bl	8005e4c <_Znwj>
 800655c:	2200      	movs	r2, #0
 800655e:	6044      	str	r4, [r0, #4]
 8006560:	6082      	str	r2, [r0, #8]
 8006562:	bd10      	pop	{r4, pc}
 8006564:	3ffffffc 	.word	0x3ffffffc
 8006568:	0800713e 	.word	0x0800713e

0800656c <_ZNSs4_Rep10_M_destroyERKSaIcE>:
 800656c:	f000 b81a 	b.w	80065a4 <_ZdlPv>

08006570 <_ZNSs4_Rep10_M_disposeERKSaIcE>:
 8006570:	4a05      	ldr	r2, [pc, #20]	; (8006588 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x18>)
 8006572:	b510      	push	{r4, lr}
 8006574:	4290      	cmp	r0, r2
 8006576:	d006      	beq.n	8006586 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8006578:	6882      	ldr	r2, [r0, #8]
 800657a:	1e54      	subs	r4, r2, #1
 800657c:	2a00      	cmp	r2, #0
 800657e:	6084      	str	r4, [r0, #8]
 8006580:	dc01      	bgt.n	8006586 <_ZNSs4_Rep10_M_disposeERKSaIcE+0x16>
 8006582:	f7ff fff3 	bl	800656c <_ZNSs4_Rep10_M_destroyERKSaIcE>
 8006586:	bd10      	pop	{r4, pc}
 8006588:	20000498 	.word	0x20000498

0800658c <_ZSt17__throw_bad_allocv>:
 800658c:	b508      	push	{r3, lr}
 800658e:	f000 f899 	bl	80066c4 <abort>

08006592 <_ZSt19__throw_logic_errorPKc>:
 8006592:	b508      	push	{r3, lr}
 8006594:	f000 f896 	bl	80066c4 <abort>

08006598 <_ZSt20__throw_length_errorPKc>:
 8006598:	b508      	push	{r3, lr}
 800659a:	f000 f893 	bl	80066c4 <abort>

0800659e <_ZSt25__throw_bad_function_callv>:
 800659e:	b508      	push	{r3, lr}
 80065a0:	f000 f890 	bl	80066c4 <abort>

080065a4 <_ZdlPv>:
 80065a4:	f000 b8c8 	b.w	8006738 <free>

080065a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 80065a8:	7803      	ldrb	r3, [r0, #0]
 80065aa:	2b47      	cmp	r3, #71	; 0x47
 80065ac:	d117      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065ae:	7843      	ldrb	r3, [r0, #1]
 80065b0:	2b4e      	cmp	r3, #78	; 0x4e
 80065b2:	d114      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065b4:	7883      	ldrb	r3, [r0, #2]
 80065b6:	2b55      	cmp	r3, #85	; 0x55
 80065b8:	d111      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065ba:	78c3      	ldrb	r3, [r0, #3]
 80065bc:	2b43      	cmp	r3, #67	; 0x43
 80065be:	d10e      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065c0:	7903      	ldrb	r3, [r0, #4]
 80065c2:	2b43      	cmp	r3, #67	; 0x43
 80065c4:	d10b      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065c6:	7943      	ldrb	r3, [r0, #5]
 80065c8:	2b2b      	cmp	r3, #43	; 0x2b
 80065ca:	d108      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065cc:	7983      	ldrb	r3, [r0, #6]
 80065ce:	2b2b      	cmp	r3, #43	; 0x2b
 80065d0:	d105      	bne.n	80065de <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 80065d2:	79c0      	ldrb	r0, [r0, #7]
 80065d4:	2801      	cmp	r0, #1
 80065d6:	bf8c      	ite	hi
 80065d8:	2000      	movhi	r0, #0
 80065da:	2001      	movls	r0, #1
 80065dc:	4770      	bx	lr
 80065de:	2000      	movs	r0, #0
 80065e0:	4770      	bx	lr

080065e2 <__cxa_call_terminate>:
 80065e2:	b510      	push	{r4, lr}
 80065e4:	4604      	mov	r4, r0
 80065e6:	b148      	cbz	r0, 80065fc <__cxa_call_terminate+0x1a>
 80065e8:	f000 f83b 	bl	8006662 <__cxa_begin_catch>
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7ff ffdb 	bl	80065a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 80065f2:	b118      	cbz	r0, 80065fc <__cxa_call_terminate+0x1a>
 80065f4:	f854 0c14 	ldr.w	r0, [r4, #-20]
 80065f8:	f7ff fb9c 	bl	8005d34 <_ZN10__cxxabiv111__terminateEPFvvE>
 80065fc:	f7ff fba6 	bl	8005d4c <_ZSt9terminatev>

08006600 <__cxa_call_unexpected>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4602      	mov	r2, r0
 8006604:	f7ff ffd0 	bl	80065a8 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006608:	4604      	mov	r4, r0
 800660a:	b140      	cbz	r0, 800661e <__cxa_call_unexpected+0x1e>
 800660c:	2500      	movs	r5, #0
 800660e:	f852 4c18 	ldr.w	r4, [r2, #-24]
 8006612:	4610      	mov	r0, r2
 8006614:	f000 f825 	bl	8006662 <__cxa_begin_catch>
 8006618:	b11d      	cbz	r5, 8006622 <__cxa_call_unexpected+0x22>
 800661a:	f7ff fba9 	bl	8005d70 <_ZSt10unexpectedv>
 800661e:	2501      	movs	r5, #1
 8006620:	e7f7      	b.n	8006612 <__cxa_call_unexpected+0x12>
 8006622:	4620      	mov	r0, r4
 8006624:	f7ff fb97 	bl	8005d56 <_ZN10__cxxabiv112__unexpectedEPFvvE>

08006628 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>:
 8006628:	7803      	ldrb	r3, [r0, #0]
 800662a:	2b47      	cmp	r3, #71	; 0x47
 800662c:	d117      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800662e:	7843      	ldrb	r3, [r0, #1]
 8006630:	2b4e      	cmp	r3, #78	; 0x4e
 8006632:	d114      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006634:	7883      	ldrb	r3, [r0, #2]
 8006636:	2b55      	cmp	r3, #85	; 0x55
 8006638:	d111      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800663a:	78c3      	ldrb	r3, [r0, #3]
 800663c:	2b43      	cmp	r3, #67	; 0x43
 800663e:	d10e      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006640:	7903      	ldrb	r3, [r0, #4]
 8006642:	2b43      	cmp	r3, #67	; 0x43
 8006644:	d10b      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006646:	7943      	ldrb	r3, [r0, #5]
 8006648:	2b2b      	cmp	r3, #43	; 0x2b
 800664a:	d108      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 800664c:	7983      	ldrb	r3, [r0, #6]
 800664e:	2b2b      	cmp	r3, #43	; 0x2b
 8006650:	d105      	bne.n	800665e <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc+0x36>
 8006652:	79c0      	ldrb	r0, [r0, #7]
 8006654:	2801      	cmp	r0, #1
 8006656:	bf8c      	ite	hi
 8006658:	2000      	movhi	r0, #0
 800665a:	2001      	movls	r0, #1
 800665c:	4770      	bx	lr
 800665e:	2000      	movs	r0, #0
 8006660:	4770      	bx	lr

08006662 <__cxa_begin_catch>:
 8006662:	b538      	push	{r3, r4, r5, lr}
 8006664:	4604      	mov	r4, r0
 8006666:	f7ff f8e7 	bl	8005838 <__cxa_get_globals>
 800666a:	4602      	mov	r2, r0
 800666c:	6805      	ldr	r5, [r0, #0]
 800666e:	4620      	mov	r0, r4
 8006670:	f1a4 0120 	sub.w	r1, r4, #32
 8006674:	f7ff ffd8 	bl	8006628 <_ZN10__cxxabiv1L24__is_gxx_exception_classEPc>
 8006678:	b928      	cbnz	r0, 8006686 <__cxa_begin_catch+0x24>
 800667a:	b10d      	cbz	r5, 8006680 <__cxa_begin_catch+0x1e>
 800667c:	f7ff fb66 	bl	8005d4c <_ZSt9terminatev>
 8006680:	6011      	str	r1, [r2, #0]
 8006682:	4628      	mov	r0, r5
 8006684:	bd38      	pop	{r3, r4, r5, pc}
 8006686:	f854 3c0c 	ldr.w	r3, [r4, #-12]
 800668a:	4620      	mov	r0, r4
 800668c:	2b00      	cmp	r3, #0
 800668e:	bfb4      	ite	lt
 8006690:	f1c3 0301 	rsblt	r3, r3, #1
 8006694:	3301      	addge	r3, #1
 8006696:	f844 3c0c 	str.w	r3, [r4, #-12]
 800669a:	6853      	ldr	r3, [r2, #4]
 800669c:	428d      	cmp	r5, r1
 800669e:	f103 33ff 	add.w	r3, r3, #4294967295
 80066a2:	6053      	str	r3, [r2, #4]
 80066a4:	bf1c      	itt	ne
 80066a6:	f844 5c10 	strne.w	r5, [r4, #-16]
 80066aa:	6011      	strne	r1, [r2, #0]
 80066ac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80066ae:	f7fa fa45 	bl	8000b3c <_Unwind_Complete>
 80066b2:	e7e6      	b.n	8006682 <__cxa_begin_catch+0x20>

080066b4 <_ZSt15get_new_handlerv>:
 80066b4:	4b02      	ldr	r3, [pc, #8]	; (80066c0 <_ZSt15get_new_handlerv+0xc>)
 80066b6:	6818      	ldr	r0, [r3, #0]
 80066b8:	f3bf 8f5b 	dmb	ish
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	200004a8 	.word	0x200004a8

080066c4 <abort>:
 80066c4:	2006      	movs	r0, #6
 80066c6:	b508      	push	{r3, lr}
 80066c8:	f000 f982 	bl	80069d0 <raise>
 80066cc:	2001      	movs	r0, #1
 80066ce:	f7fd f85c 	bl	800378a <_exit>
	...

080066d4 <__errno>:
 80066d4:	4b01      	ldr	r3, [pc, #4]	; (80066dc <__errno+0x8>)
 80066d6:	6818      	ldr	r0, [r3, #0]
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20000018 	.word	0x20000018

080066e0 <__libc_init_array>:
 80066e0:	b570      	push	{r4, r5, r6, lr}
 80066e2:	2600      	movs	r6, #0
 80066e4:	4d0c      	ldr	r5, [pc, #48]	; (8006718 <__libc_init_array+0x38>)
 80066e6:	4c0d      	ldr	r4, [pc, #52]	; (800671c <__libc_init_array+0x3c>)
 80066e8:	1b64      	subs	r4, r4, r5
 80066ea:	10a4      	asrs	r4, r4, #2
 80066ec:	42a6      	cmp	r6, r4
 80066ee:	d109      	bne.n	8006704 <__libc_init_array+0x24>
 80066f0:	f000 f99e 	bl	8006a30 <_init>
 80066f4:	2600      	movs	r6, #0
 80066f6:	4d0a      	ldr	r5, [pc, #40]	; (8006720 <__libc_init_array+0x40>)
 80066f8:	4c0a      	ldr	r4, [pc, #40]	; (8006724 <__libc_init_array+0x44>)
 80066fa:	1b64      	subs	r4, r4, r5
 80066fc:	10a4      	asrs	r4, r4, #2
 80066fe:	42a6      	cmp	r6, r4
 8006700:	d105      	bne.n	800670e <__libc_init_array+0x2e>
 8006702:	bd70      	pop	{r4, r5, r6, pc}
 8006704:	f855 3b04 	ldr.w	r3, [r5], #4
 8006708:	4798      	blx	r3
 800670a:	3601      	adds	r6, #1
 800670c:	e7ee      	b.n	80066ec <__libc_init_array+0xc>
 800670e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006712:	4798      	blx	r3
 8006714:	3601      	adds	r6, #1
 8006716:	e7f2      	b.n	80066fe <__libc_init_array+0x1e>
 8006718:	080074b8 	.word	0x080074b8
 800671c:	080074b8 	.word	0x080074b8
 8006720:	080074b8 	.word	0x080074b8
 8006724:	080074d0 	.word	0x080074d0

08006728 <malloc>:
 8006728:	4b02      	ldr	r3, [pc, #8]	; (8006734 <malloc+0xc>)
 800672a:	4601      	mov	r1, r0
 800672c:	6818      	ldr	r0, [r3, #0]
 800672e:	f000 b8a3 	b.w	8006878 <_malloc_r>
 8006732:	bf00      	nop
 8006734:	20000018 	.word	0x20000018

08006738 <free>:
 8006738:	4b02      	ldr	r3, [pc, #8]	; (8006744 <free+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f000 b833 	b.w	80067a8 <_free_r>
 8006742:	bf00      	nop
 8006744:	20000018 	.word	0x20000018

08006748 <memcpy>:
 8006748:	440a      	add	r2, r1
 800674a:	4291      	cmp	r1, r2
 800674c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006750:	d100      	bne.n	8006754 <memcpy+0xc>
 8006752:	4770      	bx	lr
 8006754:	b510      	push	{r4, lr}
 8006756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800675a:	4291      	cmp	r1, r2
 800675c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006760:	d1f9      	bne.n	8006756 <memcpy+0xe>
 8006762:	bd10      	pop	{r4, pc}

08006764 <memmove>:
 8006764:	4288      	cmp	r0, r1
 8006766:	b510      	push	{r4, lr}
 8006768:	eb01 0402 	add.w	r4, r1, r2
 800676c:	d902      	bls.n	8006774 <memmove+0x10>
 800676e:	4284      	cmp	r4, r0
 8006770:	4623      	mov	r3, r4
 8006772:	d807      	bhi.n	8006784 <memmove+0x20>
 8006774:	1e43      	subs	r3, r0, #1
 8006776:	42a1      	cmp	r1, r4
 8006778:	d008      	beq.n	800678c <memmove+0x28>
 800677a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800677e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006782:	e7f8      	b.n	8006776 <memmove+0x12>
 8006784:	4601      	mov	r1, r0
 8006786:	4402      	add	r2, r0
 8006788:	428a      	cmp	r2, r1
 800678a:	d100      	bne.n	800678e <memmove+0x2a>
 800678c:	bd10      	pop	{r4, pc}
 800678e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006796:	e7f7      	b.n	8006788 <memmove+0x24>

08006798 <memset>:
 8006798:	4603      	mov	r3, r0
 800679a:	4402      	add	r2, r0
 800679c:	4293      	cmp	r3, r2
 800679e:	d100      	bne.n	80067a2 <memset+0xa>
 80067a0:	4770      	bx	lr
 80067a2:	f803 1b01 	strb.w	r1, [r3], #1
 80067a6:	e7f9      	b.n	800679c <memset+0x4>

080067a8 <_free_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4605      	mov	r5, r0
 80067ac:	2900      	cmp	r1, #0
 80067ae:	d040      	beq.n	8006832 <_free_r+0x8a>
 80067b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067b4:	1f0c      	subs	r4, r1, #4
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	bfb8      	it	lt
 80067ba:	18e4      	addlt	r4, r4, r3
 80067bc:	f000 f924 	bl	8006a08 <__malloc_lock>
 80067c0:	4a1c      	ldr	r2, [pc, #112]	; (8006834 <_free_r+0x8c>)
 80067c2:	6813      	ldr	r3, [r2, #0]
 80067c4:	b933      	cbnz	r3, 80067d4 <_free_r+0x2c>
 80067c6:	6063      	str	r3, [r4, #4]
 80067c8:	6014      	str	r4, [r2, #0]
 80067ca:	4628      	mov	r0, r5
 80067cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067d0:	f000 b920 	b.w	8006a14 <__malloc_unlock>
 80067d4:	42a3      	cmp	r3, r4
 80067d6:	d908      	bls.n	80067ea <_free_r+0x42>
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	1821      	adds	r1, r4, r0
 80067dc:	428b      	cmp	r3, r1
 80067de:	bf01      	itttt	eq
 80067e0:	6819      	ldreq	r1, [r3, #0]
 80067e2:	685b      	ldreq	r3, [r3, #4]
 80067e4:	1809      	addeq	r1, r1, r0
 80067e6:	6021      	streq	r1, [r4, #0]
 80067e8:	e7ed      	b.n	80067c6 <_free_r+0x1e>
 80067ea:	461a      	mov	r2, r3
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	b10b      	cbz	r3, 80067f4 <_free_r+0x4c>
 80067f0:	42a3      	cmp	r3, r4
 80067f2:	d9fa      	bls.n	80067ea <_free_r+0x42>
 80067f4:	6811      	ldr	r1, [r2, #0]
 80067f6:	1850      	adds	r0, r2, r1
 80067f8:	42a0      	cmp	r0, r4
 80067fa:	d10b      	bne.n	8006814 <_free_r+0x6c>
 80067fc:	6820      	ldr	r0, [r4, #0]
 80067fe:	4401      	add	r1, r0
 8006800:	1850      	adds	r0, r2, r1
 8006802:	4283      	cmp	r3, r0
 8006804:	6011      	str	r1, [r2, #0]
 8006806:	d1e0      	bne.n	80067ca <_free_r+0x22>
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	4401      	add	r1, r0
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	6053      	str	r3, [r2, #4]
 8006812:	e7da      	b.n	80067ca <_free_r+0x22>
 8006814:	d902      	bls.n	800681c <_free_r+0x74>
 8006816:	230c      	movs	r3, #12
 8006818:	602b      	str	r3, [r5, #0]
 800681a:	e7d6      	b.n	80067ca <_free_r+0x22>
 800681c:	6820      	ldr	r0, [r4, #0]
 800681e:	1821      	adds	r1, r4, r0
 8006820:	428b      	cmp	r3, r1
 8006822:	bf01      	itttt	eq
 8006824:	6819      	ldreq	r1, [r3, #0]
 8006826:	685b      	ldreq	r3, [r3, #4]
 8006828:	1809      	addeq	r1, r1, r0
 800682a:	6021      	streq	r1, [r4, #0]
 800682c:	6063      	str	r3, [r4, #4]
 800682e:	6054      	str	r4, [r2, #4]
 8006830:	e7cb      	b.n	80067ca <_free_r+0x22>
 8006832:	bd38      	pop	{r3, r4, r5, pc}
 8006834:	200004ac 	.word	0x200004ac

08006838 <sbrk_aligned>:
 8006838:	b570      	push	{r4, r5, r6, lr}
 800683a:	4e0e      	ldr	r6, [pc, #56]	; (8006874 <sbrk_aligned+0x3c>)
 800683c:	460c      	mov	r4, r1
 800683e:	6831      	ldr	r1, [r6, #0]
 8006840:	4605      	mov	r5, r0
 8006842:	b911      	cbnz	r1, 800684a <sbrk_aligned+0x12>
 8006844:	f000 f88c 	bl	8006960 <_sbrk_r>
 8006848:	6030      	str	r0, [r6, #0]
 800684a:	4621      	mov	r1, r4
 800684c:	4628      	mov	r0, r5
 800684e:	f000 f887 	bl	8006960 <_sbrk_r>
 8006852:	1c43      	adds	r3, r0, #1
 8006854:	d00a      	beq.n	800686c <sbrk_aligned+0x34>
 8006856:	1cc4      	adds	r4, r0, #3
 8006858:	f024 0403 	bic.w	r4, r4, #3
 800685c:	42a0      	cmp	r0, r4
 800685e:	d007      	beq.n	8006870 <sbrk_aligned+0x38>
 8006860:	1a21      	subs	r1, r4, r0
 8006862:	4628      	mov	r0, r5
 8006864:	f000 f87c 	bl	8006960 <_sbrk_r>
 8006868:	3001      	adds	r0, #1
 800686a:	d101      	bne.n	8006870 <sbrk_aligned+0x38>
 800686c:	f04f 34ff 	mov.w	r4, #4294967295
 8006870:	4620      	mov	r0, r4
 8006872:	bd70      	pop	{r4, r5, r6, pc}
 8006874:	200004b0 	.word	0x200004b0

08006878 <_malloc_r>:
 8006878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687c:	1ccd      	adds	r5, r1, #3
 800687e:	f025 0503 	bic.w	r5, r5, #3
 8006882:	3508      	adds	r5, #8
 8006884:	2d0c      	cmp	r5, #12
 8006886:	bf38      	it	cc
 8006888:	250c      	movcc	r5, #12
 800688a:	2d00      	cmp	r5, #0
 800688c:	4607      	mov	r7, r0
 800688e:	db01      	blt.n	8006894 <_malloc_r+0x1c>
 8006890:	42a9      	cmp	r1, r5
 8006892:	d905      	bls.n	80068a0 <_malloc_r+0x28>
 8006894:	230c      	movs	r3, #12
 8006896:	2600      	movs	r6, #0
 8006898:	603b      	str	r3, [r7, #0]
 800689a:	4630      	mov	r0, r6
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	4e2e      	ldr	r6, [pc, #184]	; (800695c <_malloc_r+0xe4>)
 80068a2:	f000 f8b1 	bl	8006a08 <__malloc_lock>
 80068a6:	6833      	ldr	r3, [r6, #0]
 80068a8:	461c      	mov	r4, r3
 80068aa:	bb34      	cbnz	r4, 80068fa <_malloc_r+0x82>
 80068ac:	4629      	mov	r1, r5
 80068ae:	4638      	mov	r0, r7
 80068b0:	f7ff ffc2 	bl	8006838 <sbrk_aligned>
 80068b4:	1c43      	adds	r3, r0, #1
 80068b6:	4604      	mov	r4, r0
 80068b8:	d14d      	bne.n	8006956 <_malloc_r+0xde>
 80068ba:	6834      	ldr	r4, [r6, #0]
 80068bc:	4626      	mov	r6, r4
 80068be:	2e00      	cmp	r6, #0
 80068c0:	d140      	bne.n	8006944 <_malloc_r+0xcc>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	4631      	mov	r1, r6
 80068c6:	4638      	mov	r0, r7
 80068c8:	eb04 0803 	add.w	r8, r4, r3
 80068cc:	f000 f848 	bl	8006960 <_sbrk_r>
 80068d0:	4580      	cmp	r8, r0
 80068d2:	d13a      	bne.n	800694a <_malloc_r+0xd2>
 80068d4:	6821      	ldr	r1, [r4, #0]
 80068d6:	3503      	adds	r5, #3
 80068d8:	1a6d      	subs	r5, r5, r1
 80068da:	f025 0503 	bic.w	r5, r5, #3
 80068de:	3508      	adds	r5, #8
 80068e0:	2d0c      	cmp	r5, #12
 80068e2:	bf38      	it	cc
 80068e4:	250c      	movcc	r5, #12
 80068e6:	4638      	mov	r0, r7
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7ff ffa5 	bl	8006838 <sbrk_aligned>
 80068ee:	3001      	adds	r0, #1
 80068f0:	d02b      	beq.n	800694a <_malloc_r+0xd2>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	442b      	add	r3, r5
 80068f6:	6023      	str	r3, [r4, #0]
 80068f8:	e00e      	b.n	8006918 <_malloc_r+0xa0>
 80068fa:	6822      	ldr	r2, [r4, #0]
 80068fc:	1b52      	subs	r2, r2, r5
 80068fe:	d41e      	bmi.n	800693e <_malloc_r+0xc6>
 8006900:	2a0b      	cmp	r2, #11
 8006902:	d916      	bls.n	8006932 <_malloc_r+0xba>
 8006904:	1961      	adds	r1, r4, r5
 8006906:	42a3      	cmp	r3, r4
 8006908:	6025      	str	r5, [r4, #0]
 800690a:	bf18      	it	ne
 800690c:	6059      	strne	r1, [r3, #4]
 800690e:	6863      	ldr	r3, [r4, #4]
 8006910:	bf08      	it	eq
 8006912:	6031      	streq	r1, [r6, #0]
 8006914:	5162      	str	r2, [r4, r5]
 8006916:	604b      	str	r3, [r1, #4]
 8006918:	4638      	mov	r0, r7
 800691a:	f104 060b 	add.w	r6, r4, #11
 800691e:	f000 f879 	bl	8006a14 <__malloc_unlock>
 8006922:	f026 0607 	bic.w	r6, r6, #7
 8006926:	1d23      	adds	r3, r4, #4
 8006928:	1af2      	subs	r2, r6, r3
 800692a:	d0b6      	beq.n	800689a <_malloc_r+0x22>
 800692c:	1b9b      	subs	r3, r3, r6
 800692e:	50a3      	str	r3, [r4, r2]
 8006930:	e7b3      	b.n	800689a <_malloc_r+0x22>
 8006932:	6862      	ldr	r2, [r4, #4]
 8006934:	42a3      	cmp	r3, r4
 8006936:	bf0c      	ite	eq
 8006938:	6032      	streq	r2, [r6, #0]
 800693a:	605a      	strne	r2, [r3, #4]
 800693c:	e7ec      	b.n	8006918 <_malloc_r+0xa0>
 800693e:	4623      	mov	r3, r4
 8006940:	6864      	ldr	r4, [r4, #4]
 8006942:	e7b2      	b.n	80068aa <_malloc_r+0x32>
 8006944:	4634      	mov	r4, r6
 8006946:	6876      	ldr	r6, [r6, #4]
 8006948:	e7b9      	b.n	80068be <_malloc_r+0x46>
 800694a:	230c      	movs	r3, #12
 800694c:	4638      	mov	r0, r7
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	f000 f860 	bl	8006a14 <__malloc_unlock>
 8006954:	e7a1      	b.n	800689a <_malloc_r+0x22>
 8006956:	6025      	str	r5, [r4, #0]
 8006958:	e7de      	b.n	8006918 <_malloc_r+0xa0>
 800695a:	bf00      	nop
 800695c:	200004ac 	.word	0x200004ac

08006960 <_sbrk_r>:
 8006960:	b538      	push	{r3, r4, r5, lr}
 8006962:	2300      	movs	r3, #0
 8006964:	4d05      	ldr	r5, [pc, #20]	; (800697c <_sbrk_r+0x1c>)
 8006966:	4604      	mov	r4, r0
 8006968:	4608      	mov	r0, r1
 800696a:	602b      	str	r3, [r5, #0]
 800696c:	f7fc ff14 	bl	8003798 <_sbrk>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_sbrk_r+0x1a>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_sbrk_r+0x1a>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	200004b4 	.word	0x200004b4

08006980 <_raise_r>:
 8006980:	291f      	cmp	r1, #31
 8006982:	b538      	push	{r3, r4, r5, lr}
 8006984:	4604      	mov	r4, r0
 8006986:	460d      	mov	r5, r1
 8006988:	d904      	bls.n	8006994 <_raise_r+0x14>
 800698a:	2316      	movs	r3, #22
 800698c:	6003      	str	r3, [r0, #0]
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	bd38      	pop	{r3, r4, r5, pc}
 8006994:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006996:	b112      	cbz	r2, 800699e <_raise_r+0x1e>
 8006998:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800699c:	b94b      	cbnz	r3, 80069b2 <_raise_r+0x32>
 800699e:	4620      	mov	r0, r4
 80069a0:	f000 f830 	bl	8006a04 <_getpid_r>
 80069a4:	462a      	mov	r2, r5
 80069a6:	4601      	mov	r1, r0
 80069a8:	4620      	mov	r0, r4
 80069aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069ae:	f000 b817 	b.w	80069e0 <_kill_r>
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d00a      	beq.n	80069cc <_raise_r+0x4c>
 80069b6:	1c59      	adds	r1, r3, #1
 80069b8:	d103      	bne.n	80069c2 <_raise_r+0x42>
 80069ba:	2316      	movs	r3, #22
 80069bc:	6003      	str	r3, [r0, #0]
 80069be:	2001      	movs	r0, #1
 80069c0:	e7e7      	b.n	8006992 <_raise_r+0x12>
 80069c2:	2400      	movs	r4, #0
 80069c4:	4628      	mov	r0, r5
 80069c6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069ca:	4798      	blx	r3
 80069cc:	2000      	movs	r0, #0
 80069ce:	e7e0      	b.n	8006992 <_raise_r+0x12>

080069d0 <raise>:
 80069d0:	4b02      	ldr	r3, [pc, #8]	; (80069dc <raise+0xc>)
 80069d2:	4601      	mov	r1, r0
 80069d4:	6818      	ldr	r0, [r3, #0]
 80069d6:	f7ff bfd3 	b.w	8006980 <_raise_r>
 80069da:	bf00      	nop
 80069dc:	20000018 	.word	0x20000018

080069e0 <_kill_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	2300      	movs	r3, #0
 80069e4:	4d06      	ldr	r5, [pc, #24]	; (8006a00 <_kill_r+0x20>)
 80069e6:	4604      	mov	r4, r0
 80069e8:	4608      	mov	r0, r1
 80069ea:	4611      	mov	r1, r2
 80069ec:	602b      	str	r3, [r5, #0]
 80069ee:	f7fc fec4 	bl	800377a <_kill>
 80069f2:	1c43      	adds	r3, r0, #1
 80069f4:	d102      	bne.n	80069fc <_kill_r+0x1c>
 80069f6:	682b      	ldr	r3, [r5, #0]
 80069f8:	b103      	cbz	r3, 80069fc <_kill_r+0x1c>
 80069fa:	6023      	str	r3, [r4, #0]
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	bf00      	nop
 8006a00:	200004b4 	.word	0x200004b4

08006a04 <_getpid_r>:
 8006a04:	f7fc beb7 	b.w	8003776 <_getpid>

08006a08 <__malloc_lock>:
 8006a08:	4801      	ldr	r0, [pc, #4]	; (8006a10 <__malloc_lock+0x8>)
 8006a0a:	f000 b809 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 8006a0e:	bf00      	nop
 8006a10:	200004b8 	.word	0x200004b8

08006a14 <__malloc_unlock>:
 8006a14:	4801      	ldr	r0, [pc, #4]	; (8006a1c <__malloc_unlock+0x8>)
 8006a16:	f000 b804 	b.w	8006a22 <__retarget_lock_release_recursive>
 8006a1a:	bf00      	nop
 8006a1c:	200004b8 	.word	0x200004b8

08006a20 <__retarget_lock_acquire_recursive>:
 8006a20:	4770      	bx	lr

08006a22 <__retarget_lock_release_recursive>:
 8006a22:	4770      	bx	lr

08006a24 <_Unwind_GetDataRelBase>:
 8006a24:	b508      	push	{r3, lr}
 8006a26:	f7ff fe4d 	bl	80066c4 <abort>

08006a2a <_Unwind_GetTextRelBase>:
 8006a2a:	b508      	push	{r3, lr}
 8006a2c:	f7ff fffa 	bl	8006a24 <_Unwind_GetDataRelBase>

08006a30 <_init>:
 8006a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a32:	bf00      	nop
 8006a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a36:	bc08      	pop	{r3}
 8006a38:	469e      	mov	lr, r3
 8006a3a:	4770      	bx	lr

08006a3c <_fini>:
 8006a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3e:	bf00      	nop
 8006a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a42:	bc08      	pop	{r3}
 8006a44:	469e      	mov	lr, r3
 8006a46:	4770      	bx	lr
